{"file_contents":{"clear_storage.js":{"content":"localStorage.clear();\n","size_bytes":22},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# ChipTuning PRO - Professional ECU Tuning Service\n\n## Overview\n\nChipTuning PRO is a professional automotive ECU tuning and performance enhancement service website. It provides customers with the ability to check vehicle power specifications, explore tuning services, and request consultations. The application features a comprehensive vehicle database with power specifications for cars, trucks, and agricultural vehicles, along with detailed service offerings including Stage 1/2 chiptuning, EGR/DPF removal, and the ZBOX tuning device.\n\nThe website is fully GDPR compliant with comprehensive privacy features including cookie consent management, privacy policy, and data protection compliance.\n\n## Recent Enhancements (January 2025)\n\n### Admin Panel Vehicle Manager Fix (Latest)\n- **Authentication Issue Resolved**: Fixed 401 unauthorized errors when adding/editing vehicles in admin panel\n- **Focus Input Problems Fixed**: Resolved input focus loss on every keystroke in vehicle forms\n- **Database Integration**: Connected admin panel vehicle manager to main comprehensive vehicle database\n- **Stable Form Components**: Implemented memoized VehicleForm component to prevent React re-rendering issues\n- **Proper API Integration**: Added authenticated API requests with proper authorization headers for all admin vehicle operations\n\n### Complete Main Page Content Management \n- **Hero Statistics**: Made statistics (client count, project count, experience years) fully editable through admin panel\n- **Hero Background Integration**: Connected Site Identity hero image upload to actual hero section display\n- **Comprehensive Content Analysis**: Documented editability status of all main page sections\n- **Admin Panel Coverage**: All critical content sections now manageable through user-friendly admin interface\n\n### Site Identity Management Enhanced\n- **Live Color Preview**: Real-time visual preview showing how selected colors appear on the actual website\n- **Professional Image Upload System**: Drag-and-drop file upload for logos, favicons, and hero images using object storage\n- **Enhanced Color Picker**: Detailed descriptions for each color purpose (buttons, links, highlights, etc.)\n- **Visual Feedback**: Current image previews with proper error handling and file size limits\n- **User-friendly Interface**: Professional layout with clear instructions and upload tips\n\n### Analytics System Improvements\n- **Network Error Handling**: Geolocation feature now gracefully handles network failures and timeouts\n- **Optional Location Tracking**: Location data collection made optional with proper fallbacks\n- **Improved Stability**: Fixed runtime errors related to external API calls\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\nAdmin interface requirement: User-friendly for non-technical users with visual editors and drag-and-drop functionality.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **Styling**: Tailwind CSS with a dark theme design system\n- **UI Components**: Radix UI primitives with shadcn/ui component library for consistent design\n- **State Management**: TanStack React Query for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Forms**: React Hook Form with Zod validation\n- **Rich Text Editing**: ReactQuill with dark theme integration for WYSIWYG content editing\n- **Drag & Drop**: @dnd-kit for intuitive navigation menu reordering\n\n### Backend Architecture\n- **Server**: Express.js with TypeScript\n- **Data Layer**: Drizzle ORM with PostgreSQL database schema\n- **API Design**: RESTful endpoints for vehicle data and contact requests\n- **Storage Pattern**: Interface-based storage abstraction with in-memory implementation (ready for database migration)\n\n### Database Schema\n- **Vehicles Table**: Stores vehicle specifications including brand, model, variant, original power/torque, and tuning stage improvements\n- **Contact Requests Table**: Handles customer inquiry form submissions with vehicle details and service requirements\n- **Data Organization**: Supports multiple vehicle types (car, truck, tractor) with hierarchical brand/model/variant structure\n\n### Key Features\n- **Power Checker**: Interactive vehicle selector with real-time power specifications lookup\n- **Service Catalog**: Comprehensive tuning service descriptions with pricing  \n- **Contact System**: Form-based customer inquiry handling with service-specific routing\n- **Responsive Design**: Mobile-first approach with WhatsApp integration for instant communication\n- **Admin Dashboard**: Complete content management system with user-friendly interface designed for non-technical users\n- **Visual Content Editor**: WYSIWYG editor with live preview showing exactly how changes appear on the website\n- **Drag & Drop Navigation**: Intuitive navigation menu management with drag-and-drop reordering\n- **Vehicle Database**: Comprehensive CRUD system for managing car, truck, and tractor specifications\n- **Translation System**: Multilingual support with translation management interface and automatic translation capabilities (Latvian default)\n- **User Management**: Secure JWT-based authentication system for admin access\n- **Help System**: Floating help panel with contextual tips and guidance for all admin functions\n- **GDPR Compliance**: Comprehensive privacy features including cookie consent banner, privacy policy, cookie management, and data protection features\n- **Fully Editable Content**: All main page sections (Hero, Services, ZBox, Why Choose Us) are editable through admin panel with fallback content\n\n### Development Architecture\n- **Monorepo Structure**: Shared schema definitions between client and server\n- **Hot Reload**: Vite integration with Express for development\n- **Type Safety**: End-to-end TypeScript with shared type definitions\n- **Build Process**: Separate client and server builds with static file serving\n\n## External Dependencies\n\n### Database\n- **PostgreSQL**: Primary database for vehicle data and contact requests\n- **Neon Database**: Cloud PostgreSQL service integration via `@neondatabase/serverless`\n\n### UI and Styling\n- **Radix UI**: Comprehensive set of accessible UI primitives\n- **Tailwind CSS**: Utility-first CSS framework with custom design tokens\n- **Lucide Icons**: Icon library with Font Awesome fallback for specific branding icons\n\n### Development Tools\n- **Vite**: Frontend build tool with React plugin and development server\n- **Drizzle Kit**: Database migration and schema management\n- **ESBuild**: Server-side bundling for production builds\n\n### External Services\n- **WhatsApp Business**: Direct customer communication integration\n- **Replit Platform**: Development environment with specific plugins for runtime error handling\n- **CDN Resources**: Google Fonts (Inter) and Font Awesome icons\n\n### Validation and Forms\n- **Zod**: Runtime type validation and schema definition\n- **React Hook Form**: Form state management with resolver integration\n- **Drizzle-Zod**: Automatic schema validation from database definitions","size_bytes":7115},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n          600: \"hsl(217 91% 60%)\",\n          700: \"hsl(217 91% 55%)\",\n          800: \"hsl(217 91% 50%)\",\n          900: \"hsl(217 91% 45%)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n          500: \"hsl(24 100% 50%)\",\n          600: \"hsl(24 100% 45%)\",\n          700: \"hsl(24 100% 40%)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        gray: {\n          900: \"hsl(222 84% 4.9%)\",\n          800: \"hsl(217 32% 17%)\",\n          700: \"hsl(215 20% 25%)\",\n          600: \"hsl(215 20% 35%)\",\n          500: \"hsl(215 20% 45%)\",\n          400: \"hsl(215 20% 65%)\",\n          300: \"hsl(210 40% 80%)\",\n          100: \"hsl(210 40% 98%)\",\n        },\n      },\n      fontFamily: {\n        inter: [\"var(--font-inter)\", \"Inter\", \"sans-serif\"],\n        sans: [\"var(--font-inter)\", \"Inter\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2895},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/auth.ts":{"content":"import jwt from 'jsonwebtoken';\nimport bcrypt from 'bcrypt';\nimport { storage } from './storage';\nimport type { Request, Response, NextFunction } from 'express';\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key-change-in-production';\n\nexport interface AuthRequest extends Request {\n  adminUser?: {\n    id: string;\n    username: string;\n  };\n}\n\nexport async function login(username: string, password: string) {\n  const user = await storage.getAdminUserByUsername(username);\n  \n  if (!user) {\n    throw new Error('Invalid credentials');\n  }\n  \n  const isValidPassword = await bcrypt.compare(password, user.password);\n  \n  if (!isValidPassword) {\n    throw new Error('Invalid credentials');\n  }\n  \n  const token = jwt.sign(\n    { id: user.id, username: user.username },\n    JWT_SECRET,\n    { expiresIn: '24h' }\n  );\n  \n  return { token, user: { id: user.id, username: user.username } };\n}\n\nexport function requireAuth(req: AuthRequest, res: Response, next: NextFunction) {\n  const authHeader = req.headers.authorization;\n  \n  if (!authHeader) {\n    return res.status(401).json({ message: 'No authorization header' });\n  }\n  \n  const token = authHeader.split(' ')[1];\n  \n  if (!token) {\n    return res.status(401).json({ message: 'No token provided' });\n  }\n  \n  try {\n    const decoded = jwt.verify(token, JWT_SECRET) as any;\n    req.adminUser = decoded;\n    next();\n  } catch (error) {\n    return res.status(401).json({ message: 'Invalid token' });\n  }\n}","size_bytes":1466},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertContactRequestSchema,\n  insertPageContentSchema,\n  insertNavigationItemSchema,\n  insertServiceItemSchema,\n  insertContactInfoSchema,\n  insertVehicleSchema,\n  insertPowerCalculatorDataSchema,\n  insertTranslationSchema,\n  insertLanguageSchema,\n  insertPageViewSchema,\n  insertClickEventSchema,\n  insertVehicleSelectionSchema,\n  insertGeoLocationSchema\n} from \"@shared/schema\";\nimport { login, requireAuth, type AuthRequest } from \"./auth\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Vehicle data routes\n  app.get(\"/api/vehicles/brands/:vehicleType\", async (req, res) => {\n    try {\n      const { vehicleType } = req.params;\n      const brands = await storage.getBrandsByType(vehicleType);\n      res.json(brands);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch brands\" });\n    }\n  });\n\n  app.get(\"/api/vehicles/models/:vehicleType/:brand\", async (req, res) => {\n    try {\n      const { vehicleType, brand } = req.params;\n      const models = await storage.getModelsByBrand(brand, vehicleType);\n      res.json(models);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch models\" });\n    }\n  });\n\n  app.get(\"/api/vehicles/generations/:vehicleType/:brand/:model\", async (req, res) => {\n    try {\n      const { vehicleType, brand, model } = req.params;\n      const generations = await storage.getGenerationsByModel(brand, model, vehicleType);\n      res.json(generations);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch generations\" });\n    }\n  });\n\n  app.get(\"/api/vehicles/engines/:vehicleType/:brand/:model/:generation\", async (req, res) => {\n    try {\n      const { vehicleType, brand, model, generation } = req.params;\n      const engines = await storage.getEnginesByGeneration(brand, model, generation, vehicleType);\n      res.json(engines);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch engines\" });\n    }\n  });\n\n  app.get(\"/api/vehicles/variants/:vehicleType/:brand/:model/:generation/:engine\", async (req, res) => {\n    try {\n      const { vehicleType, brand, model, generation, engine } = req.params;\n      const variants = await storage.getVariantsByEngine(brand, model, generation, engine, vehicleType);\n      res.json(variants);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch variants\" });\n    }\n  });\n\n  app.get(\"/api/vehicles/:vehicleType/:brand/:model/:generation/:engine/:variant\", async (req, res) => {\n    try {\n      const { vehicleType, brand, model, generation, engine, variant } = req.params;\n      const vehicle = await storage.getVehicle(brand, model, generation, engine, variant, vehicleType);\n      if (!vehicle) {\n        return res.status(404).json({ message: \"Vehicle not found\" });\n      }\n      res.json(vehicle);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch vehicle\" });\n    }\n  });\n\n  // Contact form route\n  app.post(\"/api/contact\", async (req, res) => {\n    try {\n      const validatedData = insertContactRequestSchema.parse(req.body);\n      const contactRequest = await storage.createContactRequest(validatedData);\n      \n      // Here you could add email sending functionality\n      // await sendEmail(contactRequest);\n      \n      res.status(201).json({ \n        message: \"Contact request submitted successfully\",\n        id: contactRequest.id \n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Invalid request data\", \n          errors: error.errors \n        });\n      }\n      res.status(500).json({ message: \"Failed to submit contact request\" });\n    }\n  });\n\n  // Admin authentication routes\n  app.post(\"/api/admin/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      if (!username || !password) {\n        return res.status(400).json({ message: \"Username and password required\" });\n      }\n      \n      const result = await login(username, password);\n      res.json(result);\n    } catch (error: any) {\n      res.status(401).json({ message: error.message });\n    }\n  });\n\n  // Admin content management routes\n  app.get(\"/api/admin/page-content\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const content = await storage.getAllPageContent();\n      res.json(content);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch page content\" });\n    }\n  });\n\n  app.post(\"/api/admin/page-content\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const validatedData = insertPageContentSchema.parse(req.body);\n      const content = await storage.upsertPageContent(validatedData);\n      res.json(content);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to save page content\" });\n    }\n  });\n\n  // Initialize default page content\n  app.post(\"/api/admin/init-default-content\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const defaultPages = [\n        {\n          pageName: 'hero-section',\n          title: 'Hero Section',\n          subtitle: 'Main homepage hero section with title, subtitle and CTA',\n          content: {\n            htmlContent: '<h1>Professional ECU Tuning</h1><p>Unlock your vehicle\\'s true potential with our professional ECU tuning services. Experience enhanced performance, improved fuel efficiency, and optimal engine behavior.</p><a href=\"#services\" class=\"cta-button\">Explore Our Services</a>',\n            sections: []\n          },\n          isActive: true\n        },\n        {\n          pageName: 'about-section',\n          title: 'About Section',\n          subtitle: 'About us content and company information',\n          content: {\n            htmlContent: '<h2>About ChipTuning PRO</h2><p>With years of experience in automotive performance optimization, we specialize in professional ECU tuning services that deliver measurable results. Our expert technicians use state-of-the-art equipment and proven methodologies to safely enhance your vehicle\\'s performance.</p><ul><li>✓ Certified ECU specialists</li><li>✓ Latest tuning technology</li><li>✓ Performance guarantee</li><li>✓ Comprehensive aftercare</li></ul>',\n            sections: []\n          },\n          isActive: true\n        },\n        {\n          pageName: 'services-overview', \n          title: 'Services Overview',\n          subtitle: 'Services section introduction content',\n          content: {\n            htmlContent: '<h2>Our Tuning Services</h2><p>We offer comprehensive ECU tuning solutions tailored to your specific vehicle and performance goals. From basic Stage 1 modifications to advanced performance packages, our services deliver proven results.</p>',\n            sections: []\n          },\n          isActive: true\n        },\n        {\n          pageName: 'power-calculator-section',\n          title: 'Power Calculator Section', \n          subtitle: 'Power calculator introduction and description',\n          content: {\n            htmlContent: '<h2>Check Your Vehicle\\'s Power Potential</h2><p>Discover what performance improvements our tuning services can achieve for your specific vehicle. Our power calculator provides accurate estimates based on your car\\'s make, model, and engine specifications.</p><p>Simply select your vehicle details below to see potential power and torque gains from our Stage 1 and Stage 2 tuning programs.</p>',\n            sections: []\n          },\n          isActive: true\n        },\n        {\n          pageName: 'testimonials-section',\n          title: 'Testimonials Section',\n          subtitle: 'Customer testimonials and reviews', \n          content: {\n            htmlContent: '<h2>What Our Customers Say</h2><blockquote><p>\"Amazing results! My BMW gained 40hp and the fuel economy actually improved. Professional service from start to finish.\"</p><cite>— Mark S., BMW 320d Owner</cite></blockquote><blockquote><p>\"The team at ChipTuning PRO transformed my Audi. The power delivery is smoother and I can feel the difference immediately.\"</p><cite>— Sarah M., Audi A4 Owner</cite></blockquote>',\n            sections: []\n          },\n          isActive: true\n        },\n        {\n          pageName: 'contact-section',\n          title: 'Contact Section',\n          subtitle: 'Contact form and contact information',\n          content: {\n            htmlContent: '<h2>Get Your Free Consultation</h2><p>Ready to unlock your vehicle\\'s potential? Contact us today for a free consultation and personalized tuning recommendation.</p><p>Our experts will analyze your vehicle and driving requirements to recommend the optimal tuning package for maximum performance and reliability.</p>',\n            sections: []\n          },\n          isActive: true\n        },\n        {\n          pageName: 'footer-content',\n          title: 'Footer Content',\n          subtitle: 'Footer links, legal information and company details',\n          content: {\n            htmlContent: '<div class=\"footer-content\"><div class=\"footer-section\"><h4>ChipTuning PRO</h4><p>Professional ECU tuning services for enhanced vehicle performance.</p></div><div class=\"footer-section\"><h4>Services</h4><ul><li>Stage 1 Tuning</li><li>Stage 2 Tuning</li><li>EGR/DPF Removal</li><li>ZBOX Solutions</li></ul></div><div class=\"footer-section\"><h4>Legal</h4><ul><li><a href=\"/privacy-policy\">Privacy Policy</a></li><li><a href=\"/terms-of-service\">Terms of Service</a></li><li><a href=\"/warranty\">Warranty Information</a></li></ul></div></div>',\n            sections: []\n          },\n          isActive: true\n        }\n      ];\n\n      const createdPages = [];\n      for (const pageData of defaultPages) {\n        const content = await storage.upsertPageContent(pageData as any);\n        createdPages.push(content);\n      }\n\n      res.json({ \n        message: 'Default content initialized successfully',\n        pages: createdPages\n      });\n    } catch (error) {\n      console.error('Error initializing default content:', error);\n      res.status(500).json({ message: 'Failed to initialize default content' });\n    }\n  });\n\n  app.get(\"/api/admin/navigation\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const items = await storage.getAllNavigationItems();\n      res.json(items);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch navigation items\" });\n    }\n  });\n\n  app.post(\"/api/admin/navigation\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const validatedData = insertNavigationItemSchema.parse(req.body);\n      const item = await storage.createNavigationItem(validatedData);\n      res.json(item);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create navigation item\" });\n    }\n  });\n\n  app.put(\"/api/admin/navigation/:id\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertNavigationItemSchema.partial().parse(req.body);\n      const item = await storage.updateNavigationItem(id, validatedData);\n      res.json(item);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update navigation item\" });\n    }\n  });\n\n  app.delete(\"/api/admin/navigation/:id\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteNavigationItem(id);\n      res.json({ message: \"Navigation item deleted\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete navigation item\" });\n    }\n  });\n\n  app.get(\"/api/admin/services\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const services = await storage.getAllServiceItems();\n      res.json(services);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch services\" });\n    }\n  });\n\n  app.post(\"/api/admin/services\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const validatedData = insertServiceItemSchema.parse(req.body);\n      const service = await storage.createServiceItem(validatedData);\n      res.json(service);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create service\" });\n    }\n  });\n\n  app.put(\"/api/admin/services/:id\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertServiceItemSchema.partial().parse(req.body);\n      const service = await storage.updateServiceItem(id, validatedData);\n      res.json(service);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update service\" });\n    }\n  });\n\n  app.delete(\"/api/admin/services/:id\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteServiceItem(id);\n      res.json({ message: \"Service deleted\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete service\" });\n    }\n  });\n\n  app.get(\"/api/admin/contact-info\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const contactInfo = await storage.getAllContactInfo();\n      res.json(contactInfo);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch contact info\" });\n    }\n  });\n\n  app.post(\"/api/admin/contact-info\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const validatedData = insertContactInfoSchema.parse(req.body);\n      const info = await storage.createContactInfo(validatedData);\n      res.json(info);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create contact info\" });\n    }\n  });\n\n  app.put(\"/api/admin/contact-info/:id\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertContactInfoSchema.partial().parse(req.body);\n      const info = await storage.updateContactInfo(id, validatedData);\n      res.json(info);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update contact info\" });\n    }\n  });\n\n  app.delete(\"/api/admin/contact-info/:id\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteContactInfo(id);\n      res.json({ message: \"Contact info deleted\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete contact info\" });\n    }\n  });\n\n  // Power calculator data routes\n  app.get(\"/api/admin/power-calculator\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const data = await storage.getAllPowerCalculatorData();\n      res.json(data);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch power calculator data\" });\n    }\n  });\n\n  app.post(\"/api/admin/power-calculator\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const validatedData = insertPowerCalculatorDataSchema.parse(req.body);\n      const data = await storage.createPowerCalculatorData(validatedData);\n      res.json(data);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create power calculator data\" });\n    }\n  });\n\n  app.put(\"/api/admin/power-calculator/:id\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertPowerCalculatorDataSchema.partial().parse(req.body);\n      const data = await storage.updatePowerCalculatorData(id, validatedData);\n      res.json(data);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update power calculator data\" });\n    }\n  });\n\n  // Admin user management routes\n  app.get(\"/api/admin/users\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      // For now, return basic user info - can be expanded later\n      const users = [\n        {\n          id: '1',\n          username: 'admin',\n          isActive: true,\n          createdAt: new Date().toISOString()\n        }\n      ];\n      res.json(users);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  // Vehicle management routes\n  app.get(\"/api/admin/vehicles/:vehicleType\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const { vehicleType } = req.params;\n      const vehicles = await storage.getVehiclesByType(vehicleType);\n      res.json(vehicles);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch vehicles\" });\n    }\n  });\n\n  app.get(\"/api/admin/vehicles\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const allVehicles = await storage.getAllVehicles();\n      res.json(allVehicles);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch vehicles\" });\n    }\n  });\n\n  app.post(\"/api/admin/vehicles\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const validatedData = insertVehicleSchema.parse(req.body);\n      const vehicle = await storage.createVehicle(validatedData);\n      res.json(vehicle);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create vehicle\" });\n    }\n  });\n\n  app.put(\"/api/admin/vehicles/:id\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertVehicleSchema.parse(req.body);\n      const vehicle = await storage.updateVehicle(id, validatedData);\n      if (!vehicle) {\n        return res.status(404).json({ message: \"Vehicle not found\" });\n      }\n      res.json(vehicle);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update vehicle\" });\n    }\n  });\n\n  app.delete(\"/api/admin/vehicles/:id\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteVehicle(id);\n      res.json({ message: \"Vehicle deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete vehicle\" });\n    }\n  });\n\n  // Translation Management Routes\n  app.get(\"/api/admin/translations\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const { language, section } = req.query;\n      const translations = await storage.getTranslations(\n        language as string,\n        section as string\n      );\n      res.json(translations);\n    } catch (error) {\n      console.error(\"Error fetching translations:\", error);\n      res.status(500).json({ message: \"Failed to fetch translations\" });\n    }\n  });\n\n  app.post(\"/api/admin/translations\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const validatedData = insertTranslationSchema.parse(req.body);\n      const translation = await storage.createTranslation(validatedData);\n      res.json(translation);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create translation\" });\n    }\n  });\n\n  app.put(\"/api/admin/translations/:id\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertTranslationSchema.partial().parse(req.body);\n      const translation = await storage.updateTranslation(id, validatedData);\n      if (!translation) {\n        return res.status(404).json({ message: \"Translation not found\" });\n      }\n      res.json(translation);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update translation\" });\n    }\n  });\n\n  app.delete(\"/api/admin/translations/:id\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteTranslation(id);\n      res.json({ message: \"Translation deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete translation\" });\n    }\n  });\n\n  // Language Management Routes\n  app.get(\"/api/admin/languages\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const languages = await storage.getLanguages();\n      res.json(languages);\n    } catch (error) {\n      console.error(\"Error fetching languages:\", error);\n      res.status(500).json({ message: \"Failed to fetch languages\" });\n    }\n  });\n\n  app.post(\"/api/admin/languages\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const validatedData = insertLanguageSchema.parse(req.body);\n      const language = await storage.createLanguage(validatedData);\n      res.json(language);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create language\" });\n    }\n  });\n\n  app.put(\"/api/admin/languages/:code\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const { code } = req.params;\n      const validatedData = insertLanguageSchema.partial().parse(req.body);\n      const language = await storage.updateLanguage(code, validatedData);\n      if (!language) {\n        return res.status(404).json({ message: \"Language not found\" });\n      }\n      res.json(language);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update language\" });\n    }\n  });\n\n  app.delete(\"/api/admin/languages/:code\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const { code } = req.params;\n      await storage.deleteLanguage(code);\n      res.json({ message: \"Language deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete language\" });\n    }\n  });\n\n  // Object storage routes for image uploads\n  app.post(\"/api/objects/upload\", async (req, res) => {\n    try {\n      const { ObjectStorageService } = await import(\"./objectStorage\");\n      const objectStorageService = new ObjectStorageService();\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Error getting upload URL:\", error);\n      res.status(500).json({ error: \"Failed to get upload URL\" });\n    }\n  });\n\n  app.get(\"/objects/:objectPath(*)\", async (req, res) => {\n    try {\n      const { ObjectStorageService, ObjectNotFoundError } = await import(\"./objectStorage\");\n      const objectStorageService = new ObjectStorageService();\n      const objectFile = await objectStorageService.getObjectEntityFile(req.path);\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error: any) {\n      console.error(\"Error accessing object:\", error);\n      if (error instanceof Error && error.name === \"ObjectNotFoundError\") {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  app.put(\"/api/site-images\", async (req, res) => {\n    if (!req.body.imageURL || !req.body.imageType) {\n      return res.status(400).json({ error: \"imageURL and imageType are required\" });\n    }\n\n    try {\n      const { ObjectStorageService } = await import(\"./objectStorage\");\n      const objectStorageService = new ObjectStorageService();\n      const objectPath = objectStorageService.normalizeObjectEntityPath(req.body.imageURL);\n\n      res.status(200).json({\n        objectPath: objectPath,\n        imageType: req.body.imageType,\n      });\n    } catch (error) {\n      console.error(\"Error processing site image:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Site identity routes\n  app.get('/api/admin/site-identity', requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const identity = await storage.getSiteIdentity();\n      res.json(identity || {});\n    } catch (error) {\n      console.error('Error fetching site identity:', error);\n      res.status(500).json({ message: 'Failed to fetch site identity' });\n    }\n  });\n\n  app.post('/api/admin/site-identity', requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const identity = await storage.upsertSiteIdentity(req.body);\n      res.json(identity);\n    } catch (error) {\n      console.error('Error updating site identity:', error);\n      res.status(500).json({ message: 'Failed to update site identity' });\n    }\n  });\n\n  // Public site identity route (for frontend to load branding)\n  app.get('/api/site-identity', async (req, res) => {\n    try {\n      const identity = await storage.getSiteIdentity();\n      res.json(identity || {});\n    } catch (error) {\n      console.error('Error fetching site identity:', error);\n      res.status(500).json({ message: 'Failed to fetch site identity' });\n    }\n  });\n\n  // Analytics tracking routes (public endpoints)\n  app.post(\"/api/analytics/page-view\", async (req, res) => {\n    try {\n      const clientIP = req.ip || req.connection.remoteAddress || req.headers['x-forwarded-for'];\n      const validatedData = insertPageViewSchema.parse({\n        ...req.body,\n        ipAddress: Array.isArray(clientIP) ? clientIP[0] : clientIP,\n        userAgent: req.headers['user-agent'],\n        referrer: req.headers['referer']\n      });\n      const pageView = await storage.trackPageView(validatedData);\n      res.json({ success: true, id: pageView.id });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to track page view\" });\n    }\n  });\n\n  app.post(\"/api/analytics/click\", async (req, res) => {\n    try {\n      const clientIP = req.ip || req.connection.remoteAddress || req.headers['x-forwarded-for'];\n      const validatedData = insertClickEventSchema.parse({\n        ...req.body,\n        ipAddress: Array.isArray(clientIP) ? clientIP[0] : clientIP\n      });\n      const clickEvent = await storage.trackClick(validatedData);\n      res.json({ success: true, id: clickEvent.id });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to track click\" });\n    }\n  });\n\n  app.post(\"/api/analytics/vehicle-selection\", async (req, res) => {\n    try {\n      const clientIP = req.ip || req.connection.remoteAddress || req.headers['x-forwarded-for'];\n      const validatedData = insertVehicleSelectionSchema.parse({\n        ...req.body,\n        ipAddress: Array.isArray(clientIP) ? clientIP[0] : clientIP\n      });\n      const vehicleSelection = await storage.trackVehicleSelection(validatedData);\n      res.json({ success: true, id: vehicleSelection.id });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to track vehicle selection\" });\n    }\n  });\n\n  app.post(\"/api/analytics/geolocation\", async (req, res) => {\n    try {\n      const clientIP = req.ip || req.connection.remoteAddress || req.headers['x-forwarded-for'];\n      const validatedData = insertGeoLocationSchema.parse({\n        ...req.body,\n        ipAddress: Array.isArray(clientIP) ? clientIP[0] : clientIP\n      });\n      const geoLocation = await storage.upsertGeoLocation(validatedData);\n      res.json({ success: true, id: geoLocation.id });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update geolocation\" });\n    }\n  });\n\n  // Analytics admin routes (protected endpoints)\n  app.get(\"/api/admin/analytics/page-views\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const stats = await storage.getPageViewStats(\n        startDate ? new Date(startDate as string) : undefined,\n        endDate ? new Date(endDate as string) : undefined\n      );\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch page view statistics\" });\n    }\n  });\n\n  app.get(\"/api/admin/analytics/clicks\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const stats = await storage.getClickStats(\n        startDate ? new Date(startDate as string) : undefined,\n        endDate ? new Date(endDate as string) : undefined\n      );\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch click statistics\" });\n    }\n  });\n\n  app.get(\"/api/admin/analytics/vehicles\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const stats = await storage.getVehicleSelectionStats(\n        startDate ? new Date(startDate as string) : undefined,\n        endDate ? new Date(endDate as string) : undefined\n      );\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch vehicle selection statistics\" });\n    }\n  });\n\n  app.get(\"/api/admin/analytics/geolocation\", requireAuth, async (req: AuthRequest, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const stats = await storage.getGeoLocationStats(\n        startDate ? new Date(startDate as string) : undefined,\n        endDate ? new Date(endDate as string) : undefined\n      );\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch geolocation statistics\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":31272},"server/storage.ts":{"content":"import { \n  type Vehicle, \n  type InsertVehicle, \n  type ContactRequest, \n  type InsertContactRequest,\n  type AdminUser,\n  type InsertAdminUser,\n  type PageContent,\n  type InsertPageContent,\n  type NavigationItem,\n  type InsertNavigationItem,\n  type ServiceItem,\n  type InsertServiceItem,\n  type ContactInfo,\n  type InsertContactInfo,\n  type PowerCalculatorData,\n  type InsertPowerCalculatorData,\n  type Translation,\n  type InsertTranslation,\n  type Language,\n  type InsertLanguage,\n  type SiteIdentity,\n  type InsertSiteIdentity,\n  type PageView,\n  type InsertPageView,\n  type ClickEvent,\n  type InsertClickEvent,\n  type VehicleSelection,\n  type InsertVehicleSelection,\n  type GeoLocation,\n  type InsertGeoLocation,\n  vehicles,\n  contactRequests,\n  adminUsers,\n  pageContent,\n  navigationItems,\n  serviceItems,\n  contactInfo,\n  powerCalculatorData,\n  translations,\n  languages,\n  siteIdentity,\n  pageViews,\n  clickEvents,\n  vehicleSelections,\n  geoLocations\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, sql } from \"drizzle-orm\";\nimport bcrypt from \"bcrypt\";\n\nexport interface IStorage {\n  // Vehicle operations\n  getVehiclesByType(vehicleType: string): Promise<Vehicle[]>;\n  getBrandsByType(vehicleType: string): Promise<string[]>;\n  getModelsByBrand(brand: string, vehicleType: string): Promise<string[]>;\n  getGenerationsByModel(brand: string, model: string, vehicleType: string): Promise<string[]>;\n  getEnginesByGeneration(brand: string, model: string, generation: string, vehicleType: string): Promise<string[]>;\n  getVariantsByEngine(brand: string, model: string, generation: string, engine: string, vehicleType: string): Promise<Vehicle[]>;\n  getVehicle(brand: string, model: string, generation: string, engine: string, variant: string, vehicleType: string): Promise<Vehicle | undefined>;\n  getAllVehicles(): Promise<Vehicle[]>;\n  createVehicle(vehicle: InsertVehicle): Promise<Vehicle>;\n  updateVehicle(id: string, vehicle: Partial<InsertVehicle>): Promise<Vehicle | undefined>;\n  deleteVehicle(id: string): Promise<void>;\n  createContactRequest(request: InsertContactRequest): Promise<ContactRequest>;\n  \n  // Admin operations\n  createAdminUser(user: InsertAdminUser): Promise<AdminUser>;\n  getAdminUserByUsername(username: string): Promise<AdminUser | undefined>;\n  \n  // Content management operations\n  getAllPageContent(): Promise<PageContent[]>;\n  getPageContent(pageName: string): Promise<PageContent | undefined>;\n  upsertPageContent(content: InsertPageContent): Promise<PageContent>;\n  \n  getAllNavigationItems(): Promise<NavigationItem[]>;\n  createNavigationItem(item: InsertNavigationItem): Promise<NavigationItem>;\n  updateNavigationItem(id: string, item: Partial<InsertNavigationItem>): Promise<NavigationItem>;\n  deleteNavigationItem(id: string): Promise<void>;\n  \n  getAllServiceItems(): Promise<ServiceItem[]>;\n  createServiceItem(item: InsertServiceItem): Promise<ServiceItem>;\n  updateServiceItem(id: string, item: Partial<InsertServiceItem>): Promise<ServiceItem>;\n  deleteServiceItem(id: string): Promise<void>;\n  \n  getAllContactInfo(): Promise<ContactInfo[]>;\n  createContactInfo(info: InsertContactInfo): Promise<ContactInfo>;\n  updateContactInfo(id: string, info: Partial<InsertContactInfo>): Promise<ContactInfo>;\n  deleteContactInfo(id: string): Promise<void>;\n  \n  // Power calculator data operations\n  getAllPowerCalculatorData(): Promise<PowerCalculatorData[]>;\n  getPowerCalculatorData(): Promise<PowerCalculatorData | undefined>;\n  createPowerCalculatorData(data: InsertPowerCalculatorData): Promise<PowerCalculatorData>;\n  updatePowerCalculatorData(id: string, data: Partial<InsertPowerCalculatorData>): Promise<PowerCalculatorData | undefined>;\n\n  // Translation management\n  getTranslations(language?: string, section?: string): Promise<Translation[]>;\n  getTranslationById(id: string): Promise<Translation | undefined>;\n  createTranslation(translation: InsertTranslation): Promise<Translation>;\n  updateTranslation(id: string, translation: Partial<InsertTranslation>): Promise<Translation | undefined>;\n  deleteTranslation(id: string): Promise<void>;\n\n  // Language management\n  getLanguages(): Promise<Language[]>;\n  getLanguageByCode(code: string): Promise<Language | undefined>;\n  createLanguage(language: InsertLanguage): Promise<Language>;\n  updateLanguage(code: string, language: Partial<InsertLanguage>): Promise<Language | undefined>;\n  deleteLanguage(code: string): Promise<void>;\n  \n  // Site identity operations\n  getSiteIdentity(): Promise<SiteIdentity | undefined>;\n  upsertSiteIdentity(identity: InsertSiteIdentity): Promise<SiteIdentity>;\n\n  // Analytics methods\n  trackPageView(data: InsertPageView): Promise<PageView>;\n  trackClick(data: InsertClickEvent): Promise<ClickEvent>;\n  trackVehicleSelection(data: InsertVehicleSelection): Promise<VehicleSelection>;\n  upsertGeoLocation(data: InsertGeoLocation): Promise<GeoLocation>;\n  \n  // Analytics query methods\n  getPageViewStats(startDate?: Date, endDate?: Date): Promise<any[]>;\n  getClickStats(startDate?: Date, endDate?: Date): Promise<any[]>;\n  getVehicleSelectionStats(startDate?: Date, endDate?: Date): Promise<any[]>;\n  getGeoLocationStats(startDate?: Date, endDate?: Date): Promise<any[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Vehicle operations\n  async getVehiclesByType(vehicleType: string): Promise<Vehicle[]> {\n    const result = await db.select().from(vehicles).where(eq(vehicles.vehicleType, vehicleType));\n    return result;\n  }\n\n  async getBrandsByType(vehicleType: string): Promise<string[]> {\n    const result = await db\n      .selectDistinct({ brand: vehicles.brand })\n      .from(vehicles)\n      .where(eq(vehicles.vehicleType, vehicleType));\n    return result.map(r => r.brand).sort();\n  }\n\n  async getModelsByBrand(brand: string, vehicleType: string): Promise<string[]> {\n    const result = await db\n      .selectDistinct({ model: vehicles.model })\n      .from(vehicles)\n      .where(and(eq(vehicles.brand, brand), eq(vehicles.vehicleType, vehicleType)));\n    return result.map(r => r.model).sort();\n  }\n\n  async getGenerationsByModel(brand: string, model: string, vehicleType: string): Promise<string[]> {\n    const result = await db\n      .selectDistinct({ generation: vehicles.generation })\n      .from(vehicles)\n      .where(and(\n        eq(vehicles.brand, brand),\n        eq(vehicles.model, model),\n        eq(vehicles.vehicleType, vehicleType)\n      ));\n    return result.map(r => r.generation).sort();\n  }\n\n  async getEnginesByGeneration(brand: string, model: string, generation: string, vehicleType: string): Promise<string[]> {\n    const result = await db\n      .selectDistinct({ engine: vehicles.engine })\n      .from(vehicles)\n      .where(and(\n        eq(vehicles.brand, brand),\n        eq(vehicles.model, model),\n        eq(vehicles.generation, generation),\n        eq(vehicles.vehicleType, vehicleType)\n      ));\n    return result.map(r => r.engine).sort();\n  }\n\n  async getVariantsByEngine(brand: string, model: string, generation: string, engine: string, vehicleType: string): Promise<Vehicle[]> {\n    const result = await db\n      .select()\n      .from(vehicles)\n      .where(and(\n        eq(vehicles.brand, brand),\n        eq(vehicles.model, model),\n        eq(vehicles.generation, generation),\n        eq(vehicles.engine, engine),\n        eq(vehicles.vehicleType, vehicleType)\n      ));\n    return result;\n  }\n\n  async getVehicle(brand: string, model: string, generation: string, engine: string, variant: string, vehicleType: string): Promise<Vehicle | undefined> {\n    const [result] = await db\n      .select()\n      .from(vehicles)\n      .where(and(\n        eq(vehicles.brand, brand),\n        eq(vehicles.model, model),\n        eq(vehicles.generation, generation),\n        eq(vehicles.engine, engine),\n        eq(vehicles.variant, variant),\n        eq(vehicles.vehicleType, vehicleType)\n      ));\n    return result;\n  }\n\n  async getAllVehicles(): Promise<Vehicle[]> {\n    return await db.select().from(vehicles);\n  }\n\n  async createVehicle(vehicle: InsertVehicle): Promise<Vehicle> {\n    const [result] = await db\n      .insert(vehicles)\n      .values(vehicle)\n      .returning();\n    return result;\n  }\n\n  async updateVehicle(id: string, vehicle: Partial<InsertVehicle>): Promise<Vehicle | undefined> {\n    const [result] = await db\n      .update(vehicles)\n      .set(vehicle)\n      .where(eq(vehicles.id, id))\n      .returning();\n    return result;\n  }\n\n  async deleteVehicle(id: string): Promise<void> {\n    await db.delete(vehicles).where(eq(vehicles.id, id));\n  }\n\n  async createContactRequest(request: InsertContactRequest): Promise<ContactRequest> {\n    const [result] = await db\n      .insert(contactRequests)\n      .values(request)\n      .returning();\n    return result;\n  }\n\n  // Admin operations\n  async createAdminUser(user: InsertAdminUser): Promise<AdminUser> {\n    const hashedPassword = await bcrypt.hash(user.password, 10);\n    const [result] = await db\n      .insert(adminUsers)\n      .values({ ...user, password: hashedPassword })\n      .returning();\n    return result;\n  }\n\n  async getAdminUserByUsername(username: string): Promise<AdminUser | undefined> {\n    const [result] = await db\n      .select()\n      .from(adminUsers)\n      .where(and(eq(adminUsers.username, username), eq(adminUsers.isActive, true)));\n    return result;\n  }\n\n  // Content management operations\n  async getAllPageContent(): Promise<PageContent[]> {\n    return await db.select().from(pageContent).where(eq(pageContent.isActive, true));\n  }\n\n  async getPageContent(pageName: string): Promise<PageContent | undefined> {\n    const [result] = await db\n      .select()\n      .from(pageContent)\n      .where(and(eq(pageContent.pageName, pageName), eq(pageContent.isActive, true)));\n    return result;\n  }\n\n  async upsertPageContent(content: InsertPageContent): Promise<PageContent> {\n    const [result] = await db\n      .insert(pageContent)\n      .values(content)\n      .onConflictDoUpdate({\n        target: pageContent.pageName,\n        set: { ...content, updatedAt: new Date() }\n      })\n      .returning();\n    return result;\n  }\n\n  async getAllNavigationItems(): Promise<NavigationItem[]> {\n    return await db\n      .select()\n      .from(navigationItems)\n      .where(eq(navigationItems.isActive, true))\n      .orderBy(navigationItems.order);\n  }\n\n  async createNavigationItem(item: InsertNavigationItem): Promise<NavigationItem> {\n    const [result] = await db\n      .insert(navigationItems)\n      .values(item)\n      .returning();\n    return result;\n  }\n\n  async updateNavigationItem(id: string, item: Partial<InsertNavigationItem>): Promise<NavigationItem> {\n    const [result] = await db\n      .update(navigationItems)\n      .set({ ...item, updatedAt: new Date() })\n      .where(eq(navigationItems.id, id))\n      .returning();\n    return result;\n  }\n\n  async deleteNavigationItem(id: string): Promise<void> {\n    await db\n      .update(navigationItems)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(navigationItems.id, id));\n  }\n\n  async getAllServiceItems(): Promise<ServiceItem[]> {\n    return await db\n      .select()\n      .from(serviceItems)\n      .where(eq(serviceItems.isActive, true))\n      .orderBy(serviceItems.order);\n  }\n\n  async createServiceItem(item: InsertServiceItem): Promise<ServiceItem> {\n    const [result] = await db\n      .insert(serviceItems)\n      .values(item)\n      .returning();\n    return result;\n  }\n\n  async updateServiceItem(id: string, item: Partial<InsertServiceItem>): Promise<ServiceItem> {\n    const [result] = await db\n      .update(serviceItems)\n      .set({ ...item, updatedAt: new Date() })\n      .where(eq(serviceItems.id, id))\n      .returning();\n    return result;\n  }\n\n  async deleteServiceItem(id: string): Promise<void> {\n    await db\n      .update(serviceItems)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(serviceItems.id, id));\n  }\n\n  async getAllContactInfo(): Promise<ContactInfo[]> {\n    return await db\n      .select()\n      .from(contactInfo)\n      .where(eq(contactInfo.isActive, true))\n      .orderBy(contactInfo.order);\n  }\n\n  async createContactInfo(info: InsertContactInfo): Promise<ContactInfo> {\n    const [result] = await db\n      .insert(contactInfo)\n      .values(info)\n      .returning();\n    return result;\n  }\n\n  async updateContactInfo(id: string, info: Partial<InsertContactInfo>): Promise<ContactInfo> {\n    const [result] = await db\n      .update(contactInfo)\n      .set({ ...info, updatedAt: new Date() })\n      .where(eq(contactInfo.id, id))\n      .returning();\n    return result;\n  }\n\n  async deleteContactInfo(id: string): Promise<void> {\n    await db\n      .update(contactInfo)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(contactInfo.id, id));\n  }\n\n  // Power calculator data operations\n  async getAllPowerCalculatorData(): Promise<PowerCalculatorData[]> {\n    const result = await db.select().from(powerCalculatorData);\n    return result;\n  }\n\n  async getPowerCalculatorData(): Promise<PowerCalculatorData | undefined> {\n    const result = await db.select().from(powerCalculatorData).limit(1);\n    return result[0];\n  }\n\n  async createPowerCalculatorData(data: InsertPowerCalculatorData): Promise<PowerCalculatorData> {\n    const [result] = await db.insert(powerCalculatorData).values(data).returning();\n    return result;\n  }\n\n  async updatePowerCalculatorData(id: string, data: Partial<InsertPowerCalculatorData>): Promise<PowerCalculatorData | undefined> {\n    const [result] = await db.update(powerCalculatorData)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(powerCalculatorData.id, id))\n      .returning();\n    return result;\n  }\n\n  // Translation management\n  async getTranslations(language?: string, section?: string): Promise<Translation[]> {\n    let conditions = [];\n    \n    if (language) {\n      conditions.push(eq(translations.language, language));\n    }\n    \n    if (section) {\n      conditions.push(eq(translations.section, section));\n    }\n    \n    let query = db.select().from(translations);\n    \n    if (conditions.length > 0) {\n      query = query.where(and(...conditions));\n    }\n    \n    return await query.orderBy(translations.section, translations.key);\n  }\n\n  async getTranslationById(id: string): Promise<Translation | undefined> {\n    const [result] = await db\n      .select()\n      .from(translations)\n      .where(eq(translations.id, id))\n      .limit(1);\n    return result;\n  }\n\n  async createTranslation(translation: InsertTranslation): Promise<Translation> {\n    const [result] = await db\n      .insert(translations)\n      .values(translation)\n      .returning();\n    return result;\n  }\n\n  async updateTranslation(id: string, translation: Partial<InsertTranslation>): Promise<Translation | undefined> {\n    const [result] = await db\n      .update(translations)\n      .set({ ...translation, updatedAt: new Date() })\n      .where(eq(translations.id, id))\n      .returning();\n    return result;\n  }\n\n  async deleteTranslation(id: string): Promise<void> {\n    await db\n      .delete(translations)\n      .where(eq(translations.id, id));\n  }\n\n  // Language management\n  async getLanguages(): Promise<Language[]> {\n    return await db\n      .select()\n      .from(languages)\n      .orderBy(languages.name);\n  }\n\n  async getLanguageByCode(code: string): Promise<Language | undefined> {\n    const [result] = await db\n      .select()\n      .from(languages)\n      .where(eq(languages.code, code))\n      .limit(1);\n    return result;\n  }\n\n  async createLanguage(language: InsertLanguage): Promise<Language> {\n    const [result] = await db\n      .insert(languages)\n      .values(language)\n      .returning();\n    return result;\n  }\n\n  async updateLanguage(code: string, language: Partial<InsertLanguage>): Promise<Language | undefined> {\n    const [result] = await db\n      .update(languages)\n      .set({ ...language, updatedAt: new Date() })\n      .where(eq(languages.code, code))\n      .returning();\n    return result;\n  }\n\n  async deleteLanguage(code: string): Promise<void> {\n    await db\n      .delete(languages)\n      .where(eq(languages.code, code));\n  }\n\n  // Site identity operations\n  async getSiteIdentity(): Promise<SiteIdentity | undefined> {\n    const [identity] = await db.select().from(siteIdentity).limit(1);\n    return identity;\n  }\n\n  async upsertSiteIdentity(identityData: InsertSiteIdentity): Promise<SiteIdentity> {\n    // Check if identity exists\n    const existing = await this.getSiteIdentity();\n    \n    if (existing) {\n      // Update existing\n      const [updated] = await db\n        .update(siteIdentity)\n        .set({ ...identityData, updatedAt: new Date() })\n        .where(eq(siteIdentity.id, existing.id))\n        .returning();\n      return updated;\n    } else {\n      // Create new\n      const [created] = await db\n        .insert(siteIdentity)\n        .values(identityData)\n        .returning();\n      return created;\n    }\n  }\n\n  // Analytics methods\n  async trackPageView(data: InsertPageView): Promise<PageView> {\n    const [result] = await db.insert(pageViews).values(data).returning();\n    return result;\n  }\n\n  async trackClick(data: InsertClickEvent): Promise<ClickEvent> {\n    const [result] = await db.insert(clickEvents).values(data).returning();\n    return result;\n  }\n\n  async trackVehicleSelection(data: InsertVehicleSelection): Promise<VehicleSelection> {\n    const [result] = await db.insert(vehicleSelections).values(data).returning();\n    return result;\n  }\n\n  async upsertGeoLocation(data: InsertGeoLocation): Promise<GeoLocation> {\n    // Try to find existing geolocation for this IP\n    const [existing] = await db\n      .select()\n      .from(geoLocations)\n      .where(eq(geoLocations.ipAddress, data.ipAddress))\n      .limit(1);\n\n    if (existing) {\n      // Update existing record with latest data\n      const [updated] = await db\n        .update(geoLocations)\n        .set({ ...data, lastSeen: new Date() })\n        .where(eq(geoLocations.ipAddress, data.ipAddress))\n        .returning();\n      return updated;\n    } else {\n      // Create new record\n      const [created] = await db\n        .insert(geoLocations)\n        .values(data)\n        .returning();\n      return created;\n    }\n  }\n\n  // Analytics query methods\n  async getPageViewStats(startDate?: Date, endDate?: Date): Promise<any[]> {\n    let query = db\n      .select({\n        pageName: pageViews.pageName,\n        views: sql<number>`count(*)`,\n        uniqueViews: sql<number>`count(distinct ${pageViews.sessionId})`,\n        date: sql<string>`date(${pageViews.timestamp})`,\n      })\n      .from(pageViews);\n\n    if (startDate || endDate) {\n      const conditions = [];\n      if (startDate) conditions.push(sql`${pageViews.timestamp} >= ${startDate}`);\n      if (endDate) conditions.push(sql`${pageViews.timestamp} <= ${endDate}`);\n      query = query.where(and(...conditions));\n    }\n\n    return await query\n      .groupBy(pageViews.pageName, sql`date(${pageViews.timestamp})`)\n      .orderBy(sql`date(${pageViews.timestamp})`, pageViews.pageName);\n  }\n\n  async getClickStats(startDate?: Date, endDate?: Date): Promise<any[]> {\n    let query = db\n      .select({\n        element: clickEvents.element,\n        clicks: sql<number>`count(*)`,\n        pageName: clickEvents.pageName,\n        date: sql<string>`date(${clickEvents.timestamp})`,\n      })\n      .from(clickEvents);\n\n    if (startDate || endDate) {\n      const conditions = [];\n      if (startDate) conditions.push(sql`${clickEvents.timestamp} >= ${startDate}`);\n      if (endDate) conditions.push(sql`${clickEvents.timestamp} <= ${endDate}`);\n      query = query.where(and(...conditions));\n    }\n\n    return await query\n      .groupBy(clickEvents.element, clickEvents.pageName, sql`date(${clickEvents.timestamp})`)\n      .orderBy(sql`date(${clickEvents.timestamp})`, clickEvents.element);\n  }\n\n  async getVehicleSelectionStats(startDate?: Date, endDate?: Date): Promise<any[]> {\n    let query = db\n      .select({\n        vehicleType: vehicleSelections.vehicleType,\n        brand: vehicleSelections.brand,\n        model: vehicleSelections.model,\n        selections: sql<number>`count(*)`,\n        date: sql<string>`date(${vehicleSelections.timestamp})`,\n      })\n      .from(vehicleSelections);\n\n    if (startDate || endDate) {\n      const conditions = [];\n      if (startDate) conditions.push(sql`${vehicleSelections.timestamp} >= ${startDate}`);\n      if (endDate) conditions.push(sql`${vehicleSelections.timestamp} <= ${endDate}`);\n      query = query.where(and(...conditions));\n    }\n\n    return await query\n      .groupBy(\n        vehicleSelections.vehicleType,\n        vehicleSelections.brand,\n        vehicleSelections.model,\n        sql`date(${vehicleSelections.timestamp})`\n      )\n      .orderBy(sql`count(*) desc`, sql`date(${vehicleSelections.timestamp})`);\n  }\n\n  async getGeoLocationStats(startDate?: Date, endDate?: Date): Promise<any[]> {\n    let query = db\n      .select({\n        country: geoLocations.country,\n        city: geoLocations.city,\n        visitors: sql<number>`count(*)`,\n        date: sql<string>`date(${geoLocations.lastSeen})`,\n      })\n      .from(geoLocations);\n\n    if (startDate || endDate) {\n      const conditions = [];\n      if (startDate) conditions.push(sql`${geoLocations.lastSeen} >= ${startDate}`);\n      if (endDate) conditions.push(sql`${geoLocations.lastSeen} <= ${endDate}`);\n      query = query.where(and(...conditions));\n    }\n\n    return await query\n      .groupBy(geoLocations.country, geoLocations.city, sql`date(${geoLocations.lastSeen})`)\n      .orderBy(sql`count(*) desc`, sql`date(${geoLocations.lastSeen})`);\n  }\n}\n\nexport const storage = new DatabaseStorage();\n\n// Initialize database with sample data if empty\nasync function initializeDatabase() {\n  try {\n    // Initialize comprehensive vehicle database if empty\n    const { populateVehicleDatabase } = await import('./populate-vehicles');\n    await populateVehicleDatabase();\n    \n    // Create default admin user if none exists\n    const existingAdmin = await db.select().from(adminUsers).limit(1);\n    if (existingAdmin.length === 0) {\n      const hashedPassword = await bcrypt.hash('admin123', 10);\n      await db.insert(adminUsers).values({\n        username: 'admin',\n        password: hashedPassword\n      });\n      console.log('Default admin user created (username: admin, password: admin123)');\n    }\n\n  } catch (error) {\n    console.error('Failed to initialize database:', error);\n  }\n}\n\n// Call initialization\ninitializeDatabase();","size_bytes":22527},"server/storage_backup.ts":{"content":"import { \n  type Vehicle, \n  type InsertVehicle, \n  type ContactRequest, \n  type InsertContactRequest,\n  type AdminUser,\n  type InsertAdminUser,\n  type PageContent,\n  type InsertPageContent,\n  type NavigationItem,\n  type InsertNavigationItem,\n  type ServiceItem,\n  type InsertServiceItem,\n  type ContactInfo,\n  type InsertContactInfo,\n  type Translation,\n  type InsertTranslation,\n  type Language,\n  type InsertLanguage,\n  vehicles,\n  contactRequests,\n  adminUsers,\n  pageContent,\n  navigationItems,\n  serviceItems,\n  contactInfo,\n  translations,\n  languages\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and } from \"drizzle-orm\";\nimport bcrypt from \"bcrypt\";\n\n\nexport interface IStorage {\n  // Vehicle operations\n  getVehiclesByType(vehicleType: string): Promise<Vehicle[]>;\n  getBrandsByType(vehicleType: string): Promise<string[]>;\n  getModelsByBrand(brand: string, vehicleType: string): Promise<string[]>;\n  getGenerationsByModel(brand: string, model: string, vehicleType: string): Promise<string[]>;\n  getEnginesByGeneration(brand: string, model: string, generation: string, vehicleType: string): Promise<string[]>;\n  getVariantsByEngine(brand: string, model: string, generation: string, engine: string, vehicleType: string): Promise<Vehicle[]>;\n  getVehicle(brand: string, model: string, generation: string, engine: string, variant: string, vehicleType: string): Promise<Vehicle | undefined>;\n  getAllVehicles(): Promise<Vehicle[]>;\n  createVehicle(vehicle: InsertVehicle): Promise<Vehicle>;\n  updateVehicle(id: string, vehicle: Partial<InsertVehicle>): Promise<Vehicle | undefined>;\n  deleteVehicle(id: string): Promise<void>;\n  createContactRequest(request: InsertContactRequest): Promise<ContactRequest>;\n  \n  // Admin operations\n  createAdminUser(user: InsertAdminUser): Promise<AdminUser>;\n  getAdminUserByUsername(username: string): Promise<AdminUser | undefined>;\n  \n  // Content management operations\n  getAllPageContent(): Promise<PageContent[]>;\n  getPageContent(pageName: string): Promise<PageContent | undefined>;\n  upsertPageContent(content: InsertPageContent): Promise<PageContent>;\n  \n  getAllNavigationItems(): Promise<NavigationItem[]>;\n  createNavigationItem(item: InsertNavigationItem): Promise<NavigationItem>;\n  updateNavigationItem(id: string, item: Partial<InsertNavigationItem>): Promise<NavigationItem>;\n  deleteNavigationItem(id: string): Promise<void>;\n  \n  getAllServiceItems(): Promise<ServiceItem[]>;\n  createServiceItem(item: InsertServiceItem): Promise<ServiceItem>;\n  updateServiceItem(id: string, item: Partial<InsertServiceItem>): Promise<ServiceItem>;\n  deleteServiceItem(id: string): Promise<void>;\n  \n  getAllContactInfo(): Promise<ContactInfo[]>;\n  createContactInfo(info: InsertContactInfo): Promise<ContactInfo>;\n  updateContactInfo(id: string, info: Partial<InsertContactInfo>): Promise<ContactInfo>;\n  deleteContactInfo(id: string): Promise<void>;\n\n  // Translation management\n  getTranslations(language?: string, section?: string): Promise<Translation[]>;\n  getTranslationById(id: string): Promise<Translation | undefined>;\n  createTranslation(translation: InsertTranslation): Promise<Translation>;\n  updateTranslation(id: string, translation: Partial<InsertTranslation>): Promise<Translation | undefined>;\n  deleteTranslation(id: string): Promise<void>;\n\n  // Language management\n  getLanguages(): Promise<Language[]>;\n  getLanguageByCode(code: string): Promise<Language | undefined>;\n  createLanguage(language: InsertLanguage): Promise<Language>;\n  updateLanguage(code: string, language: Partial<InsertLanguage>): Promise<Language | undefined>;\n  deleteLanguage(code: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Vehicle operations\n  async getVehiclesByType(vehicleType: string): Promise<Vehicle[]> {\n    const result = await db.select().from(vehicles).where(eq(vehicles.vehicleType, vehicleType));\n    return result;\n  }\n\n  async getBrandsByType(vehicleType: string): Promise<string[]> {\n    const result = await db\n      .selectDistinct({ brand: vehicles.brand })\n      .from(vehicles)\n      .where(eq(vehicles.vehicleType, vehicleType));\n    return result.map(r => r.brand).sort();\n  }\n\n  async getModelsByBrand(brand: string, vehicleType: string): Promise<string[]> {\n    const result = await db\n      .selectDistinct({ model: vehicles.model })\n      .from(vehicles)\n      .where(and(eq(vehicles.brand, brand), eq(vehicles.vehicleType, vehicleType)));\n    return result.map(r => r.model).sort();\n  }\n\n  async getGenerationsByModel(brand: string, model: string, vehicleType: string): Promise<string[]> {\n    const result = await db\n      .selectDistinct({ generation: vehicles.generation })\n      .from(vehicles)\n      .where(and(\n        eq(vehicles.brand, brand),\n        eq(vehicles.model, model),\n        eq(vehicles.vehicleType, vehicleType)\n      ));\n    return result.map(r => r.generation).sort();\n  }\n\n  async getEnginesByGeneration(brand: string, model: string, generation: string, vehicleType: string): Promise<string[]> {\n    const result = await db\n      .selectDistinct({ engine: vehicles.engine })\n      .from(vehicles)\n      .where(and(\n        eq(vehicles.brand, brand),\n        eq(vehicles.model, model),\n        eq(vehicles.generation, generation),\n        eq(vehicles.vehicleType, vehicleType)\n      ));\n    return result.map(r => r.engine).sort();\n  }\n\n  async getVariantsByEngine(brand: string, model: string, generation: string, engine: string, vehicleType: string): Promise<Vehicle[]> {\n    const result = await db\n      .select()\n      .from(vehicles)\n      .where(and(\n        eq(vehicles.brand, brand),\n        eq(vehicles.model, model),\n        eq(vehicles.generation, generation),\n        eq(vehicles.engine, engine),\n        eq(vehicles.vehicleType, vehicleType)\n      ));\n    return result;\n  }\n\n  async getVehicle(brand: string, model: string, generation: string, engine: string, variant: string, vehicleType: string): Promise<Vehicle | undefined> {\n    const [result] = await db\n      .select()\n      .from(vehicles)\n      .where(and(\n        eq(vehicles.brand, brand),\n        eq(vehicles.model, model),\n        eq(vehicles.generation, generation),\n        eq(vehicles.engine, engine),\n        eq(vehicles.variant, variant),\n        eq(vehicles.vehicleType, vehicleType)\n      ));\n    return result;\n  }\n\n  async getAllVehicles(): Promise<Vehicle[]> {\n    return await db.select().from(vehicles);\n  }\n\n  async createVehicle(vehicle: InsertVehicle): Promise<Vehicle> {\n    const [result] = await db\n      .insert(vehicles)\n      .values(vehicle)\n      .returning();\n    return result;\n  }\n\n  async updateVehicle(id: string, vehicle: Partial<InsertVehicle>): Promise<Vehicle | undefined> {\n    const [result] = await db\n      .update(vehicles)\n      .set(vehicle)\n      .where(eq(vehicles.id, id))\n      .returning();\n    return result;\n  }\n\n  async deleteVehicle(id: string): Promise<void> {\n    await db.delete(vehicles).where(eq(vehicles.id, id));\n  }\n\n  async createContactRequest(request: InsertContactRequest): Promise<ContactRequest> {\n    const [result] = await db\n      .insert(contactRequests)\n      .values(request)\n      .returning();\n    return result;\n  }\n\n  // Admin operations\n  async createAdminUser(user: InsertAdminUser): Promise<AdminUser> {\n    const hashedPassword = await bcrypt.hash(user.password, 10);\n    const [result] = await db\n      .insert(adminUsers)\n      .values({ ...user, password: hashedPassword })\n      .returning();\n    return result;\n  }\n\n  async getAdminUserByUsername(username: string): Promise<AdminUser | undefined> {\n    const [result] = await db\n      .select()\n      .from(adminUsers)\n      .where(and(eq(adminUsers.username, username), eq(adminUsers.isActive, true)));\n    return result;\n  }\n\n  // Content management operations\n  async getAllPageContent(): Promise<PageContent[]> {\n    return await db.select().from(pageContent).where(eq(pageContent.isActive, true));\n  }\n\n  async getPageContent(pageName: string): Promise<PageContent | undefined> {\n    const [result] = await db\n      .select()\n      .from(pageContent)\n      .where(and(eq(pageContent.pageName, pageName), eq(pageContent.isActive, true)));\n    return result;\n  }\n\n  async upsertPageContent(content: InsertPageContent): Promise<PageContent> {\n    const [result] = await db\n      .insert(pageContent)\n      .values(content)\n      .onConflictDoUpdate({\n        target: pageContent.pageName,\n        set: { ...content, updatedAt: new Date() }\n      })\n      .returning();\n    return result;\n  }\n\n  async getAllNavigationItems(): Promise<NavigationItem[]> {\n    return await db\n      .select()\n      .from(navigationItems)\n      .where(eq(navigationItems.isActive, true))\n      .orderBy(navigationItems.order);\n  }\n\n  async createNavigationItem(item: InsertNavigationItem): Promise<NavigationItem> {\n    const [result] = await db\n      .insert(navigationItems)\n      .values(item)\n      .returning();\n    return result;\n  }\n\n  async updateNavigationItem(id: string, item: Partial<InsertNavigationItem>): Promise<NavigationItem> {\n    const [result] = await db\n      .update(navigationItems)\n      .set({ ...item, updatedAt: new Date() })\n      .where(eq(navigationItems.id, id))\n      .returning();\n    return result;\n  }\n\n  async deleteNavigationItem(id: string): Promise<void> {\n    await db\n      .update(navigationItems)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(navigationItems.id, id));\n  }\n\n  async getAllServiceItems(): Promise<ServiceItem[]> {\n    return await db\n      .select()\n      .from(serviceItems)\n      .where(eq(serviceItems.isActive, true))\n      .orderBy(serviceItems.order);\n  }\n\n  async createServiceItem(item: InsertServiceItem): Promise<ServiceItem> {\n    const [result] = await db\n      .insert(serviceItems)\n      .values(item)\n      .returning();\n    return result;\n  }\n\n  async updateServiceItem(id: string, item: Partial<InsertServiceItem>): Promise<ServiceItem> {\n    const [result] = await db\n      .update(serviceItems)\n      .set({ ...item, updatedAt: new Date() })\n      .where(eq(serviceItems.id, id))\n      .returning();\n    return result;\n  }\n\n  async deleteServiceItem(id: string): Promise<void> {\n    await db\n      .update(serviceItems)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(serviceItems.id, id));\n  }\n\n  async getAllContactInfo(): Promise<ContactInfo[]> {\n    return await db\n      .select()\n      .from(contactInfo)\n      .where(eq(contactInfo.isActive, true))\n      .orderBy(contactInfo.order);\n  }\n\n  async createContactInfo(info: InsertContactInfo): Promise<ContactInfo> {\n    const [result] = await db\n      .insert(contactInfo)\n      .values(info)\n      .returning();\n    return result;\n  }\n\n  async updateContactInfo(id: string, info: Partial<InsertContactInfo>): Promise<ContactInfo> {\n    const [result] = await db\n      .update(contactInfo)\n      .set({ ...info, updatedAt: new Date() })\n      .where(eq(contactInfo.id, id))\n      .returning();\n    return result;\n  }\n\n  async deleteContactInfo(id: string): Promise<void> {\n    await db\n      .update(contactInfo)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(contactInfo.id, id));\n  }\n\n  // Translation management\n  async getTranslations(language?: string, section?: string): Promise<Translation[]> {\n    let conditions = [];\n    \n    if (language) {\n      conditions.push(eq(translations.language, language));\n    }\n    \n    if (section) {\n      conditions.push(eq(translations.section, section));\n    }\n    \n    let query = db.select().from(translations);\n    \n    if (conditions.length > 0) {\n      query = query.where(and(...conditions));\n    }\n    \n    return await query.orderBy(translations.section, translations.key);\n  }\n\n  async getTranslationById(id: string): Promise<Translation | undefined> {\n    const [result] = await db\n      .select()\n      .from(translations)\n      .where(eq(translations.id, id))\n      .limit(1);\n    return result;\n  }\n\n  async createTranslation(translation: InsertTranslation): Promise<Translation> {\n    const [result] = await db\n      .insert(translations)\n      .values(translation)\n      .returning();\n    return result;\n  }\n\n  async updateTranslation(id: string, translation: Partial<InsertTranslation>): Promise<Translation | undefined> {\n    const [result] = await db\n      .update(translations)\n      .set({ ...translation, updatedAt: new Date() })\n      .where(eq(translations.id, id))\n      .returning();\n    return result;\n  }\n\n  async deleteTranslation(id: string): Promise<void> {\n    await db\n      .delete(translations)\n      .where(eq(translations.id, id));\n  }\n\n  // Language management\n  async getLanguages(): Promise<Language[]> {\n    return await db\n      .select()\n      .from(languages)\n      .orderBy(languages.name);\n  }\n\n  async getLanguageByCode(code: string): Promise<Language | undefined> {\n    const [result] = await db\n      .select()\n      .from(languages)\n      .where(eq(languages.code, code))\n      .limit(1);\n    return result;\n  }\n\n  async createLanguage(language: InsertLanguage): Promise<Language> {\n    const [result] = await db\n      .insert(languages)\n      .values(language)\n      .returning();\n    return result;\n  }\n\n  async updateLanguage(code: string, language: Partial<InsertLanguage>): Promise<Language | undefined> {\n    const [result] = await db\n      .update(languages)\n      .set({ ...language, updatedAt: new Date() })\n      .where(eq(languages.code, code))\n      .returning();\n    return result;\n  }\n\n  async deleteLanguage(code: string): Promise<void> {\n    await db\n      .delete(languages)\n      .where(eq(languages.code, code));\n  }\n}\n\n// Initialize database with sample data if empty\nasync function initializeDatabase() {\n  try {\n    // Check if we have any vehicles in the database\n    const existingVehicles = await db.select().from(vehicles).limit(1);\n    \n    if (existingVehicles.length === 0) {\n      // Sample vehicle data with proper hierarchy for initialization\n      const carData: InsertVehicle[] = [\n        // Audi A4 B8 Generation\n        { brand: \"Audi\", model: \"A4\", generation: \"B8 (2008-2015)\", engine: \"2.0 TDI\", variant: \"150hp\", vehicleType: \"car\", originalPower: 150, originalTorque: 320, stage1Power: 185, stage1Torque: 385, stage2Power: 210, stage2Torque: 420 },\n        { brand: \"Audi\", model: \"A4\", generation: \"B8 (2008-2015)\", engine: \"3.0 TDI\", variant: \"272hp\", vehicleType: \"car\", originalPower: 272, originalTorque: 600, stage1Power: 320, stage1Torque: 720, stage2Power: 360, stage2Torque: 800 },\n        // BMW 3 Series F30\n        { brand: \"BMW\", model: \"3 Series\", generation: \"F30 (2012-2018)\", engine: \"2.0d\", variant: \"190hp\", vehicleType: \"car\", originalPower: 190, originalTorque: 400, stage1Power: 235, stage1Torque: 470, stage2Power: 270, stage2Torque: 510 },\n        // Mercedes C-Class W204\n        { brand: \"Mercedes-Benz\", model: \"C-Class\", generation: \"W204 (2007-2014)\", engine: \"2.2 CDI\", variant: \"194hp\", vehicleType: \"car\", originalPower: 194, originalTorque: 400, stage1Power: 240, stage1Torque: 480, stage2Power: 275, stage2Torque: 520 }\n      ];\n      \n      await db.insert(vehicles).values(carData);\n      console.log('Database initialized with sample vehicle data');\n    }\n    \n    // Create default admin user if none exists\n    const existingAdmin = await db.select().from(adminUsers).limit(1);\n    if (existingAdmin.length === 0) {\n      const hashedPassword = await bcrypt.hash('admin123', 10);\n      await db.insert(adminUsers).values({\n        username: 'admin',\n        password: hashedPassword\n      });\n      console.log('Default admin user created (username: admin, password: admin123)');\n    }\n\n  } catch (error) {\n    console.error('Failed to initialize database:', error);\n  }\n}\n\nexport const storage = new DatabaseStorage();\n\n// Initialize database with sample data if empty\ninitializeDatabase();\n\nasync function initializeDatabase() {\n  try {\n    // Check if we have any vehicles in the database\n    const existingVehicles = await db.select().from(vehicles).limit(1);\n    \n    if (existingVehicles.length === 0) {\n      console.log('Initializing database with sample data...');\n      \n      await db.insert(vehicles).values(carData);\n      console.log('Database initialized with sample vehicle data');\n    }\n    \n    // Create default admin user if none exists\n    const existingAdmin = await db.select().from(adminUsers).limit(1);\n    if (existingAdmin.length === 0) {\n      const hashedPassword = await bcrypt.hash('admin123', 10);\n      await db.insert(adminUsers).values({\n        username: 'admin',\n        password: hashedPassword\n      });\n      console.log('Default admin user created (username: admin, password: admin123)');\n    }\n\n    // Initialize default page content from existing website\n    const existingPages = await db.select().from(pageContent).limit(1);\n    if (existingPages.length === 0) {\n      const defaultPages: InsertPageContent[] = [\n        {\n          pageName: 'home',\n          title: 'ChipTuning PRO - Professional ECU Tuning Services',\n          subtitle: 'Professional ECU Tuning & Performance Enhancement',\n          content: {\n            hero: {\n              title: 'ChipTuning PRO',\n              subtitle: 'Professional ECU Tuning & Performance Enhancement',\n              description: 'Unlock your vehicle\\'s true potential with our expert chiptuning services. We provide Stage 1 & Stage 2 tuning, DPF/EGR removal, and professional ZBOX devices for maximum performance gains.',\n              buttons: [\n                { text: 'Check Vehicle Power', href: '#power-checker', type: 'primary' },\n                { text: 'Our Services', href: '#services', type: 'secondary' }\n              ]\n            },\n            stats: [\n              { number: '500+', label: 'Vehicles Tuned' },\n              { number: '15+', label: 'Years Experience' },\n              { number: '100%', label: 'Satisfaction Rate' }\n            ]\n          },\n          isActive: true\n        },\n        {\n          pageName: 'services',\n          title: 'Professional Tuning Services - ChipTuning PRO',\n          subtitle: 'Comprehensive ECU tuning services for all vehicle types',\n          content: {\n            intro: {\n              title: 'Our Professional Services',\n              description: 'Comprehensive ECU tuning services including Stage 1/2 chiptuning, DPF/EGR removal, and ZBOX devices.'\n            },\n            services: [\n              {\n                title: 'Stage 1 Chiptuning',\n                icon: '🚗',\n                description: 'Optimize your engine performance with our Stage 1 ECU remapping.',\n                benefits: ['+25-35% Power', '+30-40% Torque', 'Better Fuel Economy'],\n                price: 'From €299'\n              },\n              {\n                title: 'Stage 2 Chiptuning',\n                icon: '⚡',\n                description: 'Maximum performance gains with Stage 2 tuning.',\n                benefits: ['+40-50% Power', '+50-60% Torque', 'Track-Ready Performance'],\n                price: 'From €499'\n              }\n            ]\n          },\n          isActive: true\n        },\n        {\n          pageName: 'about',\n          title: 'About ChipTuning PRO - Expert ECU Tuning Services',\n          subtitle: '15+ years of professional ECU tuning experience',\n          content: {\n            intro: {\n              title: 'About ChipTuning PRO',\n              description: 'With over 15 years of experience in automotive performance tuning, ChipTuning PRO has established itself as a leading provider of professional ECU remapping and performance enhancement services.'\n            },\n            features: [\n              {\n                title: 'Professional Equipment',\n                description: 'State-of-the-art diagnostic tools and tuning software'\n              },\n              {\n                title: 'Certified Technicians',\n                description: 'Experienced professionals with industry certifications'\n              },\n              {\n                title: 'Quality Guarantee',\n                description: 'All work backed by our comprehensive warranty'\n              },\n              {\n                title: 'Customer Support',\n                description: 'Ongoing support and maintenance services'\n              }\n            ]\n          },\n          isActive: true\n        }\n      ];\n      \n      await db.insert(pageContent).values(defaultPages);\n      console.log('Default page content initialized');\n    }\n\n    // Initialize default navigation items\n    const existingNav = await db.select().from(navigationItems).limit(1);\n    if (existingNav.length === 0) {\n      const defaultNav: InsertNavigationItem[] = [\n        { label: 'Home', href: '/', order: 1, isActive: true },\n        { label: 'Services', href: '#services', order: 2, isActive: true },\n        { label: 'Power Checker', href: '#power-checker', order: 3, isActive: true },\n        { label: 'ZBOX Device', href: '#zbox', order: 4, isActive: true },\n        { label: 'Contact', href: '#contact', order: 5, isActive: true }\n      ];\n      \n      await db.insert(navigationItems).values(defaultNav);\n      console.log('Default navigation initialized');\n    }\n\n    // Initialize default services\n    const existingServices = await db.select().from(serviceItems).limit(1);\n    if (existingServices.length === 0) {\n      const defaultServices: InsertServiceItem[] = [\n        {\n          title: 'Stage 1 Chiptuning',\n          description: 'Optimize your engine performance with ECU remapping. Increase power and torque while maintaining reliability.',\n          price: 'From €299',\n          features: ['25-35% Power Increase', '30-40% Torque Increase', 'Improved Fuel Economy', 'Maintains Reliability'],\n          icon: '🚗',\n          order: 1,\n          isActive: true\n        },\n        {\n          title: 'Stage 2 Chiptuning',\n          description: 'Maximum performance gains with advanced tuning requiring hardware modifications.',\n          price: 'From €499',\n          features: ['40-50% Power Increase', '50-60% Torque Increase', 'Track-Ready Performance', 'Hardware Upgrades Required'],\n          icon: '⚡',\n          order: 2,\n          isActive: true\n        },\n        {\n          title: 'DPF/EGR Removal',\n          description: 'Remove restrictive emissions components for improved performance and reduced maintenance.',\n          price: 'From €399',\n          features: ['No More DPF Issues', 'Improved Reliability', 'Lower Maintenance Costs', 'Better Performance'],\n          icon: '🔧',\n          order: 3,\n          isActive: true\n        },\n        {\n          title: 'ZBOX Tuning Device',\n          description: 'Professional tuning device with smartphone app control and real-time monitoring.',\n          price: '€899',\n          features: ['Multiple Power Maps', 'Smartphone Control', 'Real-time Monitoring', 'Easy Installation'],\n          icon: '📱',\n          order: 4,\n          isActive: true\n        }\n      ];\n      \n      await db.insert(serviceItems).values(defaultServices);\n      console.log('Default services initialized');\n    }\n\n    // Initialize default contact information\n    const existingContact = await db.select().from(contactInfo).limit(1);\n    if (existingContact.length === 0) {\n      const defaultContact: InsertContactInfo[] = [\n        { \n          type: 'phone', \n          title: 'Main Phone', \n          content: '+371 12345678', \n          icon: '📞', \n          bgColor: 'bg-blue-500', \n          order: 1, \n          isActive: true \n        },\n        { \n          type: 'email', \n          title: 'Email', \n          content: 'info@chiptuningpro.lv', \n          icon: '✉️', \n          bgColor: 'bg-green-500', \n          order: 2, \n          isActive: true \n        },\n        { \n          type: 'address', \n          title: 'Address', \n          content: 'Riga, Latvia\\nProfessional Tuning Center', \n          icon: '📍', \n          bgColor: 'bg-red-500', \n          order: 3, \n          isActive: true \n        },\n        { \n          type: 'hours', \n          title: 'Business Hours', \n          content: 'Monday - Friday: 9:00 - 18:00\\nSaturday: 9:00 - 16:00\\nSunday: Closed', \n          icon: '🕒', \n          bgColor: 'bg-purple-500', \n          order: 4, \n          isActive: true \n        }\n      ];\n      \n      await db.insert(contactInfo).values(defaultContact);\n      console.log('Default contact information initialized');\n    }\n  } catch (error) {\n    console.error('Error initializing database:', error);\n  }\n}\n\n// Initialize the database\ninitializeDatabase();\n\nexport const storage = new DatabaseStorage();\n","size_bytes":24697},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, jsonb, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const vehicles = pgTable(\"vehicles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  brand: text(\"brand\").notNull(),\n  model: text(\"model\").notNull(),\n  generation: text(\"generation\").notNull(),\n  engine: text(\"engine\").notNull(),\n  variant: text(\"variant\").notNull(),\n  vehicleType: text(\"vehicle_type\").notNull(), // 'car', 'truck', 'tractor'\n  originalPower: integer(\"original_power\").notNull(), // HP\n  originalTorque: integer(\"original_torque\").notNull(), // Nm\n  stage1Power: integer(\"stage1_power\").notNull(), // HP\n  stage1Torque: integer(\"stage1_torque\").notNull(), // Nm\n  stage2Power: integer(\"stage2_power\"), // HP (optional)\n  stage2Torque: integer(\"stage2_torque\"), // Nm (optional)\n});\n\nexport const contactRequests = pgTable(\"contact_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\"),\n  vehicleDetails: text(\"vehicle_details\"),\n  serviceRequired: text(\"service_required\").notNull(),\n  additionalInfo: text(\"additional_info\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Admin users table\nexport const adminUsers = pgTable(\"admin_users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: varchar(\"username\").unique().notNull(),\n  password: text(\"password\").notNull(), // hashed password\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Content management tables\nexport const pageContent = pgTable(\"page_content\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  pageName: varchar(\"page_name\").unique().notNull(), // 'home', 'services', etc.\n  title: text(\"title\").notNull(),\n  subtitle: text(\"subtitle\"),\n  content: jsonb(\"content\").notNull(), // flexible content structure\n  isActive: boolean(\"is_active\").default(true),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const navigationItems = pgTable(\"navigation_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  label: text(\"label\").notNull(),\n  href: text(\"href\").notNull(),\n  order: integer(\"order\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const serviceItems = pgTable(\"service_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  icon: text(\"icon\").notNull(),\n  image: text(\"image\"),\n  features: jsonb(\"features\").notNull(), // array of feature strings\n  price: text(\"price\").notNull(),\n  order: integer(\"order\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const contactInfo = pgTable(\"contact_info\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  type: text(\"type\").notNull(), // 'phone', 'email', 'whatsapp', 'address'\n  title: text(\"title\").notNull(),\n  content: text(\"content\").notNull(),\n  subtitle: text(\"subtitle\"),\n  icon: text(\"icon\").notNull(),\n  bgColor: text(\"bg_color\").notNull(),\n  order: integer(\"order\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const powerCalculatorData = pgTable(\"power_calculator_data\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  subtitle: text(\"subtitle\"),\n  description: text(\"description\").notNull(),\n  features: jsonb(\"features\").notNull(), // array of feature strings\n  buttonText: text(\"button_text\").notNull().default(\"Check Your Vehicle Power\"),\n  backgroundImage: text(\"background_image\"),\n  isActive: boolean(\"is_active\").default(true),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertVehicleSchema = createInsertSchema(vehicles).omit({\n  id: true,\n});\n\nexport const insertContactRequestSchema = createInsertSchema(contactRequests).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAdminUserSchema = createInsertSchema(adminUsers).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPageContentSchema = createInsertSchema(pageContent).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertNavigationItemSchema = createInsertSchema(navigationItems).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertServiceItemSchema = createInsertSchema(serviceItems).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertContactInfoSchema = createInsertSchema(contactInfo).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertPowerCalculatorDataSchema = createInsertSchema(powerCalculatorData).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport type InsertVehicle = z.infer<typeof insertVehicleSchema>;\nexport type Vehicle = typeof vehicles.$inferSelect;\nexport type InsertContactRequest = z.infer<typeof insertContactRequestSchema>;\nexport type PowerCalculatorData = typeof powerCalculatorData.$inferSelect;\nexport type InsertPowerCalculatorData = z.infer<typeof insertPowerCalculatorDataSchema>;\nexport type ContactRequest = typeof contactRequests.$inferSelect;\n\n// Site Identity table for branding customization\nexport const siteIdentity = pgTable(\"site_identity\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  logoUrl: varchar(\"logo_url\"),\n  faviconUrl: varchar(\"favicon_url\"),\n  heroImageUrl: varchar(\"hero_image_url\"),\n  primaryColor: varchar(\"primary_color\").default(\"#3b82f6\"),\n  secondaryColor: varchar(\"secondary_color\").default(\"#1e40af\"),\n  accentColor: varchar(\"accent_color\").default(\"#f59e0b\"),\n  backgroundColor: varchar(\"background_color\").default(\"#000000\"),\n  textColor: varchar(\"text_color\").default(\"#ffffff\"),\n  companyName: varchar(\"company_name\").default(\"ChipTuning PRO\"),\n  tagline: varchar(\"tagline\"),\n  heroTitle: varchar(\"hero_title\"),\n  heroSubtitle: varchar(\"hero_subtitle\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertSiteIdentitySchema = createInsertSchema(siteIdentity);\nexport type InsertSiteIdentity = z.infer<typeof insertSiteIdentitySchema>;\nexport type SiteIdentity = typeof siteIdentity.$inferSelect;\nexport type InsertAdminUser = z.infer<typeof insertAdminUserSchema>;\nexport type AdminUser = typeof adminUsers.$inferSelect;\nexport type InsertPageContent = z.infer<typeof insertPageContentSchema>;\nexport type PageContent = typeof pageContent.$inferSelect;\nexport type InsertNavigationItem = z.infer<typeof insertNavigationItemSchema>;\nexport type NavigationItem = typeof navigationItems.$inferSelect;\nexport type InsertServiceItem = z.infer<typeof insertServiceItemSchema>;\nexport type ServiceItem = typeof serviceItems.$inferSelect;\nexport type InsertContactInfo = z.infer<typeof insertContactInfoSchema>;\nexport type ContactInfo = typeof contactInfo.$inferSelect;\n\n// Translations table for multilingual support\nexport const translations = pgTable(\"translations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  key: varchar(\"key\").notNull(),\n  language: varchar(\"language\").notNull(),\n  value: text(\"value\").notNull(),\n  section: varchar(\"section\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Languages table for managing available languages\nexport const languages = pgTable(\"languages\", {\n  code: varchar(\"code\").primaryKey(), // e.g., 'en', 'lv', 'ru'\n  name: varchar(\"name\").notNull(), // e.g., 'English', 'Latvian'\n  nativeName: varchar(\"native_name\").notNull(), // e.g., 'English', 'Latviešu'\n  isActive: boolean(\"is_active\").default(true),\n  isDefault: boolean(\"is_default\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertTranslationSchema = createInsertSchema(translations).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertLanguageSchema = createInsertSchema(languages).omit({\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertTranslation = z.infer<typeof insertTranslationSchema>;\nexport type Translation = typeof translations.$inferSelect;\nexport type InsertLanguage = z.infer<typeof insertLanguageSchema>;\nexport type Language = typeof languages.$inferSelect;\n\n// Analytics and tracking tables\nexport const pageViews = pgTable(\"page_views\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  pageName: text(\"page_name\").notNull(), // '/', '/services', etc.\n  userAgent: text(\"user_agent\"),\n  ipAddress: text(\"ip_address\"),\n  country: text(\"country\"),\n  city: text(\"city\"),\n  sessionId: text(\"session_id\"),\n  referrer: text(\"referrer\"),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\nexport const clickEvents = pgTable(\"click_events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  element: text(\"element\").notNull(), // 'cta-button', 'service-card', etc.\n  pageName: text(\"page_name\").notNull(),\n  elementText: text(\"element_text\"),\n  targetUrl: text(\"target_url\"),\n  sessionId: text(\"session_id\"),\n  ipAddress: text(\"ip_address\"),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\nexport const vehicleSelections = pgTable(\"vehicle_selections\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  vehicleType: text(\"vehicle_type\").notNull(), // 'car', 'truck', 'tractor'\n  brand: text(\"brand\").notNull(),\n  model: text(\"model\"),\n  generation: text(\"generation\"),\n  engine: text(\"engine\"),\n  variant: text(\"variant\"),\n  sessionId: text(\"session_id\"),\n  ipAddress: text(\"ip_address\"),\n  country: text(\"country\"),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\nexport const geoLocations = pgTable(\"geo_locations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  ipAddress: text(\"ip_address\").notNull(),\n  country: text(\"country\"),\n  countryCode: text(\"country_code\"),\n  city: text(\"city\"),\n  region: text(\"region\"),\n  latitude: text(\"latitude\"),\n  longitude: text(\"longitude\"),\n  timezone: text(\"timezone\"),\n  isp: text(\"isp\"),\n  lastSeen: timestamp(\"last_seen\").defaultNow(),\n});\n\n// Analytics schema validations\nexport const insertPageViewSchema = createInsertSchema(pageViews).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertClickEventSchema = createInsertSchema(clickEvents).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertVehicleSelectionSchema = createInsertSchema(vehicleSelections).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertGeoLocationSchema = createInsertSchema(geoLocations).omit({\n  id: true,\n  lastSeen: true,\n});\n\n// Analytics types\nexport type PageView = typeof pageViews.$inferSelect;\nexport type InsertPageView = z.infer<typeof insertPageViewSchema>;\nexport type ClickEvent = typeof clickEvents.$inferSelect;\nexport type InsertClickEvent = z.infer<typeof insertClickEventSchema>;\nexport type VehicleSelection = typeof vehicleSelections.$inferSelect;\nexport type InsertVehicleSelection = z.infer<typeof insertVehicleSelectionSchema>;\nexport type GeoLocation = typeof geoLocations.$inferSelect;\nexport type InsertGeoLocation = z.infer<typeof insertGeoLocationSchema>;\n","size_bytes":11519},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { useAnalytics } from \"@/hooks/useAnalytics\";\nimport { useGDPR } from \"@/hooks/useGDPR\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AdminProvider } from \"@/hooks/useAdmin\";\nimport LanguageProvider from \"@/components/language-provider\";\nimport Home from \"@/pages/home\";\nimport AdminLogin from \"@/pages/admin-login\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport PrivacyPolicy from \"@/components/gdpr/privacy-policy\";\nimport CookiePolicy from \"@/components/gdpr/cookie-policy\";\nimport CookieConsent from \"@/components/gdpr/cookie-consent\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  // Initialize analytics tracking for all page views (respects GDPR consent)\n  useAnalytics();\n  \n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/admin/login\" component={AdminLogin} />\n      <Route path=\"/admin\" component={AdminDashboard} />\n      <Route path=\"/admin/:section\" component={AdminDashboard} />\n      <Route path=\"/privacy-policy\" component={PrivacyPolicy} />\n      <Route path=\"/cookie-policy\" component={CookiePolicy} />\n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  const gdpr = useGDPR();\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <LanguageProvider>\n        <AdminProvider>\n          <TooltipProvider>\n            <Toaster />\n            <Router />\n            \n            {/* GDPR Cookie Consent Banner */}\n            {gdpr.showBanner && (\n              <CookieConsent\n                onAccept={gdpr.updateConsent}\n                onDecline={gdpr.withdrawConsent}\n              />\n            )}\n          </TooltipProvider>\n        </AdminProvider>\n      </LanguageProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2024},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Quill Editor Dark Theme */\n.ql-toolbar {\n  background-color: rgb(55, 65, 81) !important;\n  border-color: rgb(75, 85, 99) !important;\n}\n\n.ql-container {\n  background-color: rgb(55, 65, 81) !important;\n  border-color: rgb(75, 85, 99) !important;\n}\n\n.ql-editor {\n  background-color: rgb(55, 65, 81) !important;\n  color: white !important;\n}\n\n.ql-editor::before {\n  color: rgb(156, 163, 175) !important;\n}\n\n.ql-toolbar .ql-stroke {\n  fill: none;\n  stroke: rgb(156, 163, 175) !important;\n}\n\n.ql-toolbar .ql-fill {\n  fill: rgb(156, 163, 175) !important;\n  stroke: none;\n}\n\n.ql-toolbar .ql-picker-label {\n  color: rgb(156, 163, 175) !important;\n}\n\n.ql-toolbar .ql-picker-options {\n  background-color: rgb(55, 65, 81) !important;\n  border-color: rgb(75, 85, 99) !important;\n}\n\n.ql-toolbar .ql-picker-item {\n  color: rgb(156, 163, 175) !important;\n}\n\n.ql-toolbar .ql-picker-item:hover {\n  background-color: rgb(75, 85, 99) !important;\n}\n\n.ql-toolbar button:hover {\n  color: white !important;\n}\n\n.ql-toolbar button:hover .ql-stroke {\n  stroke: white !important;\n}\n\n.ql-toolbar button:hover .ql-fill {\n  fill: white !important;\n}\n\n:root {\n  --background: hsl(222 84% 4.9%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(222 84% 4.9%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(222 84% 4.9%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(217 91% 60%);\n  --primary-foreground: hsl(222 84% 4.9%);\n  --secondary: hsl(217 32% 17%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(217 32% 17%);\n  --muted-foreground: hsl(215 20% 65%);\n  --accent: hsl(24 100% 50%);\n  --accent-foreground: hsl(60 9% 98%);\n  --destructive: hsl(0 62% 30%);\n  --destructive-foreground: hsl(60 9% 98%);\n  --border: hsl(217 32% 17%);\n  --input: hsl(217 32% 17%);\n  --ring: hsl(217 91% 60%);\n  --radius: 0.5rem;\n  --chart-1: hsl(220 70% 50%);\n  --chart-2: hsl(160 60% 45%);\n  --chart-3: hsl(30 80% 55%);\n  --chart-4: hsl(280 65% 60%);\n  --chart-5: hsl(340 75% 55%);\n  --font-inter: 'Inter', sans-serif;\n}\n\n.dark {\n  --background: hsl(222 84% 4.9%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(222 84% 4.9%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(222 84% 4.9%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(217 91% 60%);\n  --primary-foreground: hsl(222 84% 4.9%);\n  --secondary: hsl(217 32% 17%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(217 32% 17%);\n  --muted-foreground: hsl(215 20% 65%);\n  --accent: hsl(24 100% 50%);\n  --accent-foreground: hsl(60 9% 98%);\n  --destructive: hsl(0 62% 30%);\n  --destructive-foreground: hsl(60 9% 98%);\n  --border: hsl(217 32% 17%);\n  --input: hsl(217 32% 17%);\n  --ring: hsl(217 91% 60%);\n  --chart-1: hsl(220 70% 50%);\n  --chart-2: hsl(160 60% 45%);\n  --chart-3: hsl(30 80% 55%);\n  --chart-4: hsl(280 65% 60%);\n  --chart-5: hsl(340 75% 55%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-inter antialiased;\n  }\n\n  html {\n    scroll-behavior: smooth;\n  }\n}\n\n@layer components {\n  .hero-gradient {\n    background: linear-gradient(135deg, hsl(222 84% 4.9%) 0%, hsl(217 32% 17%) 100%);\n  }\n\n  .card-gradient {\n    background: linear-gradient(135deg, hsl(217 32% 17%) 0%, hsl(222 84% 4.9%) 100%);\n  }\n\n  .accent-gradient {\n    background: linear-gradient(135deg, hsl(24 100% 50%) 0%, hsl(24 100% 45%) 100%);\n  }\n\n  .glass-effect {\n    backdrop-filter: blur(16px);\n    background: rgba(15, 23, 42, 0.8);\n  }\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(217 32% 17%);\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(24 100% 50%);\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(24 100% 45%);\n}\n\n/* Animations */\n@keyframes fadeInUp {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.animate-fade-in-up {\n  animation: fadeInUp 0.6s ease-out;\n}\n\n/* Power display animations */\n@keyframes countUp {\n  from {\n    transform: scale(0.8);\n    opacity: 0;\n  }\n  to {\n    transform: scale(1);\n    opacity: 1;\n  }\n}\n\n.animate-count-up {\n  animation: countUp 0.5s ease-out;\n}\n\n/* WhatsApp float button pulse */\n@keyframes pulse {\n  0%, 100% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.05);\n  }\n}\n\n.animate-pulse-gentle {\n  animation: pulse 2s infinite;\n}\n\n/* React Quill Editor Dark Theme Styles */\n.ql-toolbar {\n  border-color: #4b5563 !important;\n  background-color: #374151 !important;\n}\n\n.ql-toolbar button {\n  color: #e5e7eb !important;\n}\n\n.ql-toolbar button:hover {\n  color: #ffffff !important;\n}\n\n.ql-toolbar button.ql-active {\n  color: #3b82f6 !important;\n}\n\n.ql-container {\n  border-color: #4b5563 !important;\n  background-color: #1f2937 !important;\n}\n\n.ql-editor {\n  color: #e5e7eb !important;\n  background-color: #1f2937 !important;\n}\n\n.ql-editor.ql-blank::before {\n  color: #9ca3af !important;\n}\n\n.ql-tooltip {\n  background-color: #374151 !important;\n  border: 1px solid #4b5563 !important;\n  color: #e5e7eb !important;\n}\n\n.ql-tooltip input[type=text] {\n  background-color: #1f2937 !important;\n  border: 1px solid #4b5563 !important;\n  color: #e5e7eb !important;\n}\n\n.ql-picker-label {\n  color: #e5e7eb !important;\n}\n\n.ql-picker-options {\n  background-color: #374151 !important;\n  border: 1px solid #4b5563 !important;\n}\n\n.ql-picker-item {\n  color: #e5e7eb !important;\n}\n\n.ql-picker-item:hover {\n  background-color: #4b5563 !important;\n}\n","size_bytes":5643},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/contact.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAnalytics } from \"@/hooks/useAnalytics\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\n\nexport default function Contact() {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    vehicleInfo: \"\",\n    message: \"\",\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n  const { trackClick } = useAnalytics();\n  const { t } = useLanguage();\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (isSubmitting) return;\n\n    setIsSubmitting(true);\n    trackClick('contact-form-submit', 'Contact Form');\n\n    try {\n      const response = await fetch('/api/contact', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(formData),\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Success!\",\n          description: t.contact.success,\n        });\n        setFormData({ name: \"\", email: \"\", phone: \"\", vehicleInfo: \"\", message: \"\" });\n      } else {\n        throw new Error('Failed to send message');\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: t.contact.error,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <section id=\"contact\" className=\"py-20 bg-gray-900\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-3xl md:text-4xl font-bold text-gray-100 mb-4\">\n            {t.contact.title}\n          </h2>\n          <p className=\"text-xl text-gray-400 max-w-3xl mx-auto\">\n            {t.contact.subtitle}\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n          {/* Contact Form */}\n          <Card className=\"bg-gray-800 border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"text-gray-100\">Send us a message</CardTitle>\n              <CardDescription className=\"text-gray-400\">\n                Fill out the form below and we'll get back to you within 24 hours\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"name\" className=\"text-gray-300\">{t.contact.name}</Label>\n                    <Input\n                      id=\"name\"\n                      value={formData.name}\n                      onChange={(e) => handleInputChange(\"name\", e.target.value)}\n                      required\n                      className=\"bg-gray-700 border-gray-600 text-gray-100\"\n                      placeholder=\"Your full name\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"email\" className=\"text-gray-300\">{t.contact.email}</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={formData.email}\n                      onChange={(e) => handleInputChange(\"email\", e.target.value)}\n                      required\n                      className=\"bg-gray-700 border-gray-600 text-gray-100\"\n                      placeholder=\"your@email.com\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"phone\" className=\"text-gray-300\">{t.contact.phone}</Label>\n                  <Input\n                    id=\"phone\"\n                    type=\"tel\"\n                    value={formData.phone}\n                    onChange={(e) => handleInputChange(\"phone\", e.target.value)}\n                    className=\"bg-gray-700 border-gray-600 text-gray-100\"\n                    placeholder=\"+371 XX XXX XXX\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"vehicle\" className=\"text-gray-300\">{t.contact.vehicleInfo}</Label>\n                  <Input\n                    id=\"vehicle\"\n                    value={formData.vehicleInfo}\n                    onChange={(e) => handleInputChange(\"vehicleInfo\", e.target.value)}\n                    className=\"bg-gray-700 border-gray-600 text-gray-100\"\n                    placeholder=\"e.g., 2018 BMW 320d xDrive\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"message\" className=\"text-gray-300\">{t.contact.message}</Label>\n                  <Textarea\n                    id=\"message\"\n                    value={formData.message}\n                    onChange={(e) => handleInputChange(\"message\", e.target.value)}\n                    className=\"bg-gray-700 border-gray-600 text-gray-100 min-h-[120px]\"\n                    placeholder=\"Tell us about your tuning needs...\"\n                  />\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  disabled={isSubmitting}\n                  className=\"w-full bg-accent-500 hover:bg-accent-600 text-white\"\n                >\n                  {isSubmitting ? (\n                    <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                  ) : (\n                    <i className=\"fas fa-paper-plane mr-2\"></i>\n                  )}\n                  {isSubmitting ? \"Sending...\" : t.contact.submit}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n\n          {/* Contact Info */}\n          <div className=\"space-y-6\">\n            <Card className=\"bg-gray-800 border-gray-700\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"bg-accent-500 p-3 rounded-lg\">\n                    <i className=\"fas fa-phone text-white\"></i>\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-gray-100 mb-1\">Phone</h4>\n                    <p className=\"text-gray-300\">+371 22 111 116</p>\n                    <p className=\"text-sm text-gray-400\">Mon-Fri 9:00-18:00</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gray-800 border-gray-700\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"bg-green-600 p-3 rounded-lg\">\n                    <i className=\"fab fa-whatsapp text-white\"></i>\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-gray-100 mb-1\">WhatsApp</h4>\n                    <a \n                      href=\"https://wa.me/37129242069\" \n                      className=\"text-green-400 hover:text-green-300 transition-colors\"\n                      onClick={() => trackClick('contact-whatsapp', 'WhatsApp Contact')}\n                    >\n                      +371 29 242 069\n                    </a>\n                    <p className=\"text-sm text-gray-400\">Instant messaging & quotes</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gray-800 border-gray-700\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"bg-blue-600 p-3 rounded-lg\">\n                    <i className=\"fas fa-envelope text-white\"></i>\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-gray-100 mb-1\">Email</h4>\n                    <a \n                      href=\"mailto:info@chiptuningpro.lv\" \n                      className=\"text-blue-400 hover:text-blue-300 transition-colors\"\n                    >\n                      info@chiptuningpro.lv\n                    </a>\n                    <p className=\"text-sm text-gray-400\">24/7 email support</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gray-800 border-gray-700\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"bg-red-600 p-3 rounded-lg\">\n                    <i className=\"fas fa-map-marker-alt text-white\"></i>\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-gray-100 mb-1\">Location</h4>\n                    <p className=\"text-gray-300\">Riga, Latvia</p>\n                    <p className=\"text-sm text-gray-400\">Mobile service available</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":9314},"client/src/components/footer.tsx":{"content":"import { Link } from \"wouter\";\n\nconst serviceLinks = [\n  \"Stage 1 Chiptuning\",\n  \"Stage 2 Chiptuning\",\n  \"EGR/DPF Off\",\n  \"AdBlue Off\",\n  \"DSG Tuning\",\n  \"ZBOX Device\"\n];\n\nconst contactDetails = [\n  { icon: \"fa-phone\", text: \"+371 22 111 116\", color: \"text-accent-500\" },\n  { icon: \"fa-envelope\", text: \"info@chiptunepro.lv\", color: \"text-accent-500\" },\n  { icon: \"fab fa-whatsapp\", text: \"+371 29 242 069\", color: \"text-green-500\" },\n  { icon: \"fa-map-marker-alt\", text: \"Riga, Latvia\", color: \"text-accent-500\" }\n];\n\nexport default function Footer() {\n  const currentYear = new Date().getFullYear();\n\n  const handleManageCookies = () => {\n    // Trigger cookie settings by clearing consent\n    localStorage.removeItem('cookie-consent');\n    window.location.reload();\n  };\n\n  return (\n    <footer className=\"bg-gray-900 border-t border-gray-800 py-12\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-8\">\n          <div className=\"md:col-span-2\">\n            <div className=\"flex items-center mb-4\">\n              <span className=\"text-2xl font-bold text-accent-500\">ChipTuning</span>\n              <span className=\"text-2xl font-bold text-gray-100\">PRO</span>\n            </div>\n            <p className=\"text-gray-400 mb-4\">\n              Professional ECU tuning and performance optimization services. \n              Over 15 years of experience serving customers worldwide.\n            </p>\n            <div className=\"flex space-x-4\">\n              <a href=\"#\" className=\"text-gray-400 hover:text-accent-500 transition-colors\">\n                <i className=\"fab fa-facebook-f\"></i>\n              </a>\n              <a href=\"#\" className=\"text-gray-400 hover:text-accent-500 transition-colors\">\n                <i className=\"fab fa-instagram\"></i>\n              </a>\n              <a href=\"#\" className=\"text-gray-400 hover:text-accent-500 transition-colors\">\n                <i className=\"fab fa-youtube\"></i>\n              </a>\n            </div>\n          </div>\n          \n          <div>\n            <h4 className=\"text-lg font-semibold text-gray-100 mb-4\">Services</h4>\n            <ul className=\"space-y-2 text-gray-400\">\n              {serviceLinks.map((service, index) => (\n                <li key={index}>\n                  <a href=\"#\" className=\"hover:text-accent-500 transition-colors\">\n                    {service}\n                  </a>\n                </li>\n              ))}\n            </ul>\n          </div>\n          \n          <div>\n            <h4 className=\"text-lg font-semibold text-gray-100 mb-4\">Contact</h4>\n            <ul className=\"space-y-2 text-gray-400\">\n              {contactDetails.map((contact, index) => (\n                <li key={index} className=\"flex items-center\">\n                  <i className={`fas ${contact.icon} ${contact.color} mr-2`}></i>\n                  {contact.text}\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          {/* Privacy & Legal */}\n          <div>\n            <h4 className=\"text-lg font-semibold text-gray-100 mb-4\">Privacy & Legal</h4>\n            <ul className=\"space-y-2 text-gray-400 text-sm\">\n              <li><Link href=\"/privacy-policy\" className=\"hover:text-accent-500 transition-colors\">Privacy Policy</Link></li>\n              <li><Link href=\"/cookie-policy\" className=\"hover:text-accent-500 transition-colors\">Cookie Policy</Link></li>\n              <li>\n                <button \n                  onClick={handleManageCookies}\n                  className=\"hover:text-accent-500 transition-colors text-left\"\n                >\n                  Cookie Preferences\n                </button>\n              </li>\n              <li><a href=\"#\" className=\"hover:text-accent-500 transition-colors\">Terms of Service</a></li>\n            </ul>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-gray-800 mt-8 pt-8\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center\">\n            <div className=\"text-gray-400 mb-4 md:mb-0\">\n              <p>&copy; {currentYear} ChipTuning PRO. All rights reserved.</p>\n            </div>\n            <div className=\"flex items-center space-x-6 text-sm\">\n              <div className=\"flex items-center gap-2\">\n                <i className=\"fas fa-shield-alt text-green-400\"></i>\n                <span className=\"text-gray-400\">GDPR Compliant</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <i className=\"fas fa-lock text-blue-400\"></i>\n                <span className=\"text-gray-400\">Secure Processing</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":4746},"client/src/components/hero.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAnalytics } from \"@/hooks/useAnalytics\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\n\nexport default function Hero() {\n  const { trackClick } = useAnalytics();\n  const { t } = useLanguage();\n  \n  // Fetch hero content from admin panel\n  const { data: pageContent = [] } = useQuery({\n    queryKey: ['/api/page-content'],\n  });\n\n  // Fetch site identity for hero background image\n  const { data: siteIdentity = {} } = useQuery({\n    queryKey: ['/api/site-identity'],\n  });\n\n  const heroContent = pageContent.find((content: any) => content.section === 'hero') || {\n    title: 'Professional<br /><span class=\"text-accent-500\">ECU Tuning</span><br />& Performance Enhancement',\n    content: 'Unlock your vehicle\\'s true potential with our advanced chiptuning solutions. Over 15 years of experience in automotive performance optimization.'\n  };\n  const scrollToSection = (sectionId: string) => {\n    const element = document.getElementById(sectionId);\n    if (element) {\n      element.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  return (\n    <section id=\"home\" className=\"relative min-h-screen flex items-center\">\n      {/* Background Image */}\n      <div \n        className=\"absolute inset-0 bg-cover bg-center bg-no-repeat\"\n        style={{\n          backgroundImage: `url('${siteIdentity.heroImageUrl || 'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1920&h=1080'}')`\n        }}\n      />\n      <div className=\"absolute inset-0 bg-gradient-to-r from-gray-900/90 via-gray-900/70 to-transparent\"></div>\n      \n      <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-16\">\n        <div className=\"max-w-3xl animate-fade-in-up\">\n          <h1 className=\"text-4xl md:text-6xl font-bold leading-tight mb-6 text-gray-100\">\n            <div dangerouslySetInnerHTML={{ __html: heroContent.title }} />\n          </h1>\n          <div className=\"text-xl text-gray-300 mb-8 leading-relaxed\">\n            <div dangerouslySetInnerHTML={{ __html: heroContent.content }} />\n          </div>\n          \n          {/* Stats */}\n          <div className=\"grid grid-cols-3 gap-6 mb-8 text-center\">\n            <div>\n              <div className=\"text-3xl font-bold text-accent-500 mb-1\">{heroContent.stat1Value || '5000+'}</div>\n              <div className=\"text-sm text-gray-400\">{heroContent.stat1Label || t.hero.statsClients}</div>\n            </div>\n            <div>\n              <div className=\"text-3xl font-bold text-accent-500 mb-1\">{heroContent.stat2Value || '8000+'}</div>\n              <div className=\"text-sm text-gray-400\">{heroContent.stat2Label || t.hero.statsProjects}</div>\n            </div>\n            <div>\n              <div className=\"text-3xl font-bold text-accent-500 mb-1\">{heroContent.stat3Value || '15+'}</div>\n              <div className=\"text-sm text-gray-400\">{heroContent.stat3Label || t.hero.statsExperience}</div>\n            </div>\n          </div>\n          \n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <Button \n              onClick={() => {\n                trackClick('hero-button', t.hero.primaryButton);\n                scrollToSection('power-check');\n              }}\n              className=\"bg-accent-500 hover:bg-accent-600 text-white px-8 py-4 text-lg h-auto\"\n            >\n              <i className=\"fas fa-tachometer-alt mr-2\"></i>\n              {t.hero.primaryButton}\n            </Button>\n            <Button \n              onClick={() => {\n                trackClick('hero-button', t.hero.secondaryButton);\n                scrollToSection('contact');\n              }}\n              variant=\"outline\"\n              className=\"border-accent-500 text-accent-500 hover:bg-accent-500 hover:text-white px-8 py-4 text-lg h-auto\"\n            >\n              <i className=\"fas fa-phone mr-2\"></i>\n              {t.hero.secondaryButton}\n            </Button>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4118},"client/src/components/navigation.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport LanguageSelector from \"@/components/language-selector\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\n\nexport default function Navigation() {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const { t } = useLanguage();\n\n  const scrollToSection = (sectionId: string) => {\n    const element = document.getElementById(sectionId);\n    if (element) {\n      element.scrollIntoView({ behavior: 'smooth' });\n    }\n    setIsMenuOpen(false);\n  };\n\n  return (\n    <nav className=\"fixed top-0 w-full glass-effect border-b border-gray-800 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-shrink-0\">\n              <span className=\"text-2xl font-bold text-accent-500\">ChipTuning</span>\n              <span className=\"text-2xl font-bold text-gray-100\">PRO</span>\n            </div>\n          </div>\n          \n          <div className=\"hidden md:block\">\n            <div className=\"ml-10 flex items-baseline space-x-8\">\n              <button \n                onClick={() => scrollToSection('home')}\n                className=\"text-gray-300 hover:text-accent-500 px-3 py-2 text-sm font-medium transition-colors\"\n              >\n                {t.nav.home}\n              </button>\n              <button \n                onClick={() => scrollToSection('services')}\n                className=\"text-gray-300 hover:text-accent-500 px-3 py-2 text-sm font-medium transition-colors\"\n              >\n                {t.nav.services}\n              </button>\n              <button \n                onClick={() => scrollToSection('power-check')}\n                className=\"text-gray-300 hover:text-accent-500 px-3 py-2 text-sm font-medium transition-colors\"\n              >\n                {t.nav.powerChecker}\n              </button>\n              <button \n                onClick={() => scrollToSection('about')}\n                className=\"text-gray-300 hover:text-accent-500 px-3 py-2 text-sm font-medium transition-colors\"\n              >\n                {t.nav.about}\n              </button>\n              <button \n                onClick={() => scrollToSection('contact')}\n                className=\"text-gray-300 hover:text-accent-500 px-3 py-2 text-sm font-medium transition-colors\"\n              >\n                {t.nav.contact}\n              </button>\n              \n              {/* Language Selector */}\n              <LanguageSelector variant=\"header\" />\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-4\">\n            <a \n              href=\"tel:+37122111116\" \n              className=\"flex items-center text-accent-500 font-semibold hover:text-accent-600 transition-colors\"\n            >\n              <i className=\"fas fa-phone mr-2\"></i>\n              <span className=\"hidden sm:inline\">+371 22 111 116</span>\n            </a>\n            \n            {/* Mobile menu button */}\n            <div className=\"md:hidden\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setIsMenuOpen(!isMenuOpen)}\n                className=\"text-gray-400 hover:text-gray-300\"\n              >\n                <i className={`fas ${isMenuOpen ? 'fa-times' : 'fa-bars'}`}></i>\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Mobile menu */}\n        {isMenuOpen && (\n          <div className=\"md:hidden\">\n            <div className=\"px-2 pt-2 pb-3 space-y-1 bg-gray-800 rounded-lg mt-2\">\n              <button \n                onClick={() => scrollToSection('home')}\n                className=\"block w-full text-left text-gray-300 hover:text-accent-500 px-3 py-2 text-sm font-medium transition-colors\"\n              >\n                {t.nav.home}\n              </button>\n              <button \n                onClick={() => scrollToSection('services')}\n                className=\"block w-full text-left text-gray-300 hover:text-accent-500 px-3 py-2 text-sm font-medium transition-colors\"\n              >\n                {t.nav.services}\n              </button>\n              <button \n                onClick={() => scrollToSection('power-check')}\n                className=\"block w-full text-left text-gray-300 hover:text-accent-500 px-3 py-2 text-sm font-medium transition-colors\"\n              >\n                {t.nav.powerChecker}\n              </button>\n              <button \n                onClick={() => scrollToSection('about')}\n                className=\"block w-full text-left text-gray-300 hover:text-accent-500 px-3 py-2 text-sm font-medium transition-colors\"\n              >\n                {t.nav.about}\n              </button>\n              <button \n                onClick={() => scrollToSection('contact')}\n                className=\"block w-full text-left text-gray-300 hover:text-accent-500 px-3 py-2 text-sm font-medium transition-colors\"\n              >\n                {t.nav.contact}\n              </button>\n              \n              {/* Mobile Language Selector */}\n              <div className=\"px-3 py-2\">\n                <LanguageSelector variant=\"inline\" className=\"w-full\" />\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":5390},"client/src/components/power-checker.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAnalytics } from \"@/hooks/useAnalytics\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\nimport { Car, Truck, Tractor } from \"lucide-react\";\n\ninterface VehiclePower {\n  originalPower: number;\n  originalTorque: number;\n  stage1Power: number;\n  stage1Torque: number;\n  stage2Power: number;\n  stage2Torque: number;\n}\n\nexport default function PowerChecker() {\n  const [vehicleType, setVehicleType] = useState<string>(\"\");\n  const [selectedBrand, setSelectedBrand] = useState<string>(\"\");\n  const [selectedModel, setSelectedModel] = useState<string>(\"\");\n  const [selectedVariant, setSelectedVariant] = useState<string>(\"\");\n  const [powerData, setPowerData] = useState<VehiclePower | null>(null);\n  const { trackClick } = useAnalytics();\n  const { t } = useLanguage();\n\n  // Fetch brands based on vehicle type\n  const { data: brands = [] } = useQuery({\n    queryKey: [`/api/vehicles/brands/${vehicleType}`],\n    enabled: !!vehicleType,\n  });\n\n  // Fetch models based on brand\n  const { data: models = [] } = useQuery({\n    queryKey: [`/api/vehicles/models/${selectedBrand}`],\n    enabled: !!selectedBrand,\n  });\n\n  // Fetch variants based on model\n  const { data: variants = [] } = useQuery({\n    queryKey: [`/api/vehicles/variants/${selectedModel}`],\n    enabled: !!selectedModel,\n  });\n\n  const handleCheckPower = async () => {\n    if (!selectedVariant) return;\n\n    try {\n      const response = await fetch(`/api/vehicles/power/${selectedVariant}`);\n      if (response.ok) {\n        const data = await response.json();\n        setPowerData(data);\n        trackClick('power-check', `${selectedBrand} ${selectedModel} ${selectedVariant}`);\n      }\n    } catch (error) {\n      console.error('Error fetching power data:', error);\n    }\n  };\n\n  const vehicleTypeOptions = [\n    { value: 'car', label: 'Car', icon: Car },\n    { value: 'truck', label: 'Truck', icon: Truck },\n    { value: 'tractor', label: 'Tractor', icon: Tractor },\n  ];\n\n  return (\n    <section id=\"power-check\" className=\"py-20 bg-gray-800/50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-3xl md:text-4xl font-bold text-gray-100 mb-4\">\n            {t.powerChecker.title}\n          </h2>\n          <p className=\"text-xl text-gray-400 max-w-3xl mx-auto\">\n            {t.powerChecker.subtitle}\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Vehicle Selection */}\n          <Card className=\"bg-gray-800 border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"text-gray-100\">{t.powerChecker.selectVehicle}</CardTitle>\n              <CardDescription className=\"text-gray-400\">\n                Choose your vehicle specifications to check tuning potential\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {/* Vehicle Type */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                  Vehicle Type\n                </label>\n                <div className=\"grid grid-cols-3 gap-3\">\n                  {vehicleTypeOptions.map(({ value, label, icon: Icon }) => (\n                    <Button\n                      key={value}\n                      variant={vehicleType === value ? \"default\" : \"outline\"}\n                      className={`h-16 flex flex-col items-center justify-center ${\n                        vehicleType === value \n                          ? \"bg-accent-500 text-white\" \n                          : \"bg-gray-700 border-gray-600 text-gray-300 hover:bg-gray-600\"\n                      }`}\n                      onClick={() => {\n                        setVehicleType(value);\n                        setSelectedBrand(\"\");\n                        setSelectedModel(\"\");\n                        setSelectedVariant(\"\");\n                        setPowerData(null);\n                      }}\n                    >\n                      <Icon className=\"w-5 h-5 mb-1\" />\n                      <span className=\"text-xs\">{label}</span>\n                    </Button>\n                  ))}\n                </div>\n              </div>\n\n              {/* Brand Selection */}\n              {vehicleType && (\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                    {t.powerChecker.selectBrand}\n                  </label>\n                  <Select value={selectedBrand} onValueChange={setSelectedBrand}>\n                    <SelectTrigger className=\"bg-gray-700 border-gray-600 text-gray-100\">\n                      <SelectValue placeholder={t.powerChecker.selectBrand} />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-gray-700 border-gray-600\">\n                      {brands.map((brand: string) => (\n                        <SelectItem key={brand} value={brand} className=\"text-gray-100 hover:bg-gray-600\">\n                          {brand}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              )}\n\n              {/* Model Selection */}\n              {selectedBrand && (\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                    {t.powerChecker.selectModel}\n                  </label>\n                  <Select value={selectedModel} onValueChange={setSelectedModel}>\n                    <SelectTrigger className=\"bg-gray-700 border-gray-600 text-gray-100\">\n                      <SelectValue placeholder={t.powerChecker.selectModel} />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-gray-700 border-gray-600\">\n                      {models.map((model: string) => (\n                        <SelectItem key={model} value={model} className=\"text-gray-100 hover:bg-gray-600\">\n                          {model}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              )}\n\n              {/* Engine Variant Selection */}\n              {selectedModel && (\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                    {t.powerChecker.selectEngine}\n                  </label>\n                  <Select value={selectedVariant} onValueChange={setSelectedVariant}>\n                    <SelectTrigger className=\"bg-gray-700 border-gray-600 text-gray-100\">\n                      <SelectValue placeholder={t.powerChecker.selectEngine} />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-gray-700 border-gray-600\">\n                      {variants.map((variant: any) => (\n                        <SelectItem key={variant.id} value={variant.id} className=\"text-gray-100 hover:bg-gray-600\">\n                          <div className=\"flex flex-col\">\n                            <span>{variant.variant}</span>\n                            <span className=\"text-xs text-gray-400\">\n                              {variant.originalPower}hp / {variant.originalTorque}Nm\n                            </span>\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              )}\n\n              {/* Check Power Button */}\n              {selectedVariant && (\n                <Button\n                  onClick={handleCheckPower}\n                  className=\"w-full bg-accent-500 hover:bg-accent-600 text-white\"\n                >\n                  <i className=\"fas fa-search mr-2\"></i>\n                  {t.powerChecker.checkPower}\n                </Button>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Power Results */}\n          <Card className=\"bg-gray-800 border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"text-gray-100\">Power Results</CardTitle>\n              <CardDescription className=\"text-gray-400\">\n                Tuning potential for your vehicle\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {!powerData ? (\n                <div className=\"text-center py-12\">\n                  <i className=\"fas fa-tachometer-alt text-gray-600 text-4xl mb-4\"></i>\n                  <p className=\"text-gray-400\">Select your vehicle to see tuning potential</p>\n                </div>\n              ) : (\n                <div className=\"space-y-6\">\n                  {/* Original Power */}\n                  <div className=\"bg-gray-700/50 rounded-lg p-4\">\n                    <h4 className=\"font-semibold text-gray-100 mb-2\">{t.powerChecker.originalPower}</h4>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-300\">{powerData.originalPower} HP</span>\n                      <span className=\"text-gray-300\">{powerData.originalTorque} Nm</span>\n                    </div>\n                  </div>\n\n                  {/* Stage 1 */}\n                  <div className=\"bg-accent-500/10 rounded-lg p-4 border border-accent-500/20\">\n                    <h4 className=\"font-semibold text-accent-400 mb-2\">{t.powerChecker.stage1Power}</h4>\n                    <div className=\"flex justify-between mb-2\">\n                      <span className=\"text-gray-300\">{powerData.stage1Power} HP</span>\n                      <span className=\"text-gray-300\">{powerData.stage1Torque} Nm</span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-accent-400\">\n                        +{powerData.stage1Power - powerData.originalPower} HP\n                      </span>\n                      <span className=\"text-accent-400\">\n                        +{powerData.stage1Torque - powerData.originalTorque} Nm\n                      </span>\n                    </div>\n                  </div>\n\n                  {/* Stage 2 */}\n                  <div className=\"bg-green-500/10 rounded-lg p-4 border border-green-500/20\">\n                    <h4 className=\"font-semibold text-green-400 mb-2\">{t.powerChecker.stage2Power}</h4>\n                    <div className=\"flex justify-between mb-2\">\n                      <span className=\"text-gray-300\">{powerData.stage2Power} HP</span>\n                      <span className=\"text-gray-300\">{powerData.stage2Torque} Nm</span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-green-400\">\n                        +{powerData.stage2Power - powerData.originalPower} HP\n                      </span>\n                      <span className=\"text-green-400\">\n                        +{powerData.stage2Torque - powerData.originalTorque} Nm\n                      </span>\n                    </div>\n                  </div>\n\n                  {/* Get Quote Button */}\n                  <Button\n                    onClick={() => {\n                      trackClick('power-check-quote', `${selectedBrand} ${selectedModel}`);\n                      const element = document.getElementById('contact');\n                      if (element) {\n                        element.scrollIntoView({ behavior: 'smooth' });\n                      }\n                    }}\n                    className=\"w-full bg-green-600 hover:bg-green-700 text-white\"\n                  >\n                    <i className=\"fas fa-envelope mr-2\"></i>\n                    Get Free Quote\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":12200},"client/src/components/services.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAnalytics } from \"@/hooks/useAnalytics\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\n\n// Default services as fallback\nconst defaultServices = [\n  {\n    title: \"Stage 1 Chiptuning\",\n    icon: \"fa-microchip\",\n    image: \"https://pixabay.com/get/gec3ecea16ae86fe59839f9b251c98e4ac0d2d0a7f0fdf5f10a8359959b1fc5c134773a2aaeec4f3dc666f59efc325a1357c156d2eabe0567c977f5b82af65a3e_1280.jpg\",\n    description: \"Professional ECU remapping for optimal power and torque gains while maintaining reliability and fuel efficiency.\",\n    features: [\n      \"Up to 30% power increase\",\n      \"Improved throttle response\",\n      \"Better fuel economy\",\n      \"Factory warranty safe\"\n    ],\n    price: \"From €299\"\n  },\n  {\n    title: \"EGR Off\",\n    icon: \"fa-cog\",\n    image: \"https://images.unsplash.com/photo-1486262715619-67b85e0b08d3?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600\",\n    description: \"Disable problematic EGR valve system to prevent carbon buildup and improve engine longevity.\",\n    features: [\n      \"Prevents carbon deposits\",\n      \"Reduces maintenance costs\",\n      \"Improves engine reliability\",\n      \"Cleaner combustion\"\n    ],\n    price: \"From €199\"\n  },\n  {\n    title: \"DPF/FAP Off\",\n    icon: \"fa-filter\",\n    image: \"https://images.unsplash.com/photo-1486754735734-325b5831c3ad?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600\",\n    description: \"Remove diesel particulate filter limitations for improved performance and reduced maintenance.\",\n    features: [\n      \"Eliminates DPF regeneration\",\n      \"Improved fuel consumption\",\n      \"No more DPF warning lights\",\n      \"Reduced operating costs\"\n    ],\n    price: \"From €249\"\n  },\n  {\n    title: \"Stage 2 Chiptuning\",\n    icon: \"fa-rocket\",\n    image: \"https://images.unsplash.com/photo-1503376780353-7e6692767b70?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600\",\n    description: \"Advanced tuning with hardware modifications for maximum performance gains and racing applications.\",\n    features: [\n      \"Up to 50% power increase\",\n      \"Custom exhaust required\",\n      \"Track-ready performance\",\n      \"Professional installation\"\n    ],\n    price: \"From €499\"\n  },\n  {\n    title: \"AdBlue Off\",\n    icon: \"fa-tint\",\n    image: \"https://images.unsplash.com/photo-1601362840469-51e4d8d58785?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600\",\n    description: \"Disable AdBlue/SCR system to eliminate refill requirements and related system failures.\",\n    features: [\n      \"No more AdBlue refills\",\n      \"Eliminates system errors\",\n      \"Reduces operating costs\",\n      \"Professional calibration\"\n    ],\n    price: \"From €199\"\n  },\n  {\n    title: \"DSG Tuning\",\n    icon: \"fa-exchange-alt\",\n    image: \"https://images.unsplash.com/photo-1449824913935-59a10b8d2000?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600\",\n    description: \"Optimize automatic transmission shift points, torque limits, and launch control settings.\",\n    features: [\n      \"Faster shift speeds\",\n      \"Improved launch control\",\n      \"Custom shift points\",\n      \"Enhanced driving dynamics\"\n    ],\n    price: \"From €349\"\n  }\n];\n\nexport default function Services() {\n  const { trackClick } = useAnalytics();\n  const { t } = useLanguage();\n\n  // Fetch services from admin panel\n  const { data: servicesData = [] } = useQuery({\n    queryKey: ['/api/services'],\n  });\n\n  // Transform admin data to match expected structure, fallback to default\n  const services = servicesData.length > 0 \n    ? servicesData.map((service: any) => ({\n        title: service.title,\n        icon: service.icon || 'fa-cog',\n        image: service.image || 'https://images.unsplash.com/photo-1486262715619-67b85e0b08d3',\n        description: service.description,\n        features: service.features ? service.features.split('\\n').filter(Boolean) : [],\n        price: service.price || 'Contact for price'\n      }))\n    : defaultServices;\n\n  const handleServiceClick = (serviceName: string) => {\n    trackClick('service-card', serviceName);\n  };\n\n  return (\n    <section id=\"services\" className=\"py-20 bg-gray-900\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-3xl md:text-4xl font-bold text-gray-100 mb-4\">\n            {t.services.title}\n          </h2>\n          <p className=\"text-xl text-gray-400 max-w-3xl mx-auto\">\n            {t.services.subtitle}\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {services.map((service, index) => (\n            <Card \n              key={index}\n              className=\"bg-gray-800 border-gray-700 hover:bg-gray-750 transition-all duration-300 group overflow-hidden cursor-pointer\"\n              onClick={() => handleServiceClick(service.title)}\n            >\n              <CardContent className=\"p-0\">\n                <div className=\"relative\">\n                  <img \n                    src={service.image} \n                    alt={service.title}\n                    className=\"w-full h-48 object-cover transition-transform duration-300 group-hover:scale-105\" \n                  />\n                  <div className=\"absolute inset-0 bg-gradient-to-t from-gray-900/60 to-transparent\"></div>\n                </div>\n                \n                <div className=\"p-6\">\n                  <div className=\"flex items-center mb-3\">\n                    <div className=\"bg-accent-500 p-2 rounded-lg mr-3\">\n                      <i className={`fas ${service.icon} text-white`}></i>\n                    </div>\n                    <h3 className=\"text-xl font-bold text-gray-100\">{service.title}</h3>\n                  </div>\n                  \n                  <p className=\"text-gray-400 mb-4\">\n                    {service.description}\n                  </p>\n                  \n                  <ul className=\"text-gray-300 text-sm space-y-1 mb-4\">\n                    {service.features.map((feature, featureIndex) => (\n                      <li key={featureIndex}>• {feature}</li>\n                    ))}\n                  </ul>\n                  \n                  <div className=\"text-accent-500 font-bold text-lg\">\n                    {service.price}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":6716},"client/src/components/why-choose-us.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\n\nconst defaultFeatures = [\n  {\n    icon: \"fa-award\",\n    title: \"15+ Years Experience\",\n    description: \"Proven expertise in automotive performance optimization since 2008\"\n  },\n  {\n    icon: \"fa-shield-alt\",\n    title: \"Quality Guarantee\",\n    description: \"All tuning services backed by comprehensive warranty and support\"\n  },\n  {\n    icon: \"fa-tachometer-alt\",\n    title: \"Dyno Testing\",\n    description: \"Professional power verification on our in-house dynamometer\"\n  },\n  {\n    icon: \"fa-user-cog\",\n    title: \"Individual Solutions\",\n    description: \"Custom tuning maps tailored to your specific vehicle and requirements\"\n  }\n];\n\nconst workshopFeatures = [\n  \"Professional 4WD dynamometer\",\n  \"OEM diagnostic equipment\",\n  \"Climate-controlled workshop\",\n  \"Certified technicians\"\n];\n\nexport default function WhyChooseUs() {\n  const { t } = useLanguage();\n  \n  // Fetch why choose us content from admin panel\n  const { data: pageContent = [] } = useQuery<any[]>({\n    queryKey: ['/api/page-content'],\n  });\n\n  const whyChooseUsContent = pageContent.find((content: any) => content.section === 'why-choose-us') || {\n    title: 'Why Choose ChipTuning PRO?',\n    content: 'Over 15 years of experience in professional automotive tuning with thousands of satisfied customers worldwide',\n    features: defaultFeatures\n  };\n  return (\n    <section id=\"about\" className=\"py-20 bg-gray-900\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 \n            className=\"text-3xl md:text-4xl font-bold text-gray-100 mb-4\"\n            dangerouslySetInnerHTML={{ __html: whyChooseUsContent.title }}\n          />\n          <div \n            className=\"text-xl text-gray-400 max-w-3xl mx-auto\"\n            dangerouslySetInnerHTML={{ __html: whyChooseUsContent.content }}\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 mb-16\">\n          {(Array.isArray(whyChooseUsContent.features) ? whyChooseUsContent.features : defaultFeatures).map((feature: any, index: number) => (\n            <div key={index} className=\"text-center\">\n              <div className=\"bg-accent-500 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <i className={`fas ${feature.icon} text-white text-2xl`}></i>\n              </div>\n              <h3 className=\"text-xl font-bold text-gray-100 mb-2\">{feature.title}</h3>\n              <p className=\"text-gray-400\">{feature.description}</p>\n            </div>\n          ))}\n        </div>\n\n        {/* Workshop Section */}\n        <div className=\"bg-gray-800 rounded-xl p-8 lg:p-12\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 items-center\">\n            <div>\n              <h3 className=\"text-2xl font-bold text-gray-100 mb-4\">\n                Professional Workshop & Equipment\n              </h3>\n              <p className=\"text-gray-400 mb-6\">\n                Our state-of-the-art facility is equipped with the latest diagnostic tools, \n                professional dynamometer, and specialized software for all major vehicle brands.\n              </p>\n              <ul className=\"space-y-3\">\n                {workshopFeatures.map((feature, index) => (\n                  <li key={index} className=\"flex items-center text-gray-300\">\n                    <i className=\"fas fa-check-circle text-accent-500 mr-3\"></i>\n                    {feature}\n                  </li>\n                ))}\n              </ul>\n            </div>\n            <div>\n              <img \n                src=\"https://images.unsplash.com/photo-1487754180451-c456f719a1fc?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600\" \n                alt=\"Modern automotive workshop\" \n                className=\"w-full rounded-lg shadow-lg\" \n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4054},"client/src/components/zbox.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\n\nexport default function ZBox() {\n  const { t } = useLanguage();\n  \n  // Fetch ZBox content from admin panel\n  const { data: pageContent = [] } = useQuery<any[]>({\n    queryKey: ['/api/page-content'],\n  });\n\n  const zboxContent = pageContent.find((content: any) => content.section === 'zbox') || {\n    title: 'Introducing <span class=\"text-accent-500\">ZBOX</span> Chiptuning Device',\n    content: 'Revolutionary plug-and-play chiptuning solution with smartphone app control. Easy installation, multiple power maps, and real-time adjustment capabilities.',\n    features: [\n      \"Plug-and-play installation in 5 minutes\",\n      \"Multiple power maps via smartphone app\", \n      \"Real-time performance monitoring\",\n      \"Reversible - no permanent changes\"\n    ],\n    price: 'From €599',\n    priceNote: 'Including installation'\n  };\n  \n  const scrollToContact = () => {\n    const element = document.getElementById('contact');\n    if (element) {\n      element.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  return (\n    <section className=\"py-20 bg-gray-800\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n          <div>\n            <h2 \n              className=\"text-3xl md:text-4xl font-bold text-gray-100 mb-6\"\n              dangerouslySetInnerHTML={{ __html: zboxContent.title }}\n            />\n            <div \n              className=\"text-xl text-gray-400 mb-8\"\n              dangerouslySetInnerHTML={{ __html: zboxContent.content }}\n            />\n            \n            <div className=\"space-y-4 mb-8\">\n              {(Array.isArray(zboxContent.features) ? zboxContent.features : [\n                \"Plug-and-play installation in 5 minutes\",\n                \"Multiple power maps via smartphone app\",\n                \"Real-time performance monitoring\",\n                \"Reversible - no permanent changes\"\n              ]).map((feature: string, index: number) => (\n                <div key={index} className=\"flex items-center\">\n                  <div className=\"bg-accent-500 p-1 rounded-full mr-4 flex-shrink-0\">\n                    <i className=\"fas fa-check text-white text-sm\"></i>\n                  </div>\n                  <span className=\"text-gray-300\">{feature}</span>\n                </div>\n              ))}\n            </div>\n\n            <div className=\"flex flex-col sm:flex-row gap-4 items-start\">\n              <Button \n                onClick={scrollToContact}\n                className=\"bg-accent-500 hover:bg-accent-600 text-white px-8 py-4 text-lg h-auto\"\n              >\n                <i className=\"fas fa-info-circle mr-2\"></i>\n                Learn More About ZBOX\n              </Button>\n              <div className=\"text-center sm:text-left\">\n                <div className=\"text-2xl font-bold text-accent-500\">{zboxContent.price}</div>\n                <div className=\"text-sm text-gray-400\">{zboxContent.priceNote}</div>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"relative\">\n            <img \n              src=\"https://pixabay.com/get/gef47e70d2325ba5852f361aac8b997f684bfe06892d136d5fda0eb30606cdee09118bc1bd44183147c08af49373554f97344181f9885cebf3b1181e4290ad95f_1280.jpg\" \n              alt=\"ZBOX Chiptuning device installation\" \n              className=\"w-full rounded-xl shadow-2xl\" \n            />\n            <div className=\"absolute inset-0 bg-gradient-to-t from-gray-900/20 to-transparent rounded-xl\"></div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3726},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAdmin.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface AdminUser {\n  id: string;\n  username: string;\n}\n\ninterface AdminContextType {\n  user: AdminUser | null;\n  token: string | null;\n  login: (username: string, password: string) => Promise<void>;\n  logout: () => void;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n}\n\nconst AdminContext = createContext<AdminContextType | undefined>(undefined);\n\nexport function AdminProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<AdminUser | null>(null);\n  const [token, setToken] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Check for existing token in localStorage\n    const savedToken = localStorage.getItem('adminToken');\n    const savedUser = localStorage.getItem('adminUser');\n    \n    if (savedToken && savedUser && savedUser !== 'undefined') {\n      try {\n        setToken(savedToken);\n        setUser(JSON.parse(savedUser));\n      } catch (error) {\n        // Invalid saved user data, clearing storage\n        localStorage.removeItem('adminToken');\n        localStorage.removeItem('adminUser');\n      }\n    }\n    setIsLoading(false);\n  }, []);\n\n  const login = async (username: string, password: string) => {\n    const response = await fetch('/api/admin/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ username, password }),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Login failed');\n    }\n\n    const data = await response.json();\n    \n    setToken(data.token);\n    setUser(data.user);\n    \n    localStorage.setItem('adminToken', data.token);\n    localStorage.setItem('adminUser', JSON.stringify(data.user));\n  };\n\n  const logout = () => {\n    setUser(null);\n    setToken(null);\n    localStorage.removeItem('adminToken');\n    localStorage.removeItem('adminUser');\n  };\n\n  return (\n    <AdminContext.Provider\n      value={{\n        user,\n        token,\n        login,\n        logout,\n        isAuthenticated: !!user,\n        isLoading,\n      }}\n    >\n      {children}\n    </AdminContext.Provider>\n  );\n}\n\nexport function useAdmin() {\n  const context = useContext(AdminContext);\n  if (context === undefined) {\n    throw new Error('useAdmin must be used within an AdminProvider');\n  }\n  return context;\n}","size_bytes":2497},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/vehicle-data.ts":{"content":"// This file contains mock data structure for reference\n// The actual data is stored in the backend storage\n\nexport interface VehicleData {\n  brand: string;\n  model: string;\n  variant: string;\n  vehicleType: 'car' | 'truck' | 'tractor';\n  originalPower: number; // HP\n  originalTorque: number; // Nm\n  stage1Power: number; // HP\n  stage1Torque: number; // Nm\n  stage2Power?: number; // HP\n  stage2Torque?: number; // Nm\n}\n\nexport const vehicleTypes = [\n  { value: 'car', label: 'Passenger Cars', icon: 'fa-car' },\n  { value: 'truck', label: 'Commercial Vehicles', icon: 'fa-truck' },\n  { value: 'tractor', label: 'Agricultural', icon: 'fa-tractor' }\n] as const;\n","size_bytes":662},"client/src/pages/admin-dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAdmin } from \"@/hooks/useAdmin\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport PageEditor from \"@/components/admin/page-editor\";\nimport VisualContentEditor from \"@/components/admin/visual-content-editor\";\nimport NavigationManager from \"@/components/admin/navigation-manager\";\nimport DragDropNavigation from \"@/components/admin/drag-drop-navigation\";\nimport ServicesManager from \"@/components/admin/services-manager\";\nimport ContactManager from \"@/components/admin/contact-manager\";\nimport VehicleManager from \"@/components/admin/vehicle-manager\";\nimport PowerCalculatorManager from \"@/components/admin/power-calculator-manager\";\nimport LanguageManager from \"@/components/admin/language-manager\";\nimport UserManager from \"@/components/admin/user-manager\";\nimport SiteIdentityManager from \"@/components/admin/site-identity-manager\";\nimport AnalyticsDashboard from \"@/components/admin/analytics-dashboard\";\nimport HelpPanel from \"@/components/admin/help-panel\";\n\nexport default function AdminDashboard() {\n  const { user, logout, isAuthenticated, token } = useAdmin();\n  const [location, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!isAuthenticated) {\n      setLocation(\"/admin/login\");\n    }\n  }, [isAuthenticated, setLocation]);\n\n  // Override the default fetch for authenticated requests\n  useEffect(() => {\n    if (token) {\n      // Set up authenticated fetcher\n      const authFetch = (url: string, init?: RequestInit) => {\n        return fetch(url, {\n          ...init,\n          headers: {\n            ...init?.headers,\n            Authorization: `Bearer ${token}`,\n          },\n        });\n      };\n      \n      // Store the authenticated fetch function for use by queries\n      (window as any).authFetch = authFetch;\n    }\n  }, [token]);\n\n  const { data: pageContent = [], isLoading: pageContentLoading } = useQuery({\n    queryKey: ['/api/admin/page-content'],\n    enabled: isAuthenticated && !!token,\n    queryFn: async () => {\n      const response = await fetch('/api/admin/page-content', {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      if (!response.ok) throw new Error('Failed to fetch page content');\n      return response.json();\n    },\n  });\n\n  const { data: navigationItems = [], isLoading: navigationLoading } = useQuery({\n    queryKey: ['/api/admin/navigation'],\n    enabled: isAuthenticated && !!token,\n    queryFn: async () => {\n      const response = await fetch('/api/admin/navigation', {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      if (!response.ok) throw new Error('Failed to fetch navigation items');\n      return response.json();\n    },\n  });\n\n  const { data: serviceItems = [], isLoading: servicesLoading } = useQuery({\n    queryKey: ['/api/admin/services'],\n    enabled: isAuthenticated && !!token,\n    queryFn: async () => {\n      const response = await fetch('/api/admin/services', {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      if (!response.ok) throw new Error('Failed to fetch services');\n      return response.json();\n    },\n  });\n\n  const { data: contactInfo = [], isLoading: contactInfoLoading } = useQuery({\n    queryKey: ['/api/admin/contact-info'],\n    enabled: isAuthenticated && !!token,\n    queryFn: async () => {\n      const response = await fetch('/api/admin/contact-info', {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      if (!response.ok) throw new Error('Failed to fetch contact info');\n      return response.json();\n    },\n  });\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-900 text-gray-100\">\n      <nav className=\"bg-gray-800 border-b border-gray-700 p-4\">\n        <div className=\"container mx-auto flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-xl font-bold text-accent-400\">\n              Website Control Panel\n            </h1>\n            <p className=\"text-gray-400 text-sm\">Easy website management - no technical skills needed</p>\n          </div>\n          <div className=\"flex items-center gap-4\">\n            <span className=\"text-gray-300\">Welcome, {user?.username}</span>\n            <Button\n              onClick={() => setLocation(\"/\")}\n              variant=\"outline\"\n              size=\"sm\"\n            >\n              <i className=\"fas fa-home mr-2\"></i>\n              View Site\n            </Button>\n            <Button onClick={logout} variant=\"destructive\" size=\"sm\">\n              <i className=\"fas fa-sign-out-alt mr-2\"></i>\n              Logout\n            </Button>\n          </div>\n        </div>\n      </nav>\n\n      <div className=\"container mx-auto p-6\">\n        {/* Welcome & Quick Start */}\n        <Card className=\"bg-gradient-to-r from-blue-900/30 to-accent-900/30 border-accent-500/30 mb-6\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"flex items-center gap-3 mb-3\">\n                  <i className=\"fas fa-rocket text-accent-400 text-xl\"></i>\n                  <h3 className=\"text-xl font-bold text-white\">Quick Start Guide</h3>\n                </div>\n                <p className=\"text-gray-300 mb-4\">Everything you need to manage your chiptuning website</p>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 text-sm\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-8 h-8 bg-accent-500/20 rounded-full flex items-center justify-center\">\n                      <i className=\"fas fa-chart-pie text-accent-400\"></i>\n                    </div>\n                    <div>\n                      <div className=\"font-medium text-white\">Dashboard</div>\n                      <div className=\"text-gray-400 text-xs\">View website stats</div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-8 h-8 bg-green-500/20 rounded-full flex items-center justify-center\">\n                      <i className=\"fas fa-edit text-green-400\"></i>\n                    </div>\n                    <div>\n                      <div className=\"font-medium text-white\">Edit Content</div>\n                      <div className=\"text-gray-400 text-xs\">Change homepage text</div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-8 h-8 bg-purple-500/20 rounded-full flex items-center justify-center\">\n                      <i className=\"fas fa-cogs text-purple-400\"></i>\n                    </div>\n                    <div>\n                      <div className=\"font-medium text-white\">Services</div>\n                      <div className=\"text-gray-400 text-xs\">Manage offerings</div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-8 h-8 bg-orange-500/20 rounded-full flex items-center justify-center\">\n                      <i className=\"fas fa-car text-orange-400\"></i>\n                    </div>\n                    <div>\n                      <div className=\"font-medium text-white\">Vehicles</div>\n                      <div className=\"text-gray-400 text-xs\">Car specifications</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"hidden lg:block\">\n                <div className=\"text-right text-gray-400 text-sm\">\n                  <i className=\"fas fa-question-circle mr-1\"></i>\n                  Need help? Look for the blue help button →\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n          <TabsList className=\"bg-gray-800 border-gray-700 grid grid-cols-2 md:grid-cols-5 lg:grid-cols-6 gap-1 h-auto p-1\">\n            <TabsTrigger value=\"overview\" className=\"data-[state=active]:bg-accent-500 text-xs md:text-sm p-2\">\n              <i className=\"fas fa-chart-pie mr-1 md:mr-2\"></i>\n              <span className=\"hidden sm:inline\">Dashboard</span>\n              <span className=\"sm:hidden\">Home</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"analytics\" className=\"data-[state=active]:bg-accent-500 text-xs md:text-sm p-2\">\n              <i className=\"fas fa-chart-line mr-1 md:mr-2\"></i>\n              <span className=\"hidden sm:inline\">Statistics</span>\n              <span className=\"sm:hidden\">Stats</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"pages\" className=\"data-[state=active]:bg-accent-500 text-xs md:text-sm p-2\">\n              <i className=\"fas fa-edit mr-1 md:mr-2\"></i>\n              <span className=\"hidden sm:inline\">Edit Content</span>\n              <span className=\"sm:hidden\">Edit</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"services\" className=\"data-[state=active]:bg-accent-500 text-xs md:text-sm p-2\">\n              <i className=\"fas fa-cogs mr-1 md:mr-2\"></i>\n              <span className=\"hidden sm:inline\">Services</span>\n              <span className=\"sm:hidden\">Services</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"vehicles\" className=\"data-[state=active]:bg-accent-500 text-xs md:text-sm p-2\">\n              <i className=\"fas fa-car mr-1 md:mr-2\"></i>\n              <span className=\"hidden sm:inline\">Vehicles</span>\n              <span className=\"sm:hidden\">Cars</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"contact\" className=\"data-[state=active]:bg-accent-500 text-xs md:text-sm p-2\">\n              <i className=\"fas fa-phone mr-1 md:mr-2\"></i>\n              <span className=\"hidden sm:inline\">Contact</span>\n              <span className=\"sm:hidden\">Contact</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"navigation\" className=\"data-[state=active]:bg-accent-500 text-xs md:text-sm p-2\">\n              <i className=\"fas fa-compass mr-1 md:mr-2\"></i>\n              <span className=\"hidden sm:inline\">Menu</span>\n              <span className=\"sm:hidden\">Menu</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"site-identity\" className=\"data-[state=active]:bg-accent-500 text-xs md:text-sm p-2\">\n              <i className=\"fas fa-palette mr-1 md:mr-2\"></i>\n              <span className=\"hidden sm:inline\">Design</span>\n              <span className=\"sm:hidden\">Design</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"languages\" className=\"data-[state=active]:bg-accent-500 text-xs md:text-sm p-2\">\n              <i className=\"fas fa-globe mr-1 md:mr-2\"></i>\n              <span className=\"hidden sm:inline\">Languages</span>\n              <span className=\"sm:hidden\">Lang</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"users\" className=\"data-[state=active]:bg-accent-500 text-xs md:text-sm p-2\">\n              <i className=\"fas fa-users mr-1 md:mr-2\"></i>\n              <span className=\"hidden sm:inline\">Users</span>\n              <span className=\"sm:hidden\">Users</span>\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            <div className=\"mb-6\">\n              <h2 className=\"text-2xl font-bold text-white mb-2\">Welcome to Your Website Dashboard</h2>\n              <p className=\"text-gray-400 text-lg\">Here's an overview of your website content and settings. Click on any tab above to make changes.</p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              <Card className=\"bg-gray-800 border-gray-700 hover:bg-gray-750 transition-colors\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-gray-300\">\n                    Website Pages\n                  </CardTitle>\n                  <i className=\"fas fa-file-alt text-accent-400\"></i>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-gray-100\">\n                    {pageContentLoading ? \"...\" : pageContent?.length || 0}\n                  </div>\n                  <p className=\"text-xs text-gray-400\">\n                    Content sections created\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-gray-800 border-gray-700 hover:bg-gray-750 transition-colors\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-gray-300\">\n                    Menu Items\n                  </CardTitle>\n                  <i className=\"fas fa-compass text-accent-400\"></i>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-gray-100\">\n                    {navigationLoading ? \"...\" : navigationItems?.length || 0}\n                  </div>\n                  <p className=\"text-xs text-gray-400\">\n                    Active menu items\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-gray-800 border-gray-700\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-gray-300\">\n                    Services\n                  </CardTitle>\n                  <i className=\"fas fa-cogs text-accent-400\"></i>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-gray-100\">\n                    {servicesLoading ? \"...\" : serviceItems?.length || 0}\n                  </div>\n                  <p className=\"text-xs text-gray-400\">\n                    Available services\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-gray-800 border-gray-700\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-gray-300\">\n                    Contact Methods\n                  </CardTitle>\n                  <i className=\"fas fa-phone text-accent-400\"></i>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-gray-100\">\n                    {contactInfoLoading ? \"...\" : contactInfo?.length || 0}\n                  </div>\n                  <p className=\"text-xs text-gray-400\">\n                    Contact options\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n\n            <Card className=\"bg-gray-800 border-gray-700\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-100 flex items-center gap-2\">\n                  <i className=\"fas fa-bolt text-accent-400\"></i>\n                  Quick Actions\n                </CardTitle>\n                <p className=\"text-gray-400 text-sm\">Common tasks to get started</p>\n              </CardHeader>\n              <CardContent className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <Button \n                  onClick={() => setLocation(\"/\")} \n                  variant=\"outline\"\n                  className=\"border-gray-600 hover:border-accent-400 hover:bg-accent-500/10 h-20 flex flex-col gap-2\"\n                >\n                  <i className=\"fas fa-eye text-lg\"></i>\n                  <div>\n                    <div className=\"font-medium\">Preview Website</div>\n                    <div className=\"text-xs text-gray-400\">See live site</div>\n                  </div>\n                </Button>\n                <Button \n                  onClick={() => {\n                    // Find services tab and switch to it\n                    const servicesTab = document.querySelector('[value=\"services\"]') as HTMLElement;\n                    if (servicesTab) servicesTab.click();\n                  }}\n                  variant=\"outline\"\n                  className=\"border-gray-600 hover:border-green-400 hover:bg-green-500/10 h-20 flex flex-col gap-2\"\n                >\n                  <i className=\"fas fa-plus text-lg\"></i>\n                  <div>\n                    <div className=\"font-medium\">Add Service</div>\n                    <div className=\"text-xs text-gray-400\">New offering</div>\n                  </div>\n                </Button>\n                <Button \n                  onClick={() => {\n                    // Find vehicles tab and switch to it\n                    const vehiclesTab = document.querySelector('[value=\"vehicles\"]') as HTMLElement;\n                    if (vehiclesTab) vehiclesTab.click();\n                  }}\n                  variant=\"outline\"\n                  className=\"border-gray-600 hover:border-orange-400 hover:bg-orange-500/10 h-20 flex flex-col gap-2\"\n                >\n                  <i className=\"fas fa-car text-lg\"></i>\n                  <div>\n                    <div className=\"font-medium\">Add Vehicle</div>\n                    <div className=\"text-xs text-gray-400\">Car specs</div>\n                  </div>\n                </Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"pages\" className=\"space-y-6\">\n            <div className=\"mb-6\">\n              <h2 className=\"text-2xl font-bold text-white mb-2\">Visual Content Editor</h2>\n              <p className=\"text-gray-400\">Edit your website content with live preview. See exactly how changes will look to your visitors.</p>\n            </div>\n            <VisualContentEditor token={token || ''} />\n          </TabsContent>\n\n          <TabsContent value=\"navigation\" className=\"space-y-6\">\n            <div className=\"mb-6\">\n              <h2 className=\"text-2xl font-bold text-white mb-2\">Navigation Menu</h2>\n              <p className=\"text-gray-400\">Drag and drop to reorder menu items. Create a navigation that guides visitors through your website.</p>\n            </div>\n            <DragDropNavigation token={token || ''} />\n          </TabsContent>\n\n          <TabsContent value=\"services\" className=\"space-y-6\">\n            <div className=\"mb-6\">\n              <h2 className=\"text-2xl font-bold text-white mb-2\">Manage Your Services</h2>\n              <p className=\"text-gray-400\">Add, edit, or remove the tuning services you offer. These appear on your website's services section with prices and descriptions.</p>\n            </div>\n            <ServicesManager token={token || ''} />\n          </TabsContent>\n\n          <TabsContent value=\"contact\" className=\"space-y-6\">\n            <div className=\"mb-6\">\n              <h2 className=\"text-2xl font-bold text-white mb-2\">Contact Information</h2>\n              <p className=\"text-gray-400\">Update your business contact details - phone numbers, email, address, and WhatsApp. This information appears on your contact page.</p>\n            </div>\n            <ContactManager token={token || ''} />\n          </TabsContent>\n\n          <TabsContent value=\"vehicles\" className=\"space-y-6\">\n            <div className=\"mb-6\">\n              <h2 className=\"text-2xl font-bold text-white mb-2\">Vehicle Database</h2>\n              <p className=\"text-gray-400\">Manage car specifications and tuning data. Add vehicles with their original power and potential power gains after tuning.</p>\n            </div>\n            <VehicleManager token={token || ''} />\n          </TabsContent>\n\n          <TabsContent value=\"languages\" className=\"space-y-6\">\n            <div className=\"mb-6\">\n              <h2 className=\"text-2xl font-bold text-white mb-2\">Multiple Languages</h2>\n              <p className=\"text-gray-400\">Add translations for your website to serve customers in different languages. Manage text in various languages.</p>\n            </div>\n            <LanguageManager token={token || ''} />\n          </TabsContent>\n\n          <TabsContent value=\"users\" className=\"space-y-6\">\n            <div className=\"mb-6\">\n              <h2 className=\"text-2xl font-bold text-white mb-2\">User Accounts</h2>\n              <p className=\"text-gray-400\">Manage who can access this admin panel. Add or remove admin users and control their permissions.</p>\n            </div>\n            <UserManager token={token || ''} />\n          </TabsContent>\n\n          <TabsContent value=\"site-identity\" className=\"space-y-6\">\n            <div className=\"mb-6\">\n              <h2 className=\"text-2xl font-bold text-white mb-2\">Website Design & Branding</h2>\n              <p className=\"text-gray-400\">Customize your website's appearance - change colors, logo, company name, and overall visual style.</p>\n            </div>\n            <SiteIdentityManager token={token || ''} />\n          </TabsContent>\n\n          <TabsContent value=\"analytics\" className=\"space-y-6\">\n            <div className=\"mb-6\">\n              <h2 className=\"text-2xl font-bold text-white mb-2\">Website Statistics</h2>\n              <p className=\"text-gray-400\">See how visitors use your website - page views, popular services, geographic data, and customer behavior insights.</p>\n            </div>\n            <AnalyticsDashboard token={token || ''} />\n          </TabsContent>\n        </Tabs>\n      </div>\n      \n      {/* Floating Help Panel */}\n      <HelpPanel />\n    </div>\n  );\n}","size_bytes":21883},"client/src/pages/admin-login.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAdmin } from \"@/hooks/useAdmin\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function AdminLogin() {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const { login, isAuthenticated } = useAdmin();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      setLocation(\"/admin\");\n    }\n  }, [isAuthenticated, setLocation]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!username || !password) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter both username and password\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      await login(username, password);\n      toast({\n        title: \"Success\",\n        description: \"Logged in successfully\",\n      });\n      setLocation(\"/admin\");\n    } catch (error: any) {\n      toast({\n        title: \"Login Failed\",\n        description: error.message || \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-900 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md bg-gray-800 border-gray-700\">\n        <CardHeader className=\"text-center\">\n          <div className=\"bg-accent-500/10 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4\">\n            <i className=\"fas fa-shield-alt text-accent-400 text-xl\"></i>\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-white\">\n            Welcome Back!\n          </CardTitle>\n          <p className=\"text-gray-400\">Sign in to manage your chiptuning website</p>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                <i className=\"fas fa-user mr-2\"></i>\n                Username\n              </label>\n              <Input\n                type=\"text\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                className=\"bg-gray-700 border-gray-600 text-white focus:border-accent-400 focus:ring-accent-400\"\n                placeholder=\"Enter your username\"\n                disabled={isLoading}\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                <i className=\"fas fa-lock mr-2\"></i>\n                Password\n              </label>\n              <Input\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                className=\"bg-gray-700 border-gray-600 text-white focus:border-accent-400 focus:ring-accent-400\"\n                placeholder=\"Enter your password\"\n                disabled={isLoading}\n              />\n            </div>\n            <Button\n              type=\"submit\"\n              className=\"w-full bg-accent-500 hover:bg-accent-600\"\n              disabled={isLoading}\n            >\n              {isLoading ? (\n                <>\n                  <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                  Logging in...\n                </>\n              ) : (\n                <>\n                  <i className=\"fas fa-sign-in-alt mr-2\"></i>\n                  Login\n                </>\n              )}\n            </Button>\n          </form>\n          \n          <div className=\"mt-6 p-4 bg-gray-700 rounded-lg\">\n            <p className=\"text-sm text-gray-300 mb-2\">Default credentials:</p>\n            <p className=\"text-xs text-gray-400\">Username: admin</p>\n            <p className=\"text-xs text-gray-400\">Password: admin123</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":4269},"client/src/pages/home.tsx":{"content":"import Navigation from \"@/components/navigation\";\nimport Hero from \"@/components/hero\";\nimport PowerChecker from \"@/components/power-checker\";\nimport Services from \"@/components/services\";\nimport ZBox from \"@/components/zbox\";\nimport WhyChooseUs from \"@/components/why-choose-us\";\nimport Contact from \"@/components/contact\";\nimport Footer from \"@/components/footer\";\n\nexport default function Home() {\n  return (\n    <div className=\"min-h-screen bg-gray-900 text-gray-100\">\n      <Navigation />\n      <main>\n        <Hero />\n        <PowerChecker />\n        <Services />\n        <ZBox />\n        <WhyChooseUs />\n        <Contact />\n      </main>\n      <Footer />\n      \n      {/* WhatsApp Float Button */}\n      <a \n        href=\"https://wa.me/37129242069\"\n        className=\"fixed bottom-6 right-6 bg-green-500 hover:bg-green-600 text-white p-4 rounded-full shadow-lg transition-all duration-300 hover:scale-110 z-50 animate-pulse-gentle\"\n        aria-label=\"Contact us on WhatsApp\"\n      >\n        <i className=\"fab fa-whatsapp text-2xl\"></i>\n      </a>\n    </div>\n  );\n}\n","size_bytes":1073},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/admin/contact-manager.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, Edit, Save, Trash2, Phone, Mail, MapPin, Globe } from \"lucide-react\";\n\ninterface ContactInfo {\n  id: string;\n  type: 'phone' | 'email' | 'address' | 'hours' | 'social';\n  label: string;\n  value: string;\n  icon?: string;\n  order: number;\n  isActive: boolean;\n}\n\ninterface ContactManagerProps {\n  token: string;\n}\n\nexport default function ContactManager({ token }: ContactManagerProps) {\n  const [contacts, setContacts] = useState<ContactInfo[]>([]);\n  const [editingContact, setEditingContact] = useState<ContactInfo | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSaving, setIsSaving] = useState(false);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    fetchContacts();\n  }, []);\n\n  const fetchContacts = async () => {\n    try {\n      const response = await fetch('/api/admin/contact-info', {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setContacts(data.sort((a: ContactInfo, b: ContactInfo) => a.order - b.order));\n      }\n    } catch (error) {\n      console.error('Error fetching contact info:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSave = async (contact: ContactInfo) => {\n    setIsSaving(true);\n    try {\n      const url = contact.id ? `/api/admin/contact-info/${contact.id}` : '/api/admin/contact-info';\n      const method = contact.id ? 'PUT' : 'POST';\n      \n      const response = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(contact),\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Success\",\n          description: \"Contact information saved successfully\",\n        });\n        await fetchContacts();\n        setEditingContact(null);\n      } else {\n        throw new Error('Failed to save contact information');\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save contact information\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const handleDelete = async (id: string) => {\n    if (!confirm('Are you sure you want to delete this contact information?')) return;\n    \n    try {\n      const response = await fetch(`/api/admin/contact-info/${id}`, {\n        method: 'DELETE',\n        headers: { Authorization: `Bearer ${token}` },\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Success\",\n          description: \"Contact information deleted successfully\",\n        });\n        await fetchContacts();\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete contact information\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleNewContact = () => {\n    const maxOrder = contacts.length > 0 ? Math.max(...contacts.map(c => c.order)) : 0;\n    setEditingContact({\n      id: '',\n      type: 'phone',\n      label: '',\n      value: '',\n      order: maxOrder + 1,\n      isActive: true,\n    });\n  };\n\n  const getIcon = (type: string) => {\n    switch (type) {\n      case 'phone': return <Phone className=\"w-4 h-4\" />;\n      case 'email': return <Mail className=\"w-4 h-4\" />;\n      case 'address': return <MapPin className=\"w-4 h-4\" />;\n      case 'social': return <Globe className=\"w-4 h-4\" />;\n      default: return <Phone className=\"w-4 h-4\" />;\n    }\n  };\n\n  if (isLoading) {\n    return <div className=\"flex items-center justify-center p-8\">\n      <div className=\"text-gray-400\">Loading contact information...</div>\n    </div>;\n  }\n\n  if (editingContact) {\n    return (\n      <Card className=\"bg-gray-800 border-gray-700\">\n        <CardHeader>\n          <CardTitle className=\"text-gray-100\">\n            {editingContact.id ? 'Edit Contact Information' : 'Add Contact Information'}\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                Type\n              </label>\n              <select\n                value={editingContact.type}\n                onChange={(e) => setEditingContact({\n                  ...editingContact,\n                  type: e.target.value as ContactInfo['type']\n                })}\n                className=\"w-full bg-gray-700 border border-gray-600 text-white rounded-md px-3 py-2\"\n              >\n                <option value=\"phone\">Phone</option>\n                <option value=\"email\">Email</option>\n                <option value=\"address\">Address</option>\n                <option value=\"hours\">Business Hours</option>\n                <option value=\"social\">Social Media</option>\n              </select>\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                Label\n              </label>\n              <Input\n                value={editingContact.label}\n                onChange={(e) => setEditingContact({\n                  ...editingContact,\n                  label: e.target.value\n                })}\n                className=\"bg-gray-700 border-gray-600 text-white\"\n                placeholder=\"e.g., Main Phone, Support Email\"\n              />\n            </div>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n              Value\n            </label>\n            {editingContact.type === 'address' || editingContact.type === 'hours' ? (\n              <Textarea\n                value={editingContact.value}\n                onChange={(e) => setEditingContact({\n                  ...editingContact,\n                  value: e.target.value\n                })}\n                className=\"bg-gray-700 border-gray-600 text-white\"\n                placeholder=\"Enter the contact information\"\n                rows={3}\n              />\n            ) : (\n              <Input\n                value={editingContact.value}\n                onChange={(e) => setEditingContact({\n                  ...editingContact,\n                  value: e.target.value\n                })}\n                className=\"bg-gray-700 border-gray-600 text-white\"\n                placeholder={\n                  editingContact.type === 'phone' ? '+371 12345678' :\n                  editingContact.type === 'email' ? 'info@chiptuningpro.lv' :\n                  editingContact.type === 'social' ? 'https://facebook.com/chiptuningpro' :\n                  'Contact information'\n                }\n              />\n            )}\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                Display Order\n              </label>\n              <Input\n                type=\"number\"\n                value={editingContact.order}\n                onChange={(e) => setEditingContact({\n                  ...editingContact,\n                  order: parseInt(e.target.value) || 0\n                })}\n                className=\"bg-gray-700 border-gray-600 text-white\"\n              />\n            </div>\n\n            <div className=\"flex items-center gap-2 pt-7\">\n              <input\n                type=\"checkbox\"\n                id=\"contactActive\"\n                checked={editingContact.isActive}\n                onChange={(e) => setEditingContact({\n                  ...editingContact,\n                  isActive: e.target.checked\n                })}\n                className=\"rounded\"\n              />\n              <label htmlFor=\"contactActive\" className=\"text-sm text-gray-300\">\n                Active (visible on website)\n              </label>\n            </div>\n          </div>\n\n          <div className=\"flex gap-2\">\n            <Button\n              onClick={() => handleSave(editingContact)}\n              disabled={isSaving}\n              className=\"bg-accent-500 hover:bg-accent-600\"\n            >\n              <Save className=\"w-4 h-4 mr-2\" />\n              {isSaving ? 'Saving...' : 'Save Contact Info'}\n            </Button>\n            <Button\n              onClick={() => setEditingContact(null)}\n              variant=\"outline\"\n              className=\"border-gray-600\"\n            >\n              Cancel\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold text-gray-100\">Contact Information</h2>\n        <Button onClick={handleNewContact} className=\"bg-accent-500 hover:bg-accent-600\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Add Contact Info\n        </Button>\n      </div>\n\n      <div className=\"grid gap-4\">\n        {contacts.length === 0 ? (\n          <Card className=\"bg-gray-800 border-gray-700\">\n            <CardContent className=\"text-center py-8\">\n              <p className=\"text-gray-400\">No contact information found. Add your first contact method!</p>\n            </CardContent>\n          </Card>\n        ) : (\n          contacts.map((contact) => (\n            <Card key={contact.id} className=\"bg-gray-800 border-gray-700\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex justify-between items-start\">\n                  <div className=\"flex items-start gap-4 flex-1\">\n                    <div className=\"text-accent-400 mt-1\">\n                      {getIcon(contact.type)}\n                    </div>\n                    <div className=\"flex-1\">\n                      <h3 className=\"text-lg font-semibold text-gray-100 mb-1\">\n                        {contact.label}\n                      </h3>\n                      <div className=\"text-gray-300 mb-2\">\n                        {contact.type === 'address' || contact.type === 'hours' ? (\n                          <pre className=\"whitespace-pre-wrap text-sm\">{contact.value}</pre>\n                        ) : (\n                          <span className=\"text-sm\">{contact.value}</span>\n                        )}\n                      </div>\n                      <div className=\"flex items-center gap-4 text-xs text-gray-500\">\n                        <span>Type: {contact.type}</span>\n                        <span>Order: {contact.order}</span>\n                        <span className={contact.isActive ? 'text-green-400' : 'text-red-400'}>\n                          {contact.isActive ? 'Active' : 'Inactive'}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      onClick={() => setEditingContact(contact)}\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"border-gray-600\"\n                    >\n                      <Edit className=\"w-4 h-4\" />\n                    </Button>\n                    <Button\n                      onClick={() => handleDelete(contact.id)}\n                      size=\"sm\"\n                      variant=\"destructive\"\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":11877},"client/src/components/admin/language-manager.tsx":{"content":"import React, { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Trash2, Edit, Plus, Globe, Copy } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface Translation {\n  id: string;\n  key: string;\n  language: string;\n  value: string;\n  section: string;\n  updatedAt: string;\n}\n\ninterface Language {\n  code: string;\n  name: string;\n  nativeName: string;\n  isActive: boolean;\n  isDefault: boolean;\n}\n\ninterface LanguageManagerProps {\n  token: string;\n}\n\nconst LanguageManager: React.FC<LanguageManagerProps> = ({ token }) => {\n  const [selectedLanguage, setSelectedLanguage] = useState('en');\n  const [selectedSection, setSelectedSection] = useState('general');\n  const [isAddTranslationOpen, setIsAddTranslationOpen] = useState(false);\n  const [isAddLanguageOpen, setIsAddLanguageOpen] = useState(false);\n  const [editingTranslation, setEditingTranslation] = useState<Translation | null>(null);\n  const [newTranslation, setNewTranslation] = useState<Partial<Translation>>({\n    language: 'en',\n    section: 'general',\n  });\n  const [newLanguage, setNewLanguage] = useState<Partial<Language>>({\n    isActive: true,\n    isDefault: false,\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Available languages\n  const availableLanguages: Language[] = [\n    { code: 'en', name: 'English', nativeName: 'English', isActive: true, isDefault: true },\n    { code: 'lv', name: 'Latvian', nativeName: 'Latviešu', isActive: true, isDefault: false },\n    { code: 'ru', name: 'Russian', nativeName: 'Русский', isActive: true, isDefault: false },\n    { code: 'de', name: 'German', nativeName: 'Deutsch', isActive: true, isDefault: false },\n    { code: 'fi', name: 'Finnish', nativeName: 'Suomi', isActive: true, isDefault: false },\n  ];\n\n  // Translation sections\n  const sections = [\n    { id: 'general', name: 'General' },\n    { id: 'navigation', name: 'Navigation' },\n    { id: 'hero', name: 'Hero Section' },\n    { id: 'services', name: 'Services' },\n    { id: 'contact', name: 'Contact' },\n    { id: 'footer', name: 'Footer' },\n    { id: 'common', name: 'Common Terms' },\n  ];\n\n  // Default English translations\n  const defaultTranslations: Partial<Translation>[] = [\n    // General\n    { key: 'site.title', value: 'ChipTuning PRO', section: 'general' },\n    { key: 'site.description', value: 'Professional ECU Tuning & Performance Enhancement', section: 'general' },\n    \n    // Navigation\n    { key: 'nav.home', value: 'Home', section: 'navigation' },\n    { key: 'nav.services', value: 'Services', section: 'navigation' },\n    { key: 'nav.power_checker', value: 'Power Checker', section: 'navigation' },\n    { key: 'nav.zbox', value: 'ZBOX Device', section: 'navigation' },\n    { key: 'nav.contact', value: 'Contact', section: 'navigation' },\n    \n    // Hero Section\n    { key: 'hero.title', value: 'ChipTuning PRO', section: 'hero' },\n    { key: 'hero.subtitle', value: 'Professional ECU Tuning & Performance Enhancement', section: 'hero' },\n    { key: 'hero.description', value: 'Unlock your vehicle\\'s true potential with our expert chiptuning services. We provide Stage 1 & Stage 2 tuning, DPF/EGR removal, and professional ZBOX devices for maximum performance gains.', section: 'hero' },\n    { key: 'hero.check_power', value: 'Check Vehicle Power', section: 'hero' },\n    { key: 'hero.our_services', value: 'Our Services', section: 'hero' },\n    \n    // Services\n    { key: 'services.stage1.title', value: 'Stage 1 Chiptuning', section: 'services' },\n    { key: 'services.stage1.description', value: 'Optimize your engine performance with ECU remapping. Increase power and torque while maintaining reliability.', section: 'services' },\n    { key: 'services.stage1.price', value: 'From €299', section: 'services' },\n    { key: 'services.stage2.title', value: 'Stage 2 Chiptuning', section: 'services' },\n    { key: 'services.stage2.description', value: 'Maximum performance gains with advanced tuning requiring hardware modifications.', section: 'services' },\n    { key: 'services.stage2.price', value: 'From €499', section: 'services' },\n    { key: 'services.dpf.title', value: 'DPF/EGR Removal', section: 'services' },\n    { key: 'services.dpf.description', value: 'Remove restrictive emissions components for improved performance and reduced maintenance.', section: 'services' },\n    { key: 'services.dpf.price', value: 'From €399', section: 'services' },\n    { key: 'services.zbox.title', value: 'ZBOX Tuning Device', section: 'services' },\n    { key: 'services.zbox.description', value: 'Professional tuning device with smartphone app control and real-time monitoring.', section: 'services' },\n    { key: 'services.zbox.price', value: '€899', section: 'services' },\n    \n    // Contact\n    { key: 'contact.title', value: 'Contact Us', section: 'contact' },\n    { key: 'contact.phone', value: 'Phone', section: 'contact' },\n    { key: 'contact.email', value: 'Email', section: 'contact' },\n    { key: 'contact.address', value: 'Address', section: 'contact' },\n    { key: 'contact.hours', value: 'Business Hours', section: 'contact' },\n    \n    // Common\n    { key: 'common.power', value: 'Power', section: 'common' },\n    { key: 'common.torque', value: 'Torque', section: 'common' },\n    { key: 'common.original', value: 'Original', section: 'common' },\n    { key: 'common.stage1', value: 'Stage 1', section: 'common' },\n    { key: 'common.stage2', value: 'Stage 2', section: 'common' },\n    { key: 'common.more_info', value: 'More Info', section: 'common' },\n    { key: 'common.contact_us', value: 'Contact Us', section: 'common' },\n    { key: 'common.learn_more', value: 'Learn More', section: 'common' },\n  ];\n\n  // Fetch translations\n  const { data: translations = [], isLoading } = useQuery({\n    queryKey: ['/api/admin/translations'],\n    queryFn: async () => {\n      // For now, return default translations - this would be replaced with actual API call\n      return defaultTranslations.map((t, index) => ({\n        ...t,\n        id: `trans_${index}`,\n        language: selectedLanguage,\n        updatedAt: new Date().toISOString(),\n      })) as Translation[];\n    }\n  });\n\n  const filteredTranslations = translations.filter(t => \n    t.language === selectedLanguage && \n    (selectedSection === 'all' || t.section === selectedSection)\n  );\n\n  const generateTranslation = async (text: string, targetLanguage: string) => {\n    // This would integrate with a translation service like Google Translate\n    // For now, return sample translations\n    const sampleTranslations: Record<string, Record<string, string>> = {\n      'lv': {\n        'ChipTuning PRO': 'ChipTuning PRO',\n        'Professional ECU Tuning & Performance Enhancement': 'Profesionāla ECU virsbūve un veiktspējas uzlabošana',\n        'Home': 'Mājas',\n        'Services': 'Pakalpojumi',\n        'Contact': 'Kontakti',\n        'Power Checker': 'Jaudas pārbaude',\n        'Stage 1 Chiptuning': '1. posma chiptunings',\n        'Stage 2 Chiptuning': '2. posma chiptunings',\n        'DPF/EGR Removal': 'DPF/EGR noņemšana',\n        'ZBOX Tuning Device': 'ZBOX tuning ierīce',\n      },\n      'ru': {\n        'ChipTuning PRO': 'ChipTuning PRO',\n        'Professional ECU Tuning & Performance Enhancement': 'Профессиональная настройка ЭБУ и повышение производительности',\n        'Home': 'Главная',\n        'Services': 'Услуги',\n        'Contact': 'Контакты',\n        'Power Checker': 'Проверка мощности',\n        'Stage 1 Chiptuning': 'Чип-тюнинг 1-й степени',\n        'Stage 2 Chiptuning': 'Чип-тюнинг 2-й степени',\n        'DPF/EGR Removal': 'Удаление DPF/EGR',\n        'ZBOX Tuning Device': 'Тюнинг устройство ZBOX',\n      },\n      'de': {\n        'ChipTuning PRO': 'ChipTuning PRO',\n        'Professional ECU Tuning & Performance Enhancement': 'Professionelles ECU-Tuning & Leistungssteigerung',\n        'Home': 'Startseite',\n        'Services': 'Dienstleistungen',\n        'Contact': 'Kontakt',\n        'Power Checker': 'Leistungsprüfer',\n        'Stage 1 Chiptuning': 'Stage 1 Chiptuning',\n        'Stage 2 Chiptuning': 'Stage 2 Chiptuning',\n        'DPF/EGR Removal': 'DPF/EGR Entfernung',\n        'ZBOX Tuning Device': 'ZBOX Tuning-Gerät',\n      }\n    };\n\n    return sampleTranslations[targetLanguage]?.[text] || text;\n  };\n\n  const TranslationForm = ({ \n    translation, \n    onChange, \n    title \n  }: { \n    translation: Partial<Translation>, \n    onChange: (translation: Partial<Translation>) => void, \n    title: string \n  }) => (\n    <div className=\"space-y-4\">\n      <h3 className=\"text-lg font-semibold text-gray-100\">{title}</h3>\n      \n      <div className=\"grid grid-cols-2 gap-4\">\n        <div>\n          <Label htmlFor=\"key\" className=\"text-gray-300\">Translation Key</Label>\n          <Input\n            id=\"key\"\n            value={translation.key || ''}\n            onChange={(e) => onChange({...translation, key: e.target.value})}\n            className=\"bg-gray-700 border-gray-600 text-gray-100\"\n            placeholder=\"e.g., nav.home\"\n          />\n        </div>\n        \n        <div>\n          <Label htmlFor=\"section\" className=\"text-gray-300\">Section</Label>\n          <Select value={translation.section} onValueChange={(value) => onChange({...translation, section: value})}>\n            <SelectTrigger className=\"bg-gray-700 border-gray-600 text-gray-100\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent className=\"bg-gray-700 border-gray-600\">\n              {sections.map(section => (\n                <SelectItem key={section.id} value={section.id}>{section.name}</SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n      \n      <div>\n        <Label htmlFor=\"language\" className=\"text-gray-300\">Language</Label>\n        <Select value={translation.language} onValueChange={(value) => onChange({...translation, language: value})}>\n          <SelectTrigger className=\"bg-gray-700 border-gray-600 text-gray-100\">\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent className=\"bg-gray-700 border-gray-600\">\n            {availableLanguages.map(lang => (\n              <SelectItem key={lang.code} value={lang.code}>\n                {lang.nativeName} ({lang.code.toUpperCase()})\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n      \n      <div>\n        <Label htmlFor=\"value\" className=\"text-gray-300\">Translation</Label>\n        <Textarea\n          id=\"value\"\n          value={translation.value || ''}\n          onChange={(e) => onChange({...translation, value: e.target.value})}\n          className=\"bg-gray-700 border-gray-600 text-gray-100 min-h-20\"\n          placeholder=\"Enter translation text...\"\n        />\n      </div>\n    </div>\n  );\n\n  if (isLoading) {\n    return (\n      <Card className=\"bg-gray-800 border-gray-700\">\n        <CardContent className=\"p-6\">\n          <div className=\"text-center py-8\">\n            <div className=\"text-gray-400\">Loading translations...</div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"bg-gray-800 border-gray-700\">\n      <CardHeader>\n        <CardTitle className=\"text-gray-100 flex items-center justify-between\">\n          <span className=\"flex items-center\">\n            <Globe className=\"w-5 h-5 mr-2\" />\n            Language & Translation Management\n          </span>\n          <div className=\"flex space-x-2\">\n            <Dialog open={isAddLanguageOpen} onOpenChange={setIsAddLanguageOpen}>\n              <DialogTrigger asChild>\n                <Button variant=\"outline\" className=\"border-gray-600 text-gray-300\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Language\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"bg-gray-800 border-gray-700\">\n                <DialogHeader>\n                  <DialogTitle className=\"text-gray-100\">Add Language</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label className=\"text-gray-300\">Language Code</Label>\n                      <Input \n                        placeholder=\"e.g., es, fr, it\"\n                        className=\"bg-gray-700 border-gray-600 text-gray-100\"\n                        value={newLanguage.code || ''}\n                        onChange={(e) => setNewLanguage({...newLanguage, code: e.target.value})}\n                      />\n                    </div>\n                    <div>\n                      <Label className=\"text-gray-300\">Language Name</Label>\n                      <Input \n                        placeholder=\"e.g., Spanish\"\n                        className=\"bg-gray-700 border-gray-600 text-gray-100\"\n                        value={newLanguage.name || ''}\n                        onChange={(e) => setNewLanguage({...newLanguage, name: e.target.value})}\n                      />\n                    </div>\n                  </div>\n                </div>\n                <div className=\"flex justify-end space-x-2 mt-6\">\n                  <Button variant=\"outline\" onClick={() => setIsAddLanguageOpen(false)}>Cancel</Button>\n                  <Button>Add Language</Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n            \n            <Dialog open={isAddTranslationOpen} onOpenChange={setIsAddTranslationOpen}>\n              <DialogTrigger asChild>\n                <Button className=\"bg-blue-600 hover:bg-blue-700\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Translation\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"bg-gray-800 border-gray-700 max-w-2xl\">\n                <DialogHeader>\n                  <DialogTitle className=\"text-gray-100\">Add Translation</DialogTitle>\n                </DialogHeader>\n                <TranslationForm\n                  translation={newTranslation}\n                  onChange={setNewTranslation}\n                  title=\"\"\n                />\n                <div className=\"flex justify-end space-x-2 mt-6\">\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => setIsAddTranslationOpen(false)}\n                    className=\"border-gray-600 text-gray-300 hover:bg-gray-700\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button className=\"bg-blue-600 hover:bg-blue-700\">\n                    Add Translation\n                  </Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-6\">\n          {/* Language & Section Filters */}\n          <div className=\"flex space-x-4\">\n            <div className=\"flex-1\">\n              <Label className=\"text-gray-300\">Language</Label>\n              <Select value={selectedLanguage} onValueChange={setSelectedLanguage}>\n                <SelectTrigger className=\"bg-gray-700 border-gray-600 text-gray-100\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"bg-gray-700 border-gray-600\">\n                  {availableLanguages.map(lang => (\n                    <SelectItem key={lang.code} value={lang.code}>\n                      {lang.nativeName} ({lang.code.toUpperCase()})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className=\"flex-1\">\n              <Label className=\"text-gray-300\">Section</Label>\n              <Select value={selectedSection} onValueChange={setSelectedSection}>\n                <SelectTrigger className=\"bg-gray-700 border-gray-600 text-gray-100\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"bg-gray-700 border-gray-600\">\n                  <SelectItem value=\"all\">All Sections</SelectItem>\n                  {sections.map(section => (\n                    <SelectItem key={section.id} value={section.id}>{section.name}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className=\"flex items-end\">\n              <Button \n                variant=\"outline\" \n                className=\"border-green-600 text-green-400 hover:bg-green-600 hover:text-white\"\n                onClick={async () => {\n                  const baseTranslations = translations.filter(t => t.language === 'en');\n                  for (const trans of baseTranslations) {\n                    const translated = await generateTranslation(trans.value, selectedLanguage);\n                    toast({\n                      title: 'Translation Generated',\n                      description: `Generated translation for \"${trans.key}\"`\n                    });\n                  }\n                }}\n              >\n                <Copy className=\"w-4 h-4 mr-2\" />\n                Auto-Translate from English\n              </Button>\n            </div>\n          </div>\n\n          {/* Translations List */}\n          <div className=\"space-y-2\">\n            {filteredTranslations.length === 0 ? (\n              <div className=\"text-center py-8 text-gray-400\">\n                No translations found for {selectedLanguage.toUpperCase()} in {selectedSection === 'all' ? 'all sections' : selectedSection}.\n              </div>\n            ) : (\n              filteredTranslations.map((translation: Translation) => (\n                <div key={translation.id} className=\"bg-gray-700 p-4 rounded-lg border border-gray-600\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2 mb-2\">\n                        <code className=\"text-blue-400 text-sm bg-gray-800 px-2 py-1 rounded\">\n                          {translation.key}\n                        </code>\n                        <span className=\"text-xs text-gray-400 bg-gray-800 px-2 py-1 rounded\">\n                          {translation.section}\n                        </span>\n                      </div>\n                      <p className=\"text-gray-100 text-sm leading-relaxed\">\n                        {translation.value}\n                      </p>\n                    </div>\n                    <div className=\"flex space-x-2 ml-4\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => setEditingTranslation(translation)}\n                        className=\"border-gray-600 text-gray-300 hover:bg-gray-600\"\n                      >\n                        <Edit className=\"w-4 h-4\" />\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        className=\"border-red-600 text-red-400 hover:bg-red-600 hover:text-white\"\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n          \n          {/* Quick Stats */}\n          <div className=\"bg-gray-700 p-4 rounded-lg border border-gray-600\">\n            <h3 className=\"text-gray-100 font-semibold mb-2\">Translation Statistics</h3>\n            <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n              {availableLanguages.map(lang => (\n                <div key={lang.code} className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-blue-400\">\n                    {translations.filter(t => t.language === lang.code).length}\n                  </div>\n                  <div className=\"text-xs text-gray-400\">{lang.nativeName}</div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Edit Dialog */}\n        <Dialog open={!!editingTranslation} onOpenChange={() => setEditingTranslation(null)}>\n          <DialogContent className=\"bg-gray-800 border-gray-700 max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle className=\"text-gray-100\">Edit Translation</DialogTitle>\n            </DialogHeader>\n            {editingTranslation && (\n              <TranslationForm\n                translation={editingTranslation}\n                onChange={setEditingTranslation}\n                title=\"\"\n              />\n            )}\n            <div className=\"flex justify-end space-x-2 mt-6\">\n              <Button \n                variant=\"outline\" \n                onClick={() => setEditingTranslation(null)}\n                className=\"border-gray-600 text-gray-300 hover:bg-gray-700\"\n              >\n                Cancel\n              </Button>\n              <Button className=\"bg-blue-600 hover:bg-blue-700\">\n                Update Translation\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default LanguageManager;","size_bytes":22075},"client/src/components/admin/navigation-manager.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, Edit, Save, Trash2, Move, GripVertical } from \"lucide-react\";\n\ninterface NavigationItem {\n  id: string;\n  label: string;\n  url: string;\n  order: number;\n  isActive: boolean;\n}\n\ninterface NavigationManagerProps {\n  token: string;\n}\n\nexport default function NavigationManager({ token }: NavigationManagerProps) {\n  const [items, setItems] = useState<NavigationItem[]>([]);\n  const [editingItem, setEditingItem] = useState<NavigationItem | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSaving, setIsSaving] = useState(false);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    fetchItems();\n  }, []);\n\n  const fetchItems = async () => {\n    try {\n      const response = await fetch('/api/admin/navigation', {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setItems(data.sort((a: NavigationItem, b: NavigationItem) => a.order - b.order));\n      }\n    } catch (error) {\n      console.error('Error fetching navigation items:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSave = async (item: NavigationItem) => {\n    setIsSaving(true);\n    try {\n      const url = item.id ? `/api/admin/navigation/${item.id}` : '/api/admin/navigation';\n      const method = item.id ? 'PUT' : 'POST';\n      \n      const response = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(item),\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Success\",\n          description: \"Navigation item saved successfully\",\n        });\n        await fetchItems();\n        setEditingItem(null);\n      } else {\n        throw new Error('Failed to save navigation item');\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save navigation item\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const handleDelete = async (id: string) => {\n    if (!confirm('Are you sure you want to delete this navigation item?')) return;\n    \n    try {\n      const response = await fetch(`/api/admin/navigation/${id}`, {\n        method: 'DELETE',\n        headers: { Authorization: `Bearer ${token}` },\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Success\",\n          description: \"Navigation item deleted successfully\",\n        });\n        await fetchItems();\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete navigation item\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleNewItem = () => {\n    const maxOrder = items.length > 0 ? Math.max(...items.map(i => i.order)) : 0;\n    setEditingItem({\n      id: '',\n      label: '',\n      url: '',\n      order: maxOrder + 1,\n      isActive: true,\n    });\n  };\n\n  if (isLoading) {\n    return <div className=\"flex items-center justify-center p-8\">\n      <div className=\"text-gray-400\">Loading navigation items...</div>\n    </div>;\n  }\n\n  if (editingItem) {\n    return (\n      <Card className=\"bg-gray-800 border-gray-700\">\n        <CardHeader>\n          <CardTitle className=\"text-gray-100\">\n            {editingItem.id ? 'Edit Navigation Item' : 'Create New Navigation Item'}\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n              Label\n            </label>\n            <Input\n              value={editingItem.label}\n              onChange={(e) => setEditingItem({\n                ...editingItem,\n                label: e.target.value\n              })}\n              className=\"bg-gray-700 border-gray-600 text-white\"\n              placeholder=\"e.g., Home, About, Services\"\n            />\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n              URL\n            </label>\n            <Input\n              value={editingItem.url}\n              onChange={(e) => setEditingItem({\n                ...editingItem,\n                url: e.target.value\n              })}\n              className=\"bg-gray-700 border-gray-600 text-white\"\n              placeholder=\"e.g., /, /about, /services, https://external.com\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n              Order\n            </label>\n            <Input\n              type=\"number\"\n              value={editingItem.order}\n              onChange={(e) => setEditingItem({\n                ...editingItem,\n                order: parseInt(e.target.value) || 0\n              })}\n              className=\"bg-gray-700 border-gray-600 text-white\"\n              placeholder=\"Display order (lower numbers first)\"\n            />\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            <input\n              type=\"checkbox\"\n              id=\"isActive\"\n              checked={editingItem.isActive}\n              onChange={(e) => setEditingItem({\n                ...editingItem,\n                isActive: e.target.checked\n              })}\n              className=\"rounded\"\n            />\n            <label htmlFor=\"isActive\" className=\"text-sm text-gray-300\">\n              Active (visible in navigation)\n            </label>\n          </div>\n\n          <div className=\"flex gap-2\">\n            <Button\n              onClick={() => handleSave(editingItem)}\n              disabled={isSaving}\n              className=\"bg-accent-500 hover:bg-accent-600\"\n            >\n              <Save className=\"w-4 h-4 mr-2\" />\n              {isSaving ? 'Saving...' : 'Save Item'}\n            </Button>\n            <Button\n              onClick={() => setEditingItem(null)}\n              variant=\"outline\"\n              className=\"border-gray-600\"\n            >\n              Cancel\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold text-gray-100\">Navigation Management</h2>\n        <Button onClick={handleNewItem} className=\"bg-accent-500 hover:bg-accent-600\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Add Navigation Item\n        </Button>\n      </div>\n\n      <div className=\"grid gap-4\">\n        {items.length === 0 ? (\n          <Card className=\"bg-gray-800 border-gray-700\">\n            <CardContent className=\"text-center py-8\">\n              <p className=\"text-gray-400\">No navigation items found. Add your first item!</p>\n            </CardContent>\n          </Card>\n        ) : (\n          items.map((item) => (\n            <Card key={item.id} className=\"bg-gray-800 border-gray-700\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex justify-between items-center\">\n                  <div className=\"flex items-center gap-4 flex-1\">\n                    <div className=\"text-gray-500\">\n                      <GripVertical className=\"w-4 h-4\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <h3 className=\"text-lg font-semibold text-gray-100 mb-1\">\n                        {item.label}\n                      </h3>\n                      <p className=\"text-sm text-gray-400 mb-2\">\n                        URL: {item.url}\n                      </p>\n                      <div className=\"flex items-center gap-4 text-xs text-gray-500\">\n                        <span>Order: {item.order}</span>\n                        <span className={item.isActive ? 'text-green-400' : 'text-red-400'}>\n                          {item.isActive ? 'Active' : 'Inactive'}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      onClick={() => setEditingItem(item)}\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"border-gray-600\"\n                    >\n                      <Edit className=\"w-4 h-4\" />\n                    </Button>\n                    <Button\n                      onClick={() => handleDelete(item.id)}\n                      size=\"sm\"\n                      variant=\"destructive\"\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":9058},"client/src/components/admin/page-editor.tsx":{"content":"import { useState, useEffect, useMemo } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, Edit, Save, Trash2 } from \"lucide-react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Label } from \"@/components/ui/label\";\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\n\ninterface PageContent {\n  id: string;\n  pageName: string;\n  title: string;\n  subtitle?: string;\n  content: any; // JSONB content structure\n  isActive: boolean;\n  updatedAt: string;\n}\n\ninterface PageEditorProps {\n  token: string;\n}\n\nexport default function PageEditor({ token }: PageEditorProps) {\n  const [pages, setPages] = useState<PageContent[]>([]);\n  const [editingPage, setEditingPage] = useState<PageContent | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSaving, setIsSaving] = useState(false);\n  const { toast } = useToast();\n\n  // Quill editor configuration\n  const modules = useMemo(() => ({\n    toolbar: [\n      [{ 'header': '1'}, {'header': '2'}, { 'font': [] }],\n      [{size: []}],\n      ['bold', 'italic', 'underline', 'strike', 'blockquote'],\n      [{'list': 'ordered'}, {'list': 'bullet'}, \n       {'indent': '-1'}, {'indent': '+1'}],\n      ['link', 'image', 'video'],\n      ['clean']\n    ],\n  }), []);\n\n  const formats = [\n    'header', 'font', 'size',\n    'bold', 'italic', 'underline', 'strike', 'blockquote',\n    'list', 'bullet', 'indent',\n    'link', 'image', 'video'\n  ];\n\n  useEffect(() => {\n    fetchPages();\n  }, []);\n\n  const fetchPages = async () => {\n    try {\n      const response = await fetch('/api/admin/page-content', {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setPages(data);\n      }\n    } catch (error) {\n      console.error('Error fetching pages:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSave = async (page: PageContent) => {\n    setIsSaving(true);\n    try {\n      const response = await fetch('/api/admin/page-content', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(page),\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Success\",\n          description: \"Page saved successfully\",\n        });\n        await fetchPages();\n        setEditingPage(null);\n      } else {\n        throw new Error('Failed to save page');\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save page\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const handleNewPage = () => {\n    setEditingPage({\n      id: '',\n      pageName: '',\n      title: '',\n      subtitle: '',\n      content: {\n        sections: [],\n        htmlContent: '',\n      },\n      isActive: true,\n      updatedAt: '',\n    });\n  };\n\n  const handleContentChange = (value: string) => {\n    if (editingPage) {\n      setEditingPage({\n        ...editingPage,\n        content: {\n          ...editingPage.content,\n          htmlContent: value,\n        }\n      });\n    }\n  };\n\n  const handleInitDefaultContent = async () => {\n    setIsSaving(true);\n    try {\n      const response = await fetch('/api/admin/init-default-content', {\n        method: 'POST',\n        headers: { \n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}` \n        },\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Success\",\n          description: \"Default page content initialized successfully\",\n        });\n        await fetchPages();\n      } else {\n        throw new Error('Failed to initialize default content');\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to initialize default content\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const predefinedPages = [\n    {\n      pageName: 'hero-section',\n      title: 'Hero Section',\n      description: 'Main homepage hero section with title, subtitle and CTA'\n    },\n    {\n      pageName: 'about-section',\n      title: 'About Section', \n      description: 'About us content and company information'\n    },\n    {\n      pageName: 'services-overview',\n      title: 'Services Overview',\n      description: 'Services section introduction content'\n    },\n    {\n      pageName: 'power-calculator-section',\n      title: 'Power Calculator Section',\n      description: 'Power calculator introduction and description'\n    },\n    {\n      pageName: 'testimonials-section',\n      title: 'Testimonials Section',\n      description: 'Customer testimonials and reviews'\n    },\n    {\n      pageName: 'contact-section',\n      title: 'Contact Section',\n      description: 'Contact form and contact information'\n    },\n    {\n      pageName: 'footer-content',\n      title: 'Footer Content',\n      description: 'Footer links, legal information and company details'\n    }\n  ];\n\n  if (isLoading) {\n    return <div className=\"flex items-center justify-center p-8\">\n      <div className=\"text-gray-400\">Loading pages...</div>\n    </div>;\n  }\n\n  if (editingPage) {\n    return (\n      <Card className=\"bg-gray-800 border-gray-700\">\n        <CardHeader>\n          <CardTitle className=\"text-gray-100\">\n            {editingPage.id ? 'Edit Page' : 'Create New Page'}\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n              Page Name (URL slug)\n            </label>\n            <Input\n              value={editingPage.pageName}\n              onChange={(e) => setEditingPage({\n                ...editingPage,\n                pageName: e.target.value\n              })}\n              className=\"bg-gray-700 border-gray-600 text-white\"\n              placeholder=\"e.g., about-us, services, contact\"\n            />\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n              Page Title\n            </label>\n            <Input\n              value={editingPage.title}\n              onChange={(e) => setEditingPage({\n                ...editingPage,\n                title: e.target.value\n              })}\n              className=\"bg-gray-700 border-gray-600 text-white\"\n              placeholder=\"Page title for SEO\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"subtitle\" className=\"text-gray-300\">Subtitle</Label>\n            <Input\n              id=\"subtitle\"\n              value={editingPage.subtitle || ''}\n              onChange={(e) => setEditingPage({\n                ...editingPage,\n                subtitle: e.target.value\n              })}\n              className=\"bg-gray-700 border-gray-600 text-white\"\n              placeholder=\"Page subtitle\"\n            />\n          </div>\n\n          <div>\n            <Label className=\"text-gray-300 block mb-4\">Visual Content Editor</Label>\n            <div className=\"bg-gray-900 rounded-lg p-4 border border-gray-600\">\n              <ReactQuill\n                theme=\"snow\"\n                value={editingPage.content?.htmlContent || ''}\n                onChange={handleContentChange}\n                modules={modules}\n                formats={formats}\n                style={{\n                  backgroundColor: '#1f2937',\n                  color: 'white',\n                  border: '1px solid #4b5563',\n                  borderRadius: '0.5rem',\n                }}\n                placeholder=\"Create your page content with the visual editor...\"\n              />\n            </div>\n          </div>\n\n          <div className=\"flex gap-2\">\n            <Button\n              onClick={() => handleSave(editingPage)}\n              disabled={isSaving}\n              className=\"bg-accent-500 hover:bg-accent-600\"\n            >\n              <Save className=\"w-4 h-4 mr-2\" />\n              {isSaving ? 'Saving...' : 'Save Page'}\n            </Button>\n            <Button\n              onClick={() => setEditingPage(null)}\n              variant=\"outline\"\n              className=\"border-gray-600\"\n            >\n              Cancel\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold text-gray-100\">Page Management</h2>\n        <div className=\"flex gap-2\">\n          <Button onClick={handleInitDefaultContent} variant=\"outline\" className=\"border-gray-600\">\n            Initialize Default Content\n          </Button>\n          <Button onClick={handleNewPage} className=\"bg-accent-500 hover:bg-accent-600\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Create New Page\n          </Button>\n        </div>\n      </div>\n\n      {/* Quick Templates Section */}\n      <Card className=\"bg-gray-800 border-gray-700\">\n        <CardHeader>\n          <CardTitle className=\"text-gray-100\">Quick Templates</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {predefinedPages.map((template) => (\n              <div key={template.pageName} className=\"p-4 bg-gray-700 rounded-lg\">\n                <h4 className=\"font-semibold text-gray-100 mb-2\">{template.title}</h4>\n                <p className=\"text-sm text-gray-400 mb-3\">{template.description}</p>\n                <Button\n                  size=\"sm\"\n                  onClick={() => {\n                    const existingPage = pages.find(p => p.pageName === template.pageName);\n                    if (existingPage) {\n                      setEditingPage(existingPage);\n                    } else {\n                      setEditingPage({\n                        id: '',\n                        pageName: template.pageName,\n                        title: template.title,\n                        subtitle: '',\n                        content: {\n                          sections: [],\n                          htmlContent: `<h2>${template.title}</h2><p>Start editing this section...</p>`,\n                        },\n                        isActive: true,\n                        updatedAt: '',\n                      });\n                    }\n                  }}\n                  className=\"bg-accent-500 hover:bg-accent-600\"\n                >\n                  {pages.find(p => p.pageName === template.pageName) ? 'Edit' : 'Create'}\n                </Button>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid gap-4\">\n        {pages.length === 0 ? (\n          <Card className=\"bg-gray-800 border-gray-700\">\n            <CardContent className=\"text-center py-8\">\n              <p className=\"text-gray-400\">No pages found. Use the quick templates above to get started!</p>\n            </CardContent>\n          </Card>\n        ) : (\n          pages.map((page) => (\n            <Card key={page.id} className=\"bg-gray-800 border-gray-700\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex justify-between items-start\">\n                  <div className=\"flex-1\">\n                    <h3 className=\"text-lg font-semibold text-gray-100 mb-2\">\n                      {page.title || page.pageName}\n                    </h3>\n                    <p className=\"text-sm text-gray-400 mb-2\">\n                      URL: /{page.pageName}\n                    </p>\n                    {page.metaDescription && (\n                      <p className=\"text-sm text-gray-500 mb-2\">\n                        {page.metaDescription}\n                      </p>\n                    )}\n                    <div className=\"text-xs text-gray-600\">\n                      Status: {page.isActive ? 'Published' : 'Draft'}\n                    </div>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      onClick={() => setEditingPage(page)}\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"border-gray-600\"\n                    >\n                      <Edit className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":12782},"client/src/components/admin/services-manager.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, Edit, Save, Trash2, DollarSign } from \"lucide-react\";\n\ninterface ServiceItem {\n  id: string;\n  name: string;\n  description: string;\n  price: string;\n  features: string[];\n  category: string;\n  order: number;\n  isActive: boolean;\n}\n\ninterface ServicesManagerProps {\n  token: string;\n}\n\nexport default function ServicesManager({ token }: ServicesManagerProps) {\n  const [services, setServices] = useState<ServiceItem[]>([]);\n  const [editingService, setEditingService] = useState<ServiceItem | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSaving, setIsSaving] = useState(false);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    fetchServices();\n  }, []);\n\n  const fetchServices = async () => {\n    try {\n      const response = await fetch('/api/admin/services', {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setServices(data.sort((a: ServiceItem, b: ServiceItem) => a.order - b.order));\n      }\n    } catch (error) {\n      console.error('Error fetching services:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSave = async (service: ServiceItem) => {\n    setIsSaving(true);\n    try {\n      const url = service.id ? `/api/admin/services/${service.id}` : '/api/admin/services';\n      const method = service.id ? 'PUT' : 'POST';\n      \n      const response = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(service),\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Success\",\n          description: \"Service saved successfully\",\n        });\n        await fetchServices();\n        setEditingService(null);\n      } else {\n        throw new Error('Failed to save service');\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save service\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const handleDelete = async (id: string) => {\n    if (!confirm('Are you sure you want to delete this service?')) return;\n    \n    try {\n      const response = await fetch(`/api/admin/services/${id}`, {\n        method: 'DELETE',\n        headers: { Authorization: `Bearer ${token}` },\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Success\",\n          description: \"Service deleted successfully\",\n        });\n        await fetchServices();\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete service\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleNewService = () => {\n    const maxOrder = services.length > 0 ? Math.max(...services.map(s => s.order)) : 0;\n    setEditingService({\n      id: '',\n      name: '',\n      description: '',\n      price: '',\n      features: [],\n      category: 'chiptuning',\n      order: maxOrder + 1,\n      isActive: true,\n    });\n  };\n\n  const updateFeatures = (features: string) => {\n    if (!editingService) return;\n    const featuresArray = features.split('\\n').filter(f => f.trim());\n    setEditingService({ ...editingService, features: featuresArray });\n  };\n\n  if (isLoading) {\n    return <div className=\"flex items-center justify-center p-8\">\n      <div className=\"text-gray-400\">Loading services...</div>\n    </div>;\n  }\n\n  if (editingService) {\n    return (\n      <Card className=\"bg-gray-800 border-gray-700\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"text-gray-100\">\n                {editingService.id ? 'Edit Service' : 'Add New Service'}\n              </CardTitle>\n              <p className=\"text-gray-400 text-sm mt-1\">\n                {editingService.id ? 'Update the details of this service' : 'Create a new service that customers will see on your website'}\n              </p>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"bg-blue-900/20 border-blue-500/30 rounded-lg p-4\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <i className=\"fas fa-info-circle text-blue-400\"></i>\n              <span className=\"font-medium text-blue-300\">Service Tips</span>\n            </div>\n            <div className=\"text-sm text-gray-300 space-y-1\">\n              <p>• Use clear names customers understand (avoid technical jargon)</p>\n              <p>• Include competitive pricing - this shows on your website</p>\n              <p>• List benefits that matter to customers (power gains, fuel savings)</p>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                Service Name *\n              </label>\n              <Input\n                value={editingService.name}\n                onChange={(e) => setEditingService({\n                  ...editingService,\n                  name: e.target.value\n                })}\n                className=\"bg-gray-700 border-gray-600 text-white\"\n                placeholder=\"Stage 1 Chiptuning, DPF Removal, etc.\"\n              />\n              <p className=\"text-xs text-gray-500 mt-1\">This appears as the main title on your website</p>\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                Price *\n              </label>\n              <Input\n                value={editingService.price}\n                onChange={(e) => setEditingService({\n                  ...editingService,\n                  price: e.target.value\n                })}\n                className=\"bg-gray-700 border-gray-600 text-white\"\n                placeholder=\"From €299, Contact for price, etc.\"\n              />\n              <p className=\"text-xs text-gray-500 mt-1\">Shown on service cards - be competitive but fair</p>\n            </div>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n              Category\n            </label>\n            <select\n              value={editingService.category}\n              onChange={(e) => setEditingService({\n                ...editingService,\n                category: e.target.value\n              })}\n              className=\"w-full bg-gray-700 border border-gray-600 text-white rounded-md px-3 py-2\"\n            >\n              <option value=\"chiptuning\">Chiptuning</option>\n              <option value=\"removal\">DPF/EGR Removal</option>\n              <option value=\"device\">ZBOX Device</option>\n              <option value=\"other\">Other</option>\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n              Description\n            </label>\n            <Textarea\n              value={editingService.description}\n              onChange={(e) => setEditingService({\n                ...editingService,\n                description: e.target.value\n              })}\n              className=\"bg-gray-700 border-gray-600 text-white\"\n              placeholder=\"Service description\"\n              rows={4}\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n              Features (one per line)\n            </label>\n            <Textarea\n              value={editingService.features.join('\\n')}\n              onChange={(e) => updateFeatures(e.target.value)}\n              className=\"bg-gray-700 border-gray-600 text-white\"\n              placeholder=\"Feature 1&#10;Feature 2&#10;Feature 3\"\n              rows={6}\n            />\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                Display Order\n              </label>\n              <Input\n                type=\"number\"\n                value={editingService.order}\n                onChange={(e) => setEditingService({\n                  ...editingService,\n                  order: parseInt(e.target.value) || 0\n                })}\n                className=\"bg-gray-700 border-gray-600 text-white\"\n              />\n            </div>\n\n            <div className=\"flex items-center gap-2 pt-7\">\n              <input\n                type=\"checkbox\"\n                id=\"serviceActive\"\n                checked={editingService.isActive}\n                onChange={(e) => setEditingService({\n                  ...editingService,\n                  isActive: e.target.checked\n                })}\n                className=\"rounded\"\n              />\n              <label htmlFor=\"serviceActive\" className=\"text-sm text-gray-300\">\n                Active (visible on website)\n              </label>\n            </div>\n          </div>\n\n          <div className=\"flex gap-2\">\n            <Button\n              onClick={() => handleSave(editingService)}\n              disabled={isSaving}\n              className=\"bg-accent-500 hover:bg-accent-600\"\n            >\n              <Save className=\"w-4 h-4 mr-2\" />\n              {isSaving ? 'Saving...' : 'Save Service'}\n            </Button>\n            <Button\n              onClick={() => setEditingService(null)}\n              variant=\"outline\"\n              className=\"border-gray-600\"\n            >\n              Cancel\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold text-gray-100\">Services Management</h2>\n        <Button onClick={handleNewService} className=\"bg-accent-500 hover:bg-accent-600\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Add New Service\n        </Button>\n      </div>\n\n      <div className=\"grid gap-4\">\n        {services.length === 0 ? (\n          <Card className=\"bg-gray-800 border-gray-700\">\n            <CardContent className=\"text-center py-8\">\n              <p className=\"text-gray-400\">No services found. Add your first service!</p>\n            </CardContent>\n          </Card>\n        ) : (\n          services.map((service) => (\n            <Card key={service.id} className=\"bg-gray-800 border-gray-700\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex justify-between items-start\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-3 mb-2\">\n                      <h3 className=\"text-lg font-semibold text-gray-100\">\n                        {service.name}\n                      </h3>\n                      {service.price && (\n                        <span className=\"bg-accent-500 text-white px-2 py-1 rounded text-sm flex items-center gap-1\">\n                          <DollarSign className=\"w-3 h-3\" />\n                          {service.price}\n                        </span>\n                      )}\n                    </div>\n                    <p className=\"text-sm text-gray-400 mb-3\">\n                      {service.description}\n                    </p>\n                    {service.features.length > 0 && (\n                      <div className=\"mb-3\">\n                        <p className=\"text-xs text-gray-500 mb-1\">Features:</p>\n                        <div className=\"flex flex-wrap gap-1\">\n                          {service.features.slice(0, 3).map((feature, index) => (\n                            <span key={index} className=\"bg-gray-700 text-gray-300 px-2 py-1 rounded-sm text-xs\">\n                              {feature}\n                            </span>\n                          ))}\n                          {service.features.length > 3 && (\n                            <span className=\"text-xs text-gray-500\">+{service.features.length - 3} more</span>\n                          )}\n                        </div>\n                      </div>\n                    )}\n                    <div className=\"flex items-center gap-4 text-xs text-gray-500\">\n                      <span>Category: {service.category}</span>\n                      <span>Order: {service.order}</span>\n                      <span className={service.isActive ? 'text-green-400' : 'text-red-400'}>\n                        {service.isActive ? 'Active' : 'Inactive'}\n                      </span>\n                    </div>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      onClick={() => setEditingService(service)}\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"border-gray-600\"\n                    >\n                      <Edit className=\"w-4 h-4\" />\n                    </Button>\n                    <Button\n                      onClick={() => handleDelete(service.id)}\n                      size=\"sm\"\n                      variant=\"destructive\"\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":13757},"client/src/components/admin/user-manager.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, Edit, Save, Trash2, Shield, User } from \"lucide-react\";\n\ninterface AdminUser {\n  id: string;\n  username: string;\n  isActive: boolean;\n  createdAt: string;\n}\n\ninterface UserManagerProps {\n  token: string;\n}\n\nexport default function UserManager({ token }: UserManagerProps) {\n  const [users, setUsers] = useState<AdminUser[]>([]);\n  const [editingUser, setEditingUser] = useState<{\n    id: string;\n    username: string;\n    password: string;\n    isActive: boolean;\n  } | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSaving, setIsSaving] = useState(false);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  const fetchUsers = async () => {\n    try {\n      const response = await fetch('/api/admin/users', {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setUsers(data);\n      }\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      // For now, we'll show a placeholder since the API isn't implemented yet\n      setUsers([\n        {\n          id: '1',\n          username: 'admin',\n          isActive: true,\n          createdAt: new Date().toISOString()\n        }\n      ]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSave = async (user: typeof editingUser) => {\n    if (!user) return;\n    \n    setIsSaving(true);\n    try {\n      // This would be the API call when implemented\n      toast({\n        title: \"Info\",\n        description: \"User management API is not yet implemented\",\n        variant: \"default\",\n      });\n      setEditingUser(null);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save user\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const handleDelete = async (id: string) => {\n    if (!confirm('Are you sure you want to delete this user?')) return;\n    \n    toast({\n      title: \"Info\",\n      description: \"User deletion API is not yet implemented\",\n    });\n  };\n\n  const handleNewUser = () => {\n    setEditingUser({\n      id: '',\n      username: '',\n      password: '',\n      isActive: true,\n    });\n  };\n\n  if (isLoading) {\n    return <div className=\"flex items-center justify-center p-8\">\n      <div className=\"text-gray-400\">Loading users...</div>\n    </div>;\n  }\n\n  if (editingUser) {\n    return (\n      <Card className=\"bg-gray-800 border-gray-700\">\n        <CardHeader>\n          <CardTitle className=\"text-gray-100\">\n            {editingUser.id ? 'Edit Admin User' : 'Create New Admin User'}\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n              Username\n            </label>\n            <Input\n              value={editingUser.username}\n              onChange={(e) => setEditingUser({\n                ...editingUser,\n                username: e.target.value\n              })}\n              className=\"bg-gray-700 border-gray-600 text-white\"\n              placeholder=\"Enter username\"\n            />\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n              Password\n            </label>\n            <Input\n              type=\"password\"\n              value={editingUser.password}\n              onChange={(e) => setEditingUser({\n                ...editingUser,\n                password: e.target.value\n              })}\n              className=\"bg-gray-700 border-gray-600 text-white\"\n              placeholder={editingUser.id ? \"Leave blank to keep current password\" : \"Enter password\"}\n            />\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            <input\n              type=\"checkbox\"\n              id=\"userActive\"\n              checked={editingUser.isActive}\n              onChange={(e) => setEditingUser({\n                ...editingUser,\n                isActive: e.target.checked\n              })}\n              className=\"rounded\"\n            />\n            <label htmlFor=\"userActive\" className=\"text-sm text-gray-300\">\n              Active (can log in to admin panel)\n            </label>\n          </div>\n\n          <div className=\"flex gap-2\">\n            <Button\n              onClick={() => handleSave(editingUser)}\n              disabled={isSaving}\n              className=\"bg-accent-500 hover:bg-accent-600\"\n            >\n              <Save className=\"w-4 h-4 mr-2\" />\n              {isSaving ? 'Saving...' : 'Save User'}\n            </Button>\n            <Button\n              onClick={() => setEditingUser(null)}\n              variant=\"outline\"\n              className=\"border-gray-600\"\n            >\n              Cancel\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold text-gray-100\">Admin Users</h2>\n        <Button onClick={handleNewUser} className=\"bg-accent-500 hover:bg-accent-600\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Add Admin User\n        </Button>\n      </div>\n\n      <div className=\"grid gap-4\">\n        {users.length === 0 ? (\n          <Card className=\"bg-gray-800 border-gray-700\">\n            <CardContent className=\"text-center py-8\">\n              <p className=\"text-gray-400\">No admin users found.</p>\n            </CardContent>\n          </Card>\n        ) : (\n          users.map((user) => (\n            <Card key={user.id} className=\"bg-gray-800 border-gray-700\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex justify-between items-center\">\n                  <div className=\"flex items-center gap-4 flex-1\">\n                    <div className=\"bg-accent-500 rounded-full p-2\">\n                      <User className=\"w-5 h-5 text-white\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <h3 className=\"text-lg font-semibold text-gray-100 mb-1\">\n                        {user.username}\n                      </h3>\n                      <div className=\"flex items-center gap-4 text-xs text-gray-500\">\n                        <span>Created: {new Date(user.createdAt).toLocaleDateString()}</span>\n                        <span className={user.isActive ? 'text-green-400' : 'text-red-400'}>\n                          <Shield className=\"w-3 h-3 inline mr-1\" />\n                          {user.isActive ? 'Active' : 'Inactive'}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      onClick={() => setEditingUser({\n                        id: user.id,\n                        username: user.username,\n                        password: '',\n                        isActive: user.isActive\n                      })}\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"border-gray-600\"\n                    >\n                      <Edit className=\"w-4 h-4\" />\n                    </Button>\n                    {user.username !== 'admin' && (\n                      <Button\n                        onClick={() => handleDelete(user.id)}\n                        size=\"sm\"\n                        variant=\"destructive\"\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n\n      <Card className=\"bg-gray-700 border-gray-600\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center gap-2 text-amber-400\">\n            <Shield className=\"w-4 h-4\" />\n            <p className=\"text-sm\">\n              <strong>Note:</strong> User management APIs are being developed. \n              Currently showing existing admin user for demonstration.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8542},"client/src/components/admin/vehicle-manager.tsx":{"content":"import React, { useState, useCallback, useMemo } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Trash2, Edit, Plus, Car, Truck, Tractor, Settings } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface Vehicle {\n  id: string;\n  vehicleType: 'car' | 'truck' | 'tractor';\n  brand: string;\n  model: string;\n  generation: string;\n  engine: string;\n  variant: string;\n  originalPower: number;\n  originalTorque: number;\n  stage1Power: number;\n  stage1Torque: number;\n  stage2Power: number;\n  stage2Torque: number;\n}\n\ninterface VehicleManagerProps {\n  token: string;\n}\n\nconst VehicleManager: React.FC<VehicleManagerProps> = ({ token }) => {\n  const [selectedType, setSelectedType] = useState<'car' | 'truck' | 'tractor'>('car');\n  const [selectedBrand, setSelectedBrand] = useState<string>('__all__');\n  const [selectedModel, setSelectedModel] = useState<string>('__all__');\n  const [isAddVehicleOpen, setIsAddVehicleOpen] = useState(false);\n  const [editingVehicle, setEditingVehicle] = useState<Vehicle | null>(null);\n  const [newVehicle, setNewVehicle] = useState<Partial<Vehicle>>({\n    vehicleType: 'car',\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Create authenticated apiRequest function that includes the auth token\n  const authenticatedApiRequest = useCallback(async (\n    method: string,\n    url: string,\n    data?: any\n  ) => {\n    const response = await fetch(url, {\n      method,\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`,\n      },\n      credentials: 'include',\n      body: data ? JSON.stringify(data) : undefined,\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`${response.status}: ${errorText}`);\n    }\n\n    return response;\n  }, [token]);\n\n  const vehicleTypes = [\n    { id: 'car', name: 'Cars', icon: Car },\n    { id: 'truck', name: 'Trucks', icon: Truck },\n    { id: 'tractor', name: 'Tractors', icon: Tractor }\n  ];\n\n  // Fetch brands (use main database)\n  const { data: brands = [], isLoading: brandsLoading } = useQuery<string[]>({\n    queryKey: [`/api/vehicles/brands/${selectedType}`],\n    enabled: !!selectedType,\n  });\n\n  // Fetch models (use main database)\n  const { data: models = [], isLoading: modelsLoading } = useQuery<string[]>({\n    queryKey: [`/api/vehicles/models/${selectedType}/${selectedBrand}`],\n    enabled: !!selectedType && !!selectedBrand && selectedBrand !== '__all__',\n  });\n\n  // Fetch all vehicles for admin management from main database\n  const { data: allVehicles = [], isLoading: vehiclesLoading } = useQuery<Vehicle[]>({\n    queryKey: [`/api/admin/vehicles/${selectedType}`],\n    queryFn: async () => {\n      const response = await fetch(`/api/admin/vehicles/${selectedType}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n        credentials: 'include',\n      });\n      if (!response.ok) {\n        throw new Error(`${response.status}: ${await response.text()}`);\n      }\n      return response.json();\n    },\n  });\n\n  // Filter vehicles based on selected filters\n  const filteredVehicles = useMemo(() => {\n    return allVehicles.filter((vehicle: Vehicle) => {\n      if (vehicle.vehicleType !== selectedType) return false;\n      if (selectedBrand !== '__all__' && vehicle.brand !== selectedBrand) return false;\n      if (selectedModel !== '__all__' && vehicle.model !== selectedModel) return false;\n      return true;\n    });\n  }, [allVehicles, selectedType, selectedBrand, selectedModel]);\n\n  // Add vehicle mutation\n  const addVehicleMutation = useMutation({\n    mutationFn: async (vehicleData: Partial<Vehicle>) => {\n      return await authenticatedApiRequest('POST', '/api/admin/vehicles', vehicleData);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Success',\n        description: 'Vehicle added successfully',\n      });\n      setIsAddVehicleOpen(false);\n      setNewVehicle({ vehicleType: 'car' });\n      queryClient.invalidateQueries({ queryKey: ['/api/vehicles'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/vehicles'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to add vehicle',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Update vehicle mutation\n  const updateVehicleMutation = useMutation({\n    mutationFn: async (vehicleData: Vehicle) => {\n      return await authenticatedApiRequest('PUT', `/api/admin/vehicles/${vehicleData.id}`, vehicleData);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Success',\n        description: 'Vehicle updated successfully',\n      });\n      setEditingVehicle(null);\n      queryClient.invalidateQueries({ queryKey: ['/api/vehicles'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/vehicles'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to update vehicle',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Delete vehicle mutation\n  const deleteVehicleMutation = useMutation({\n    mutationFn: async (vehicleId: string) => {\n      return await authenticatedApiRequest('DELETE', `/api/admin/vehicles/${vehicleId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Success',\n        description: 'Vehicle deleted successfully',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/vehicles'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to delete vehicle',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Memoized VehicleForm to prevent re-renders that cause focus loss\n  const VehicleForm = useMemo(() => ({ \n    vehicle, \n    onChange, \n    title \n  }: { \n    vehicle: Partial<Vehicle>, \n    onChange: (vehicle: Partial<Vehicle>) => void, \n    title: string \n  }) => (\n    <div className=\"space-y-4\">\n      <h3 className=\"text-lg font-semibold text-gray-100\">{title}</h3>\n      \n      <div className=\"grid grid-cols-5 gap-4\">\n        <div>\n          <Label htmlFor=\"vehicleType\" className=\"text-gray-300\">Vehicle Type</Label>\n          <Select value={vehicle.vehicleType} onValueChange={(value) => onChange({...vehicle, vehicleType: value as Vehicle['vehicleType']})}>\n            <SelectTrigger className=\"bg-gray-700 border-gray-600 text-gray-100\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent className=\"bg-gray-700 border-gray-600\">\n              <SelectItem value=\"car\">Car</SelectItem>\n              <SelectItem value=\"truck\">Truck</SelectItem>\n              <SelectItem value=\"tractor\">Tractor</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n        \n        <div>\n          <Label htmlFor=\"brand\" className=\"text-gray-300\">Brand</Label>\n          <Input\n            id=\"brand\"\n            value={vehicle.brand || ''}\n            onChange={(e) => onChange({...vehicle, brand: e.target.value})}\n            className=\"bg-gray-700 border-gray-600 text-gray-100\"\n            placeholder=\"e.g., BMW, Mercedes\"\n          />\n        </div>\n        \n        <div>\n          <Label htmlFor=\"model\" className=\"text-gray-300\">Model</Label>\n          <Input\n            id=\"model\"\n            value={vehicle.model || ''}\n            onChange={(e) => onChange({...vehicle, model: e.target.value})}\n            className=\"bg-gray-700 border-gray-600 text-gray-100\"\n            placeholder=\"e.g., A3, 3 Series\"\n          />\n        </div>\n\n        <div>\n          <Label htmlFor=\"generation\" className=\"text-gray-300\">Generation</Label>\n          <Input\n            id=\"generation\"\n            value={vehicle.generation || ''}\n            onChange={(e) => onChange({...vehicle, generation: e.target.value})}\n            className=\"bg-gray-700 border-gray-600 text-gray-100\"\n            placeholder=\"e.g., 8V (2012-2020)\"\n          />\n        </div>\n\n        <div>\n          <Label htmlFor=\"engine\" className=\"text-gray-300\">Engine</Label>\n          <Input\n            id=\"engine\"\n            value={vehicle.engine || ''}\n            onChange={(e) => onChange({...vehicle, engine: e.target.value})}\n            className=\"bg-gray-700 border-gray-600 text-gray-100\"\n            placeholder=\"e.g., 2.0 TDI\"\n          />\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 gap-4\">\n        <div>\n          <Label htmlFor=\"variant\" className=\"text-gray-300\">Variant</Label>\n          <Input\n            id=\"variant\"\n            value={vehicle.variant || ''}\n            onChange={(e) => onChange({...vehicle, variant: e.target.value})}\n            className=\"bg-gray-700 border-gray-600 text-gray-100\"\n            placeholder=\"e.g., 150hp, 190hp\"\n          />\n        </div>\n      </div>\n      \n      <div className=\"space-y-4\">\n        <h4 className=\"text-md font-semibold text-gray-200\">Original Performance</h4>\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <Label htmlFor=\"originalPower\" className=\"text-gray-300\">Power (HP)</Label>\n            <Input\n              id=\"originalPower\"\n              type=\"number\"\n              value={vehicle.originalPower || ''}\n              onChange={(e) => onChange({...vehicle, originalPower: parseInt(e.target.value) || 0})}\n              className=\"bg-gray-700 border-gray-600 text-gray-100\"\n              placeholder=\"190\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"originalTorque\" className=\"text-gray-300\">Torque (Nm)</Label>\n            <Input\n              id=\"originalTorque\"\n              type=\"number\"\n              value={vehicle.originalTorque || ''}\n              onChange={(e) => onChange({...vehicle, originalTorque: parseInt(e.target.value) || 0})}\n              className=\"bg-gray-700 border-gray-600 text-gray-100\"\n              placeholder=\"400\"\n            />\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"space-y-4\">\n        <h4 className=\"text-md font-semibold text-gray-200\">Stage 1 Performance</h4>\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <Label htmlFor=\"stage1Power\" className=\"text-gray-300\">Power (HP)</Label>\n            <Input\n              id=\"stage1Power\"\n              type=\"number\"\n              value={vehicle.stage1Power || ''}\n              onChange={(e) => onChange({...vehicle, stage1Power: parseInt(e.target.value) || 0})}\n              className=\"bg-gray-700 border-gray-600 text-gray-100\"\n              placeholder=\"220\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"stage1Torque\" className=\"text-gray-300\">Torque (Nm)</Label>\n            <Input\n              id=\"stage1Torque\"\n              type=\"number\"\n              value={vehicle.stage1Torque || ''}\n              onChange={(e) => onChange({...vehicle, stage1Torque: parseInt(e.target.value) || 0})}\n              className=\"bg-gray-700 border-gray-600 text-gray-100\"\n              placeholder=\"450\"\n            />\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"space-y-4\">\n        <h4 className=\"text-md font-semibold text-gray-200\">Stage 2 Performance</h4>\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <Label htmlFor=\"stage2Power\" className=\"text-gray-300\">Power (HP)</Label>\n            <Input\n              id=\"stage2Power\"\n              type=\"number\"\n              value={vehicle.stage2Power || ''}\n              onChange={(e) => onChange({...vehicle, stage2Power: parseInt(e.target.value) || 0})}\n              className=\"bg-gray-700 border-gray-600 text-gray-100\"\n              placeholder=\"250\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"stage2Torque\" className=\"text-gray-300\">Torque (Nm)</Label>\n            <Input\n              id=\"stage2Torque\"\n              type=\"number\"\n              value={vehicle.stage2Torque || ''}\n              onChange={(e) => onChange({...vehicle, stage2Torque: parseInt(e.target.value) || 0})}\n              className=\"bg-gray-700 border-gray-600 text-gray-100\"\n              placeholder=\"500\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  ), []);\n\n  return (\n    <Card className=\"bg-gray-800 border-gray-700\">\n      <CardHeader>\n        <CardTitle className=\"text-gray-100 flex items-center justify-between\">\n          <span className=\"flex items-center\">\n            <Settings className=\"w-5 h-5 mr-2\" />\n            Vehicle Database Management\n          </span>\n          <Dialog open={isAddVehicleOpen} onOpenChange={setIsAddVehicleOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"bg-blue-600 hover:bg-blue-700\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Vehicle\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"bg-gray-800 border-gray-700 max-w-4xl max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle className=\"text-gray-100\">Add Vehicle</DialogTitle>\n              </DialogHeader>\n              <VehicleForm\n                vehicle={newVehicle}\n                onChange={setNewVehicle}\n                title=\"\"\n              />\n              <div className=\"flex justify-end space-x-2 mt-6\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setIsAddVehicleOpen(false)}\n                  className=\"border-gray-600 text-gray-300 hover:bg-gray-700\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  onClick={() => addVehicleMutation.mutate(newVehicle)}\n                  disabled={addVehicleMutation.isPending}\n                  className=\"bg-blue-600 hover:bg-blue-700\"\n                >\n                  {addVehicleMutation.isPending ? 'Adding...' : 'Add Vehicle'}\n                </Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-6\">\n          {/* Vehicle Type Tabs */}\n          <Tabs value={selectedType} onValueChange={(value) => setSelectedType(value as Vehicle['vehicleType'])}>\n            <TabsList className=\"bg-gray-700 border-gray-600\">\n              {vehicleTypes.map((type) => {\n                const IconComponent = type.icon;\n                return (\n                  <TabsTrigger \n                    key={type.id}\n                    value={type.id}\n                    className=\"data-[state=active]:bg-accent-500\"\n                  >\n                    <IconComponent className=\"w-4 h-4 mr-2\" />\n                    {type.name}\n                  </TabsTrigger>\n                );\n              })}\n            </TabsList>\n            \n            {/* Vehicle Browser */}\n            <div className=\"space-y-4 mt-6\">\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div>\n                  <Label className=\"text-gray-300\">Brand</Label>\n                  <Select value={selectedBrand} onValueChange={setSelectedBrand}>\n                    <SelectTrigger className=\"bg-gray-700 border-gray-600 text-gray-100\">\n                      <SelectValue placeholder=\"Select brand\" />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-gray-700 border-gray-600\">\n                      <SelectItem value=\"__all__\">All Brands</SelectItem>\n                      {brands.map((brand: string) => (\n                        <SelectItem key={brand} value={brand}>{brand}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <Label className=\"text-gray-300\">Model</Label>\n                  <Select value={selectedModel} onValueChange={setSelectedModel} disabled={selectedBrand === '__all__'}>\n                    <SelectTrigger className=\"bg-gray-700 border-gray-600 text-gray-100\">\n                      <SelectValue placeholder=\"Select model\" />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-gray-700 border-gray-600\">\n                      <SelectItem value=\"__all__\">All Models</SelectItem>\n                      {models.map((model: string) => (\n                        <SelectItem key={model} value={model}>{model}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <Label className=\"text-gray-300\">Actions</Label>\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        setSelectedBrand('__all__');\n                        setSelectedModel('__all__');\n                      }}\n                      className=\"border-gray-600 text-gray-300 hover:bg-gray-700\"\n                    >\n                      Clear\n                    </Button>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Vehicle Variants Display */}\n              {filteredVehicles.length > 0 && (\n                <div className=\"space-y-2\">\n                  <h3 className=\"text-lg font-semibold text-gray-100\">Available Variants</h3>\n                  <div className=\"grid gap-2\">\n                    {filteredVehicles.map((variant: any) => (\n                      <div key={variant.id} className=\"bg-gray-700 p-4 rounded-lg border border-gray-600\">\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <h4 className=\"text-gray-100 font-semibold\">\n                              {selectedBrand} {selectedModel} {variant.variant}\n                            </h4>\n                            <div className=\"flex space-x-4 text-sm text-gray-400 mt-1\">\n                              <span>Year: {variant.year}</span>\n                              <span>Engine: {variant.engineSize}L</span>\n                              <span>Fuel: {variant.fuelType}</span>\n                            </div>\n                            <div className=\"flex space-x-6 text-sm mt-2\">\n                              <div>\n                                <span className=\"text-gray-300\">Original:</span>\n                                <span className=\"text-blue-400 ml-1\">{variant.originalPower}hp / {variant.originalTorque}Nm</span>\n                              </div>\n                              <div>\n                                <span className=\"text-gray-300\">Stage 1:</span>\n                                <span className=\"text-green-400 ml-1\">{variant.stage1Power}hp / {variant.stage1Torque}Nm</span>\n                              </div>\n                              <div>\n                                <span className=\"text-gray-300\">Stage 2:</span>\n                                <span className=\"text-yellow-400 ml-1\">{variant.stage2Power}hp / {variant.stage2Torque}Nm</span>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"flex space-x-2\">\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => setEditingVehicle(variant)}\n                              className=\"border-gray-600 text-gray-300 hover:bg-gray-600\"\n                            >\n                              <Edit className=\"w-4 h-4\" />\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => deleteVehicleMutation.mutate(variant.id)}\n                              className=\"border-red-600 text-red-400 hover:bg-red-600 hover:text-white\"\n                              disabled={deleteVehicleMutation.isPending}\n                            >\n                              <Trash2 className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n              \n              {/* Loading states */}\n              {(brandsLoading || modelsLoading || vehiclesLoading) && (\n                <div className=\"text-center py-4 text-gray-400\">\n                  Loading vehicle data...\n                </div>\n              )}\n              \n              {/* Empty state */}\n              {!brandsLoading && !modelsLoading && !vehiclesLoading && filteredVehicles.length === 0 && selectedBrand !== '__all__' && selectedModel !== '__all__' && (\n                <div className=\"text-center py-8 text-gray-400\">\n                  No variants found for {selectedBrand} {selectedModel}.\n                  <br />\n                  <Button\n                    className=\"mt-2 bg-blue-600 hover:bg-blue-700\"\n                    onClick={() => {\n                      setNewVehicle({\n                        ...newVehicle,\n                        vehicleType: selectedType,\n                        brand: selectedBrand,\n                        model: selectedModel,\n                      });\n                      setIsAddVehicleOpen(true);\n                    }}\n                  >\n                    Add First Variant\n                  </Button>\n                </div>\n              )}\n            </div>\n          </Tabs>\n        </div>\n\n        {/* Edit Dialog */}\n        <Dialog open={!!editingVehicle} onOpenChange={() => setEditingVehicle(null)}>\n          <DialogContent className=\"bg-gray-800 border-gray-700 max-w-4xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"text-gray-100\">Edit Vehicle</DialogTitle>\n            </DialogHeader>\n            {editingVehicle && (\n              <VehicleForm\n                vehicle={editingVehicle}\n                onChange={(updates) => setEditingVehicle(prev => prev ? {...prev, ...updates} : null)}\n                title=\"\"\n              />\n            )}\n            <div className=\"flex justify-end space-x-2 mt-6\">\n              <Button \n                variant=\"outline\" \n                onClick={() => setEditingVehicle(null)}\n                className=\"border-gray-600 text-gray-300 hover:bg-gray-700\"\n              >\n                Cancel\n              </Button>\n              <Button \n                onClick={() => editingVehicle && updateVehicleMutation.mutate(editingVehicle)}\n                disabled={updateVehicleMutation.isPending}\n                className=\"bg-blue-600 hover:bg-blue-700\"\n              >\n                {updateVehicleMutation.isPending ? 'Updating...' : 'Update Vehicle'}\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default VehicleManager;","size_bytes":23808},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }","size_bytes":1876},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }","size_bytes":359},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }","size_bytes":709},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }","size_bytes":1882},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }","size_bytes":771},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border border-slate-200 bg-white px-3 py-1.5 text-sm text-slate-950 shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 dark:border-slate-800 dark:bg-slate-950 dark:text-slate-50\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }","size_bytes":1223},"client/src/components/admin/site-identity-manager.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport type { SiteIdentity } from \"@shared/schema\";\nimport type { UploadResult } from \"@uppy/core\";\n\ninterface SiteIdentityManagerProps {\n  token: string;\n}\n\nexport default function SiteIdentityManager({ token }: SiteIdentityManagerProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const { data: siteIdentity, isLoading } = useQuery<SiteIdentity>({\n    queryKey: ['/api/admin/site-identity'],\n    queryFn: async () => {\n      const response = await fetch('/api/admin/site-identity', {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch site identity');\n      }\n      return response.json();\n    },\n  });\n\n  const [formData, setFormData] = useState<Partial<SiteIdentity>>({\n    companyName: '',\n    tagline: '',\n    heroTitle: '',\n    heroSubtitle: '',\n    logoUrl: '',\n    faviconUrl: '',\n    heroImageUrl: '',\n    primaryColor: '#3b82f6',\n    secondaryColor: '#1e40af',\n    accentColor: '#f59e0b',\n    backgroundColor: '#000000',\n    textColor: '#ffffff',\n  });\n\n  // Update form data when site identity loads\n  useEffect(() => {\n    if (siteIdentity) {\n      setFormData({\n        companyName: siteIdentity.companyName || '',\n        tagline: siteIdentity.tagline || '',\n        heroTitle: siteIdentity.heroTitle || '',\n        heroSubtitle: siteIdentity.heroSubtitle || '',\n        logoUrl: siteIdentity.logoUrl || '',\n        faviconUrl: siteIdentity.faviconUrl || '',\n        heroImageUrl: siteIdentity.heroImageUrl || '',\n        primaryColor: siteIdentity.primaryColor || '#3b82f6',\n        secondaryColor: siteIdentity.secondaryColor || '#1e40af',\n        accentColor: siteIdentity.accentColor || '#f59e0b',\n        backgroundColor: siteIdentity.backgroundColor || '#000000',\n        textColor: siteIdentity.textColor || '#ffffff',\n      });\n    }\n  }, [siteIdentity]);\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: Partial<SiteIdentity>) => {\n      const response = await apiRequest('POST', '/api/admin/site-identity', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/site-identity'] });\n      toast({\n        title: \"Success\",\n        description: \"Site identity updated successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update site identity\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    updateMutation.mutate(formData);\n  };\n\n  const handleImageUpload = async (imageType: 'logo' | 'favicon' | 'heroImage') => {\n    try {\n      const response = await fetch('/api/objects/upload', { method: 'POST' });\n      const data = await response.json();\n      return {\n        method: 'PUT' as const,\n        url: data.uploadURL,\n      };\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to get upload URL\",\n        variant: \"destructive\",\n      });\n      throw error;\n    }\n  };\n\n  const handleImageComplete = async (result: UploadResult<Record<string, unknown>, Record<string, unknown>>, imageType: 'logo' | 'favicon' | 'heroImage') => {\n    if (result.successful && result.successful.length > 0) {\n      const uploadedFile = result.successful[0];\n      const imageURL = uploadedFile.uploadURL;\n\n      try {\n        const response = await fetch('/api/site-images', {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ imageURL, imageType }),\n        });\n\n        const data = await response.json();\n        const fieldMap = {\n          logo: 'logoUrl',\n          favicon: 'faviconUrl',\n          heroImage: 'heroImageUrl',\n        };\n        \n        setFormData(prev => ({\n          ...prev,\n          [fieldMap[imageType]]: data.objectPath,\n        }));\n\n        toast({\n          title: \"Success\",\n          description: `${imageType} uploaded successfully`,\n        });\n      } catch (error) {\n        toast({\n          title: \"Error\",\n          description: `Failed to process ${imageType} upload`,\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const handleInputChange = (field: keyof SiteIdentity, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"text-center\">\n          <i className=\"fas fa-spinner fa-spin text-4xl text-accent-500 mb-4\"></i>\n          <p className=\"text-gray-400\">Loading site identity...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-100\">Site Identity</h2>\n          <p className=\"text-gray-400\">Customize your website's branding and visual identity</p>\n        </div>\n        <Button \n          onClick={handleSubmit}\n          disabled={updateMutation.isPending}\n          className=\"bg-accent-500 hover:bg-accent-600\"\n        >\n          {updateMutation.isPending ? (\n            <>\n              <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n              Saving...\n            </>\n          ) : (\n            <>\n              <i className=\"fas fa-save mr-2\"></i>\n              Save Changes\n            </>\n          )}\n        </Button>\n      </div>\n\n      <Tabs defaultValue=\"branding\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"branding\">Branding</TabsTrigger>\n          <TabsTrigger value=\"colors\">Colors</TabsTrigger>\n          <TabsTrigger value=\"content\">Content</TabsTrigger>\n          <TabsTrigger value=\"images\">Images</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"branding\" className=\"space-y-6\">\n          <Card className=\"bg-gray-800 border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"text-gray-100\">Brand Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"companyName\" className=\"text-gray-300\">Company Name</Label>\n                <Input\n                  id=\"companyName\"\n                  value={formData.companyName || ''}\n                  onChange={(e) => handleInputChange('companyName', e.target.value)}\n                  placeholder=\"ChipTuning PRO\"\n                  className=\"bg-gray-700 border-gray-600 text-white\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"tagline\" className=\"text-gray-300\">Tagline</Label>\n                <Input\n                  id=\"tagline\"\n                  value={formData.tagline || ''}\n                  onChange={(e) => handleInputChange('tagline', e.target.value)}\n                  placeholder=\"Professional ECU Tuning Services\"\n                  className=\"bg-gray-700 border-gray-600 text-white\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"colors\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card className=\"bg-gray-800 border-gray-700\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-100 flex items-center gap-2\">\n                  <i className=\"fas fa-palette text-accent-500\"></i>\n                  Color Palette\n                </CardTitle>\n                <p className=\"text-gray-400 text-sm\">Define your brand colors - these will be applied throughout your website</p>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 gap-4\">\n                  <div>\n                    <Label className=\"text-gray-300\">Primary Color (Buttons, Links)</Label>\n                    <div className=\"flex items-center gap-2 mt-1\">\n                      <Input\n                        type=\"color\"\n                        value={formData.primaryColor || '#3b82f6'}\n                        onChange={(e) => handleInputChange('primaryColor', e.target.value)}\n                        className=\"w-16 h-10 p-1 bg-gray-700 border-gray-600\"\n                      />\n                      <Input\n                        type=\"text\"\n                        value={formData.primaryColor || '#3b82f6'}\n                        onChange={(e) => handleInputChange('primaryColor', e.target.value)}\n                        className=\"bg-gray-700 border-gray-600 text-white\"\n                        placeholder=\"#3b82f6\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <Label className=\"text-gray-300\">Secondary Color (Secondary Buttons)</Label>\n                    <div className=\"flex items-center gap-2 mt-1\">\n                      <Input\n                        type=\"color\"\n                        value={formData.secondaryColor || '#1e40af'}\n                        onChange={(e) => handleInputChange('secondaryColor', e.target.value)}\n                        className=\"w-16 h-10 p-1 bg-gray-700 border-gray-600\"\n                      />\n                      <Input\n                        type=\"text\"\n                        value={formData.secondaryColor || '#1e40af'}\n                        onChange={(e) => handleInputChange('secondaryColor', e.target.value)}\n                        className=\"bg-gray-700 border-gray-600 text-white\"\n                        placeholder=\"#1e40af\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <Label className=\"text-gray-300\">Accent Color (Highlights, Icons)</Label>\n                    <div className=\"flex items-center gap-2 mt-1\">\n                      <Input\n                        type=\"color\"\n                        value={formData.accentColor || '#f59e0b'}\n                        onChange={(e) => handleInputChange('accentColor', e.target.value)}\n                        className=\"w-16 h-10 p-1 bg-gray-700 border-gray-600\"\n                      />\n                      <Input\n                        type=\"text\"\n                        value={formData.accentColor || '#f59e0b'}\n                        onChange={(e) => handleInputChange('accentColor', e.target.value)}\n                        className=\"bg-gray-700 border-gray-600 text-white\"\n                        placeholder=\"#f59e0b\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <Label className=\"text-gray-300\">Background Color</Label>\n                    <div className=\"flex items-center gap-2 mt-1\">\n                      <Input\n                        type=\"color\"\n                        value={formData.backgroundColor || '#000000'}\n                        onChange={(e) => handleInputChange('backgroundColor', e.target.value)}\n                        className=\"w-16 h-10 p-1 bg-gray-700 border-gray-600\"\n                      />\n                      <Input\n                        type=\"text\"\n                        value={formData.backgroundColor || '#000000'}\n                        onChange={(e) => handleInputChange('backgroundColor', e.target.value)}\n                        className=\"bg-gray-700 border-gray-600 text-white\"\n                        placeholder=\"#000000\"\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label className=\"text-gray-300\">Text Color</Label>\n                    <div className=\"flex items-center gap-2 mt-1\">\n                      <Input\n                        type=\"color\"\n                        value={formData.textColor || '#ffffff'}\n                        onChange={(e) => handleInputChange('textColor', e.target.value)}\n                        className=\"w-16 h-10 p-1 bg-gray-700 border-gray-600\"\n                      />\n                      <Input\n                        type=\"text\"\n                        value={formData.textColor || '#ffffff'}\n                        onChange={(e) => handleInputChange('textColor', e.target.value)}\n                        className=\"bg-gray-700 border-gray-600 text-white\"\n                        placeholder=\"#ffffff\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Live Color Preview */}\n            <Card className=\"bg-gray-800 border-gray-700\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-100 flex items-center gap-2\">\n                  <i className=\"fas fa-eye text-accent-500\"></i>\n                  Live Preview\n                </CardTitle>\n                <p className=\"text-gray-400 text-sm\">See how your colors will look on your website</p>\n              </CardHeader>\n              <CardContent>\n                <div \n                  className=\"p-6 rounded-lg space-y-4\"\n                  style={{ \n                    backgroundColor: formData.backgroundColor || '#000000',\n                    color: formData.textColor || '#ffffff'\n                  }}\n                >\n                  <h3 className=\"text-xl font-bold\">\n                    {formData.companyName || 'ChipTuning PRO'}\n                  </h3>\n                  <p className=\"text-sm opacity-80\">\n                    Your website will use these colors throughout\n                  </p>\n                  \n                  <div className=\"flex gap-3 flex-wrap\">\n                    <button \n                      className=\"px-4 py-2 rounded-lg font-semibold text-white\"\n                      style={{ backgroundColor: formData.primaryColor || '#3b82f6' }}\n                    >\n                      Primary Button\n                    </button>\n                    <button \n                      className=\"px-4 py-2 rounded-lg font-semibold text-white\"\n                      style={{ backgroundColor: formData.secondaryColor || '#1e40af' }}\n                    >\n                      Secondary Button\n                    </button>\n                  </div>\n                  \n                  <div className=\"flex items-center gap-2\">\n                    <i \n                      className=\"fas fa-star\"\n                      style={{ color: formData.accentColor || '#f59e0b' }}\n                    ></i>\n                    <span className=\"text-sm\">\n                      Accent color for icons and highlights\n                    </span>\n                  </div>\n\n                  <div className=\"mt-4 p-3 rounded border\" style={{ \n                    borderColor: formData.accentColor || '#f59e0b',\n                    backgroundColor: `${formData.accentColor || '#f59e0b'}10`\n                  }}>\n                    <p className=\"text-sm\">Sample content with accent border</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"content\" className=\"space-y-6\">\n          <Card className=\"bg-gray-800 border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"text-gray-100\">Hero Section Content</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"heroTitle\" className=\"text-gray-300\">Hero Title</Label>\n                <Input\n                  id=\"heroTitle\"\n                  value={formData.heroTitle || ''}\n                  onChange={(e) => handleInputChange('heroTitle', e.target.value)}\n                  placeholder=\"Professional ECU Tuning\"\n                  className=\"bg-gray-700 border-gray-600 text-white\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"heroSubtitle\" className=\"text-gray-300\">Hero Subtitle</Label>\n                <Textarea\n                  id=\"heroSubtitle\"\n                  value={formData.heroSubtitle || ''}\n                  onChange={(e) => handleInputChange('heroSubtitle', e.target.value)}\n                  placeholder=\"Unlock your vehicle's true potential with our professional ECU tuning services...\"\n                  rows={3}\n                  className=\"bg-gray-700 border-gray-600 text-white\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"images\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Logo Upload */}\n            <Card className=\"bg-gray-800 border-gray-700\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-100 flex items-center gap-2\">\n                  <i className=\"fas fa-image text-accent-500\"></i>\n                  Logo\n                </CardTitle>\n                <p className=\"text-gray-400 text-sm\">Your main company logo (recommended: PNG format, transparent background)</p>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {formData.logoUrl && (\n                  <div className=\"p-4 bg-gray-700 rounded-lg\">\n                    <p className=\"text-sm text-gray-300 mb-2\">Current Logo:</p>\n                    <img \n                      src={formData.logoUrl} \n                      alt=\"Current Logo\" \n                      className=\"max-h-16 max-w-full object-contain bg-white/10 rounded p-2\"\n                    />\n                  </div>\n                )}\n                <div className=\"flex gap-3\">\n                  <ObjectUploader\n                    maxNumberOfFiles={1}\n                    maxFileSize={5242880} // 5MB\n                    onGetUploadParameters={() => handleImageUpload('logo')}\n                    onComplete={(result) => handleImageComplete(result, 'logo')}\n                    buttonClassName=\"bg-accent-500 hover:bg-accent-600\"\n                  >\n                    <i className=\"fas fa-upload mr-2\"></i>\n                    Upload Logo\n                  </ObjectUploader>\n                  <Input\n                    value={formData.logoUrl || ''}\n                    onChange={(e) => handleInputChange('logoUrl', e.target.value)}\n                    placeholder=\"/objects/logo.png or URL\"\n                    className=\"bg-gray-700 border-gray-600 text-white\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Favicon Upload */}\n            <Card className=\"bg-gray-800 border-gray-700\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-100 flex items-center gap-2\">\n                  <i className=\"fas fa-star text-accent-500\"></i>\n                  Favicon\n                </CardTitle>\n                <p className=\"text-gray-400 text-sm\">Small icon shown in browser tabs (recommended: 32x32 ICO or PNG)</p>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {formData.faviconUrl && (\n                  <div className=\"p-4 bg-gray-700 rounded-lg\">\n                    <p className=\"text-sm text-gray-300 mb-2\">Current Favicon:</p>\n                    <img \n                      src={formData.faviconUrl} \n                      alt=\"Current Favicon\" \n                      className=\"w-8 h-8 object-contain bg-white/10 rounded\"\n                    />\n                  </div>\n                )}\n                <div className=\"flex gap-3\">\n                  <ObjectUploader\n                    maxNumberOfFiles={1}\n                    maxFileSize={1048576} // 1MB\n                    onGetUploadParameters={() => handleImageUpload('favicon')}\n                    onComplete={(result) => handleImageComplete(result, 'favicon')}\n                    buttonClassName=\"bg-accent-500 hover:bg-accent-600\"\n                  >\n                    <i className=\"fas fa-upload mr-2\"></i>\n                    Upload Favicon\n                  </ObjectUploader>\n                  <Input\n                    value={formData.faviconUrl || ''}\n                    onChange={(e) => handleInputChange('faviconUrl', e.target.value)}\n                    placeholder=\"/objects/favicon.ico or URL\"\n                    className=\"bg-gray-700 border-gray-600 text-white\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Hero Image Upload */}\n            <Card className=\"bg-gray-800 border-gray-700 lg:col-span-2\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-100 flex items-center gap-2\">\n                  <i className=\"fas fa-camera text-accent-500\"></i>\n                  Hero Background Image\n                </CardTitle>\n                <p className=\"text-gray-400 text-sm\">Large background image for your homepage hero section (recommended: 1920x1080 JPG)</p>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {formData.heroImageUrl && (\n                  <div className=\"p-4 bg-gray-700 rounded-lg\">\n                    <p className=\"text-sm text-gray-300 mb-2\">Current Hero Image:</p>\n                    <img \n                      src={formData.heroImageUrl} \n                      alt=\"Current Hero Image\" \n                      className=\"max-h-48 max-w-full object-cover rounded bg-gray-600\"\n                    />\n                  </div>\n                )}\n                <div className=\"flex gap-3\">\n                  <ObjectUploader\n                    maxNumberOfFiles={1}\n                    maxFileSize={10485760} // 10MB\n                    onGetUploadParameters={() => handleImageUpload('heroImage')}\n                    onComplete={(result) => handleImageComplete(result, 'heroImage')}\n                    buttonClassName=\"bg-accent-500 hover:bg-accent-600\"\n                  >\n                    <i className=\"fas fa-upload mr-2\"></i>\n                    Upload Hero Image\n                  </ObjectUploader>\n                  <Input\n                    value={formData.heroImageUrl || ''}\n                    onChange={(e) => handleInputChange('heroImageUrl', e.target.value)}\n                    placeholder=\"/objects/hero-bg.jpg or URL\"\n                    className=\"bg-gray-700 border-gray-600 text-white flex-1\"\n                  />\n                </div>\n                \n                <div className=\"bg-blue-900/20 border border-blue-500/30 p-4 rounded-lg\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <i className=\"fas fa-info-circle text-blue-400\"></i>\n                    <span className=\"font-medium text-blue-300\">Image Upload Tips</span>\n                  </div>\n                  <div className=\"text-sm text-gray-300 space-y-1\">\n                    <p>• <strong>Logo:</strong> Transparent PNG, 200x80px or similar ratio</p>\n                    <p>• <strong>Favicon:</strong> Square ICO or PNG, 32x32px or 16x16px</p>\n                    <p>• <strong>Hero Image:</strong> High-quality JPG, 1920x1080px for best results</p>\n                    <p>• Images are stored securely and optimized for web display</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":24182},"client/src/hooks/useAnalytics.ts":{"content":"import { useEffect, useState } from 'react';\nimport { useLocation } from 'wouter';\n\n// Generate a session ID that persists during the user's session\nfunction generateSessionId(): string {\n  const sessionId = sessionStorage.getItem('analytics_session_id');\n  if (sessionId) {\n    return sessionId;\n  }\n  \n  const newSessionId = 'session_' + Math.random().toString(36).substr(2, 9) + '_' + Date.now();\n  sessionStorage.setItem('analytics_session_id', newSessionId);\n  return newSessionId;\n}\n\n// Get geolocation using browser API\nasync function getGeolocation(): Promise<{ country?: string; city?: string }> {\n  return new Promise((resolve) => {\n    try {\n      // Try to get location from free IP geolocation service with timeout\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => {\n        controller.abort();\n        resolve({}); // Resolve with empty object on timeout\n      }, 3000); // 3 second timeout\n      \n      fetch('https://ipapi.co/json/', {\n        signal: controller.signal,\n        headers: {\n          'Accept': 'application/json',\n        }\n      })\n      .then(async (response) => {\n        clearTimeout(timeoutId);\n        if (response.ok) {\n          const data = await response.json();\n          resolve({\n            country: data.country_name || 'Unknown',\n            city: data.city || 'Unknown'\n          });\n        } else {\n          resolve({});\n        }\n      })\n      .catch(() => {\n        clearTimeout(timeoutId);\n        resolve({}); // Always resolve, never reject\n      });\n    } catch (error) {\n      resolve({}); // Always resolve, never reject\n    }\n  });\n}\n\nexport function useAnalytics() {\n  const [location] = useLocation();\n  const [sessionId] = useState(() => generateSessionId());\n\n  // Track page views - only with GDPR consent\n  useEffect(() => {\n    const trackPageView = async () => {\n      // Check GDPR consent\n      const consent = localStorage.getItem('cookie-consent');\n      let canTrack = false;\n      \n      if (consent) {\n        try {\n          const settings = JSON.parse(consent);\n          canTrack = settings.analytics === true;\n        } catch (error) {\n          // Invalid consent data\n          return;\n        }\n      }\n\n      if (!canTrack) {\n        return; // Don't track without consent\n      }\n\n      try {\n        const geo = await getGeolocation();\n        \n        await fetch('/api/analytics/page-view', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            pageName: location,\n            sessionId,\n            ...geo\n          })\n        });\n      } catch (error) {\n        // Page view tracking failed silently - optional feature\n      }\n    };\n\n    trackPageView();\n  }, [location, sessionId]);\n\n  // Track click events - only with GDPR consent\n  const trackClick = async (element: string, elementText?: string, targetUrl?: string) => {\n    // Check GDPR consent\n    const consent = localStorage.getItem('cookie-consent');\n    let canTrack = false;\n    \n    if (consent) {\n      try {\n        const settings = JSON.parse(consent);\n        canTrack = settings.analytics === true;\n      } catch (error) {\n        // Invalid consent data for click tracking\n        return;\n      }\n    }\n\n    if (!canTrack) {\n      return; // Don't track without consent\n    }\n\n    try {\n      await fetch('/api/analytics/click', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          element,\n          pageName: location,\n          elementText,\n          targetUrl,\n          sessionId\n        })\n      });\n    } catch (error) {\n      // Click tracking failed silently - optional feature\n    }\n  };\n\n  // Track vehicle selections - only with GDPR consent\n  const trackVehicleSelection = async (\n    vehicleType: string,\n    brand: string,\n    model?: string,\n    generation?: string,\n    engine?: string,\n    variant?: string\n  ) => {\n    // Check GDPR consent\n    const consent = localStorage.getItem('cookie-consent');\n    let canTrack = false;\n    \n    if (consent) {\n      try {\n        const settings = JSON.parse(consent);\n        canTrack = settings.analytics === true;\n      } catch (error) {\n        // Invalid consent data for vehicle selection tracking\n        return;\n      }\n    }\n\n    if (!canTrack) {\n      return; // Don't track without consent\n    }\n\n    try {\n      const geo = await getGeolocation();\n      \n      await fetch('/api/analytics/vehicle-selection', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          vehicleType,\n          brand,\n          model,\n          generation,\n          engine,\n          variant,\n          sessionId,\n          ...geo\n        })\n      });\n    } catch (error) {\n      // Vehicle selection tracking failed silently - optional feature\n    }\n  };\n\n  return {\n    trackClick,\n    trackVehicleSelection\n  };\n}","size_bytes":5041},"client/src/hooks/useGDPR.ts":{"content":"import { useState, useEffect } from 'react';\n\ninterface CookiePreferences {\n  necessary: boolean;\n  analytics: boolean;\n  marketing: boolean;\n  functional: boolean;\n}\n\ninterface GDPRState {\n  showBanner: boolean;\n  preferences: CookiePreferences | null;\n  consentDate: string | null;\n}\n\nexport function useGDPR() {\n  const [state, setState] = useState<GDPRState>({\n    showBanner: false,\n    preferences: null,\n    consentDate: null,\n  });\n\n  useEffect(() => {\n    // Check for existing consent\n    const consent = localStorage.getItem('cookie-consent');\n    const consentDate = localStorage.getItem('cookie-consent-date');\n    \n    if (consent && consentDate) {\n      try {\n        const preferences = JSON.parse(consent);\n        setState({\n          showBanner: false,\n          preferences,\n          consentDate,\n        });\n      } catch (error) {\n        // Invalid stored consent data, using default\n        setState(prev => ({ ...prev, showBanner: true }));\n      }\n    } else {\n      // Show banner if no consent found\n      setState(prev => ({ ...prev, showBanner: true }));\n    }\n  }, []);\n\n  const updateConsent = (preferences: CookiePreferences) => {\n    const consentDate = new Date().toISOString();\n    \n    localStorage.setItem('cookie-consent', JSON.stringify(preferences));\n    localStorage.setItem('cookie-consent-date', consentDate);\n    \n    setState({\n      showBanner: false,\n      preferences,\n      consentDate,\n    });\n\n    // Set functional cookies if allowed\n    if (preferences.functional) {\n      // Store language preference and other functional settings\n      const currentLang = localStorage.getItem('preferred-language');\n      if (currentLang) {\n        document.cookie = `language_preference=${currentLang}; path=/; max-age=${365 * 24 * 60 * 60}; SameSite=Lax`;\n      }\n    }\n  };\n\n  const withdrawConsent = () => {\n    const preferences: CookiePreferences = {\n      necessary: true, // Always required\n      analytics: false,\n      marketing: false,\n      functional: false,\n    };\n    \n    const consentDate = new Date().toISOString();\n    \n    localStorage.setItem('cookie-consent', JSON.stringify(preferences));\n    localStorage.setItem('cookie-consent-date', consentDate);\n    \n    setState({\n      showBanner: false,\n      preferences,\n      consentDate,\n    });\n\n    // Clear non-essential cookies\n    clearNonEssentialCookies();\n  };\n\n  const clearNonEssentialCookies = () => {\n    // Clear analytics cookies\n    const analyticsKeys = ['analytics_session_id', 'geolocation-tracked'];\n    analyticsKeys.forEach(key => {\n      sessionStorage.removeItem(key);\n    });\n\n    // Clear functional cookies from document.cookie\n    const cookies = document.cookie.split(';');\n    cookies.forEach(cookie => {\n      const [name] = cookie.trim().split('=');\n      if (name && !['necessary_cookie_name'].includes(name)) {\n        document.cookie = `${name}=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT; SameSite=Lax`;\n      }\n    });\n  };\n\n  const canUseAnalytics = (): boolean => {\n    return state.preferences?.analytics === true;\n  };\n\n  const canUseMarketing = (): boolean => {\n    return state.preferences?.marketing === true;\n  };\n\n  const canUseFunctional = (): boolean => {\n    return state.preferences?.functional === true;\n  };\n\n  const resetConsent = () => {\n    localStorage.removeItem('cookie-consent');\n    localStorage.removeItem('cookie-consent-date');\n    setState({\n      showBanner: true,\n      preferences: null,\n      consentDate: null,\n    });\n  };\n\n  return {\n    showBanner: state.showBanner,\n    preferences: state.preferences,\n    consentDate: state.consentDate,\n    updateConsent,\n    withdrawConsent,\n    canUseAnalytics,\n    canUseMarketing,\n    canUseFunctional,\n    resetConsent,\n  };\n}","size_bytes":3752},"client/src/hooks/useLanguage.ts":{"content":"import { useState, useEffect, createContext, useContext } from 'react';\nimport { translations, defaultLanguage, type Translation } from '@/lib/translations';\n\ninterface LanguageContextType {\n  language: string;\n  setLanguage: (lang: string) => void;\n  t: Translation;\n  isLoading: boolean;\n}\n\nexport const LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\nexport function useLanguage() {\n  const context = useContext(LanguageContext);\n  if (!context) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n}\n\nexport function useLanguageState() {\n  const [language, setLanguageState] = useState<string>(() => {\n    // Try to get language from localStorage, URL, or browser preference\n    const stored = localStorage.getItem('preferred-language');\n    if (stored && translations[stored]) {\n      return stored;\n    }\n\n    // Try to get from URL parameter\n    const urlParams = new URLSearchParams(window.location.search);\n    const urlLang = urlParams.get('lang');\n    if (urlLang && translations[urlLang]) {\n      return urlLang;\n    }\n\n    // Try to detect from browser language\n    const browserLang = navigator.language.split('-')[0];\n    if (translations[browserLang]) {\n      return browserLang;\n    }\n\n    return defaultLanguage;\n  });\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const setLanguage = (lang: string) => {\n    if (translations[lang]) {\n      setIsLoading(true);\n      setLanguageState(lang);\n      localStorage.setItem('preferred-language', lang);\n      \n      // Update URL parameter without reload\n      const url = new URL(window.location.href);\n      url.searchParams.set('lang', lang);\n      window.history.replaceState({}, '', url.toString());\n      \n      // Set functional cookie if GDPR allows\n      const consent = localStorage.getItem('cookie-consent');\n      if (consent) {\n        try {\n          const settings = JSON.parse(consent);\n          if (settings.functional) {\n            document.cookie = `language_preference=${lang}; path=/; max-age=${365 * 24 * 60 * 60}; SameSite=Lax`;\n          }\n        } catch (error) {\n          // Invalid consent data, using default\n        }\n      }\n      \n      setTimeout(() => setIsLoading(false), 100);\n    }\n  };\n\n  useEffect(() => {\n    // Listen for storage changes (language change in another tab)\n    const handleStorageChange = (e: StorageEvent) => {\n      if (e.key === 'preferred-language' && e.newValue && translations[e.newValue]) {\n        setLanguageState(e.newValue);\n      }\n    };\n\n    window.addEventListener('storage', handleStorageChange);\n    return () => window.removeEventListener('storage', handleStorageChange);\n  }, []);\n\n  const t = translations[language] || translations[defaultLanguage];\n\n  return {\n    language,\n    setLanguage,\n    t,\n    isLoading\n  };\n}","size_bytes":2847},"server/enhanced-vehicle-data.ts":{"content":"import { type InsertVehicle } from \"@shared/schema\";\n\n// Enhanced comprehensive vehicle database with complete generations and engine coverage\nexport const enhancedVehicleData: InsertVehicle[] = [\n  // === AUDI COMPLETE ENHANCED LINEUP ===\n  \n  // A1 - All Generations with Full Engine Range\n  // 8X Generation (2010-2018)\n  { brand: \"Audi\", model: \"A1\", generation: \"8X (2010-2018)\", engine: \"1.0 TFSI\", variant: \"82hp\", vehicleType: \"car\", originalPower: 82, originalTorque: 160, stage1Power: 100, stage1Torque: 190, stage2Power: 115, stage2Torque: 215 },\n  { brand: \"Audi\", model: \"A1\", generation: \"8X (2010-2018)\", engine: \"1.2 TFSI\", variant: \"86hp\", vehicleType: \"car\", originalPower: 86, originalTorque: 160, stage1Power: 105, stage1Torque: 190, stage2Power: 120, stage2Torque: 215 },\n  { brand: \"Audi\", model: \"A1\", generation: \"8X (2010-2018)\", engine: \"1.4 TFSI\", variant: \"122hp\", vehicleType: \"car\", originalPower: 122, originalTorque: 200, stage1Power: 150, stage1Torque: 240, stage2Power: 170, stage2Torque: 270 },\n  { brand: \"Audi\", model: \"A1\", generation: \"8X (2010-2018)\", engine: \"1.4 TFSI\", variant: \"140hp\", vehicleType: \"car\", originalPower: 140, originalTorque: 250, stage1Power: 170, stage1Torque: 300, stage2Power: 195, stage2Torque: 330 },\n  { brand: \"Audi\", model: \"A1\", generation: \"8X (2010-2018)\", engine: \"1.4 TFSI\", variant: \"185hp\", vehicleType: \"car\", originalPower: 185, originalTorque: 250, stage1Power: 220, stage1Torque: 300, stage2Power: 250, stage2Torque: 330 },\n  { brand: \"Audi\", model: \"A1\", generation: \"8X (2010-2018)\", engine: \"1.6 TDI\", variant: \"90hp\", vehicleType: \"car\", originalPower: 90, originalTorque: 230, stage1Power: 115, stage1Torque: 280, stage2Power: 135, stage2Torque: 310 },\n  { brand: \"Audi\", model: \"A1\", generation: \"8X (2010-2018)\", engine: \"1.6 TDI\", variant: \"105hp\", vehicleType: \"car\", originalPower: 105, originalTorque: 250, stage1Power: 130, stage1Torque: 300, stage2Power: 150, stage2Torque: 330 },\n  { brand: \"Audi\", model: \"A1\", generation: \"8X (2010-2018)\", engine: \"1.6 TDI\", variant: \"116hp\", vehicleType: \"car\", originalPower: 116, originalTorque: 250, stage1Power: 145, stage1Torque: 300, stage2Power: 165, stage2Torque: 330 },\n  \n  // GB Generation (2018-present)\n  { brand: \"Audi\", model: \"A1\", generation: \"GB (2018-present)\", engine: \"1.0 TFSI\", variant: \"95hp\", vehicleType: \"car\", originalPower: 95, originalTorque: 175, stage1Power: 115, stage1Torque: 205, stage2Power: 130, stage2Torque: 235 },\n  { brand: \"Audi\", model: \"A1\", generation: \"GB (2018-present)\", engine: \"1.0 TFSI\", variant: \"116hp\", vehicleType: \"car\", originalPower: 116, originalTorque: 200, stage1Power: 140, stage1Torque: 240, stage2Power: 160, stage2Torque: 270 },\n  { brand: \"Audi\", model: \"A1\", generation: \"GB (2018-present)\", engine: \"1.5 TFSI\", variant: \"150hp\", vehicleType: \"car\", originalPower: 150, originalTorque: 250, stage1Power: 180, stage1Torque: 300, stage2Power: 205, stage2Torque: 330 },\n  { brand: \"Audi\", model: \"A1\", generation: \"GB (2018-present)\", engine: \"2.0 TFSI\", variant: \"207hp\", vehicleType: \"car\", originalPower: 207, originalTorque: 320, stage1Power: 250, stage1Torque: 380, stage2Power: 285, stage2Torque: 420 },\n  \n  // A3 - Complete All Generations\n  // 8L Generation (1996-2003)\n  { brand: \"Audi\", model: \"A3\", generation: \"8L (1996-2003)\", engine: \"1.6\", variant: \"101hp\", vehicleType: \"car\", originalPower: 101, originalTorque: 148, stage1Power: 120, stage1Torque: 175, stage2Power: 135, stage2Torque: 195 },\n  { brand: \"Audi\", model: \"A3\", generation: \"8L (1996-2003)\", engine: \"1.8\", variant: \"125hp\", vehicleType: \"car\", originalPower: 125, originalTorque: 172, stage1Power: 150, stage1Torque: 205, stage2Power: 170, stage2Torque: 230 },\n  { brand: \"Audi\", model: \"A3\", generation: \"8L (1996-2003)\", engine: \"1.8 T\", variant: \"150hp\", vehicleType: \"car\", originalPower: 150, originalTorque: 210, stage1Power: 185, stage1Torque: 260, stage2Power: 215, stage2Torque: 290 },\n  { brand: \"Audi\", model: \"A3\", generation: \"8L (1996-2003)\", engine: \"1.8 T\", variant: \"180hp\", vehicleType: \"car\", originalPower: 180, originalTorque: 235, stage1Power: 220, stage1Torque: 290, stage2Power: 250, stage2Torque: 320 },\n  { brand: \"Audi\", model: \"A3\", generation: \"8L (1996-2003)\", engine: \"1.9 TDI\", variant: \"90hp\", vehicleType: \"car\", originalPower: 90, originalTorque: 210, stage1Power: 115, stage1Torque: 260, stage2Power: 135, stage2Torque: 290 },\n  { brand: \"Audi\", model: \"A3\", generation: \"8L (1996-2003)\", engine: \"1.9 TDI\", variant: \"110hp\", vehicleType: \"car\", originalPower: 110, originalTorque: 235, stage1Power: 140, stage1Torque: 285, stage2Power: 160, stage2Torque: 315 },\n  { brand: \"Audi\", model: \"A3\", generation: \"8L (1996-2003)\", engine: \"1.9 TDI\", variant: \"130hp\", vehicleType: \"car\", originalPower: 130, originalTorque: 310, stage1Power: 160, stage1Torque: 370, stage2Power: 185, stage2Torque: 410 },\n  \n  // 8P Generation (2003-2012)\n  { brand: \"Audi\", model: \"A3\", generation: \"8P (2003-2012)\", engine: \"1.4 TFSI\", variant: \"125hp\", vehicleType: \"car\", originalPower: 125, originalTorque: 200, stage1Power: 155, stage1Torque: 250, stage2Power: 175, stage2Torque: 280 },\n  { brand: \"Audi\", model: \"A3\", generation: \"8P (2003-2012)\", engine: \"1.6\", variant: \"102hp\", vehicleType: \"car\", originalPower: 102, originalTorque: 148, stage1Power: 125, stage1Torque: 175, stage2Power: 140, stage2Torque: 195 },\n  { brand: \"Audi\", model: \"A3\", generation: \"8P (2003-2012)\", engine: \"1.8 TFSI\", variant: \"160hp\", vehicleType: \"car\", originalPower: 160, originalTorque: 250, stage1Power: 195, stage1Torque: 310, stage2Power: 225, stage2Torque: 340 },\n  { brand: \"Audi\", model: \"A3\", generation: \"8P (2003-2012)\", engine: \"2.0 TFSI\", variant: \"200hp\", vehicleType: \"car\", originalPower: 200, originalTorque: 280, stage1Power: 240, stage1Torque: 340, stage2Power: 275, stage2Torque: 380 },\n  { brand: \"Audi\", model: \"A3\", generation: \"8P (2003-2012)\", engine: \"2.0 TFSI\", variant: \"265hp\", vehicleType: \"car\", originalPower: 265, originalTorque: 350, stage1Power: 315, stage1Torque: 420, stage2Power: 355, stage2Torque: 460 },\n  { brand: \"Audi\", model: \"A3\", generation: \"8P (2003-2012)\", engine: \"1.6 TDI\", variant: \"105hp\", vehicleType: \"car\", originalPower: 105, originalTorque: 250, stage1Power: 130, stage1Torque: 300, stage2Power: 150, stage2Torque: 330 },\n  { brand: \"Audi\", model: \"A3\", generation: \"8P (2003-2012)\", engine: \"1.9 TDI\", variant: \"105hp\", vehicleType: \"car\", originalPower: 105, originalTorque: 250, stage1Power: 135, stage1Torque: 300, stage2Power: 155, stage2Torque: 330 },\n  { brand: \"Audi\", model: \"A3\", generation: \"8P (2003-2012)\", engine: \"2.0 TDI\", variant: \"140hp\", vehicleType: \"car\", originalPower: 140, originalTorque: 320, stage1Power: 175, stage1Torque: 380, stage2Power: 200, stage2Torque: 420 },\n  { brand: \"Audi\", model: \"A3\", generation: \"8P (2003-2012)\", engine: \"2.0 TDI\", variant: \"170hp\", vehicleType: \"car\", originalPower: 170, originalTorque: 350, stage1Power: 210, stage1Torque: 420, stage2Power: 240, stage2Torque: 460 },\n  \n  // 8V Generation (2012-2020)\n  { brand: \"Audi\", model: \"A3\", generation: \"8V (2012-2020)\", engine: \"1.0 TFSI\", variant: \"115hp\", vehicleType: \"car\", originalPower: 115, originalTorque: 200, stage1Power: 140, stage1Torque: 240, stage2Power: 160, stage2Torque: 270 },\n  { brand: \"Audi\", model: \"A3\", generation: \"8V (2012-2020)\", engine: \"1.4 TFSI\", variant: \"125hp\", vehicleType: \"car\", originalPower: 125, originalTorque: 200, stage1Power: 155, stage1Torque: 250, stage2Power: 175, stage2Torque: 280 },\n  { brand: \"Audi\", model: \"A3\", generation: \"8V (2012-2020)\", engine: \"1.4 TFSI\", variant: \"150hp\", vehicleType: \"car\", originalPower: 150, originalTorque: 250, stage1Power: 185, stage1Torque: 310, stage2Power: 210, stage2Torque: 340 },\n  { brand: \"Audi\", model: \"A3\", generation: \"8V (2012-2020)\", engine: \"1.8 TFSI\", variant: \"180hp\", vehicleType: \"car\", originalPower: 180, originalTorque: 250, stage1Power: 220, stage1Torque: 310, stage2Power: 250, stage2Torque: 340 },\n  { brand: \"Audi\", model: \"A3\", generation: \"8V (2012-2020)\", engine: \"2.0 TFSI\", variant: \"190hp\", vehicleType: \"car\", originalPower: 190, originalTorque: 320, stage1Power: 230, stage1Torque: 380, stage2Power: 265, stage2Torque: 420 },\n  { brand: \"Audi\", model: \"A3\", generation: \"8V (2012-2020)\", engine: \"2.0 TFSI\", variant: \"300hp\", vehicleType: \"car\", originalPower: 300, originalTorque: 380, stage1Power: 360, stage1Torque: 450, stage2Power: 410, stage2Torque: 500 },\n  { brand: \"Audi\", model: \"A3\", generation: \"8V (2012-2020)\", engine: \"1.6 TDI\", variant: \"110hp\", vehicleType: \"car\", originalPower: 110, originalTorque: 250, stage1Power: 135, stage1Torque: 300, stage2Power: 155, stage2Torque: 330 },\n  { brand: \"Audi\", model: \"A3\", generation: \"8V (2012-2020)\", engine: \"2.0 TDI\", variant: \"150hp\", vehicleType: \"car\", originalPower: 150, originalTorque: 320, stage1Power: 185, stage1Torque: 380, stage2Power: 215, stage2Torque: 420 },\n  { brand: \"Audi\", model: \"A3\", generation: \"8V (2012-2020)\", engine: \"2.0 TDI\", variant: \"184hp\", vehicleType: \"car\", originalPower: 184, originalTorque: 380, stage1Power: 225, stage1Torque: 450, stage2Power: 255, stage2Torque: 490 },\n  \n  // 8Y Generation (2020-present)\n  { brand: \"Audi\", model: \"A3\", generation: \"8Y (2020-present)\", engine: \"1.0 TFSI\", variant: \"110hp\", vehicleType: \"car\", originalPower: 110, originalTorque: 200, stage1Power: 135, stage1Torque: 240, stage2Power: 155, stage2Torque: 270 },\n  { brand: \"Audi\", model: \"A3\", generation: \"8Y (2020-present)\", engine: \"1.5 TFSI\", variant: \"150hp\", vehicleType: \"car\", originalPower: 150, originalTorque: 250, stage1Power: 180, stage1Torque: 300, stage2Power: 205, stage2Torque: 330 },\n  { brand: \"Audi\", model: \"A3\", generation: \"8Y (2020-present)\", engine: \"2.0 TFSI\", variant: \"190hp\", vehicleType: \"car\", originalPower: 190, originalTorque: 320, stage1Power: 230, stage1Torque: 380, stage2Power: 265, stage2Torque: 420 },\n  { brand: \"Audi\", model: \"A3\", generation: \"8Y (2020-present)\", engine: \"2.0 TDI\", variant: \"150hp\", vehicleType: \"car\", originalPower: 150, originalTorque: 360, stage1Power: 185, stage1Torque: 420, stage2Power: 215, stage2Torque: 460 },\n  \n  // A4 - Complete All Generations\n  // B5 Generation (1994-2001)\n  { brand: \"Audi\", model: \"A4\", generation: \"B5 (1994-2001)\", engine: \"1.6\", variant: \"101hp\", vehicleType: \"car\", originalPower: 101, originalTorque: 148, stage1Power: 120, stage1Torque: 175, stage2Power: 135, stage2Torque: 195 },\n  { brand: \"Audi\", model: \"A4\", generation: \"B5 (1994-2001)\", engine: \"1.8\", variant: \"125hp\", vehicleType: \"car\", originalPower: 125, originalTorque: 172, stage1Power: 150, stage1Torque: 205, stage2Power: 170, stage2Torque: 230 },\n  { brand: \"Audi\", model: \"A4\", generation: \"B5 (1994-2001)\", engine: \"1.8 T\", variant: \"150hp\", vehicleType: \"car\", originalPower: 150, originalTorque: 210, stage1Power: 185, stage1Torque: 260, stage2Power: 215, stage2Torque: 290 },\n  { brand: \"Audi\", model: \"A4\", generation: \"B5 (1994-2001)\", engine: \"2.4\", variant: \"165hp\", vehicleType: \"car\", originalPower: 165, originalTorque: 230, stage1Power: 195, stage1Torque: 270, stage2Power: 220, stage2Torque: 300 },\n  { brand: \"Audi\", model: \"A4\", generation: \"B5 (1994-2001)\", engine: \"2.8\", variant: \"193hp\", vehicleType: \"car\", originalPower: 193, originalTorque: 280, stage1Power: 230, stage1Torque: 330, stage2Power: 260, stage2Torque: 360 },\n  { brand: \"Audi\", model: \"A4\", generation: \"B5 (1994-2001)\", engine: \"1.9 TDI\", variant: \"90hp\", vehicleType: \"car\", originalPower: 90, originalTorque: 210, stage1Power: 115, stage1Torque: 260, stage2Power: 135, stage2Torque: 290 },\n  { brand: \"Audi\", model: \"A4\", generation: \"B5 (1994-2001)\", engine: \"1.9 TDI\", variant: \"110hp\", vehicleType: \"car\", originalPower: 110, originalTorque: 235, stage1Power: 140, stage1Torque: 285, stage2Power: 160, stage2Torque: 315 },\n  { brand: \"Audi\", model: \"A4\", generation: \"B5 (1994-2001)\", engine: \"2.5 TDI\", variant: \"150hp\", vehicleType: \"car\", originalPower: 150, originalTorque: 310, stage1Power: 185, stage1Torque: 370, stage2Power: 215, stage2Torque: 410 },\n  \n  // B6 Generation (2000-2005)\n  { brand: \"Audi\", model: \"A4\", generation: \"B6 (2000-2005)\", engine: \"1.6\", variant: \"102hp\", vehicleType: \"car\", originalPower: 102, originalTorque: 148, stage1Power: 125, stage1Torque: 175, stage2Power: 140, stage2Torque: 195 },\n  { brand: \"Audi\", model: \"A4\", generation: \"B6 (2000-2005)\", engine: \"1.8 T\", variant: \"163hp\", vehicleType: \"car\", originalPower: 163, originalTorque: 225, stage1Power: 200, stage1Torque: 280, stage2Power: 230, stage2Torque: 315 },\n  { brand: \"Audi\", model: \"A4\", generation: \"B6 (2000-2005)\", engine: \"2.0\", variant: \"130hp\", vehicleType: \"car\", originalPower: 130, originalTorque: 195, stage1Power: 155, stage1Torque: 235, stage2Power: 175, stage2Torque: 265 },\n  { brand: \"Audi\", model: \"A4\", generation: \"B6 (2000-2005)\", engine: \"3.0\", variant: \"220hp\", vehicleType: \"car\", originalPower: 220, originalTorque: 300, stage1Power: 260, stage1Torque: 360, stage2Power: 295, stage2Torque: 400 },\n  { brand: \"Audi\", model: \"A4\", generation: \"B6 (2000-2005)\", engine: \"1.9 TDI\", variant: \"101hp\", vehicleType: \"car\", originalPower: 101, originalTorque: 240, stage1Power: 130, stage1Torque: 290, stage2Power: 150, stage2Torque: 320 },\n  { brand: \"Audi\", model: \"A4\", generation: \"B6 (2000-2005)\", engine: \"1.9 TDI\", variant: \"130hp\", vehicleType: \"car\", originalPower: 130, originalTorque: 310, stage1Power: 160, stage1Torque: 370, stage2Power: 185, stage2Torque: 410 },\n  { brand: \"Audi\", model: \"A4\", generation: \"B6 (2000-2005)\", engine: \"2.5 TDI\", variant: \"163hp\", vehicleType: \"car\", originalPower: 163, originalTorque: 340, stage1Power: 200, stage1Torque: 410, stage2Power: 230, stage2Torque: 450 },\n  \n  // === BMW ENHANCED COMPLETE LINEUP ===\n  \n  // 1 Series - All Generations Enhanced\n  // E81/E87 Generation (2004-2013)\n  { brand: \"BMW\", model: \"1 Series\", generation: \"E81/E87 (2004-2013)\", engine: \"1.6i\", variant: \"115hp\", vehicleType: \"car\", originalPower: 115, originalTorque: 150, stage1Power: 135, stage1Torque: 180, stage2Power: 155, stage2Torque: 200 },\n  { brand: \"BMW\", model: \"1 Series\", generation: \"E81/E87 (2004-2013)\", engine: \"1.6i\", variant: \"116hp\", vehicleType: \"car\", originalPower: 116, originalTorque: 150, stage1Power: 140, stage1Torque: 180, stage2Power: 160, stage2Torque: 200 },\n  { brand: \"BMW\", model: \"1 Series\", generation: \"E81/E87 (2004-2013)\", engine: \"2.0i\", variant: \"150hp\", vehicleType: \"car\", originalPower: 150, originalTorque: 200, stage1Power: 180, stage1Torque: 240, stage2Power: 205, stage2Torque: 270 },\n  { brand: \"BMW\", model: \"1 Series\", generation: \"E81/E87 (2004-2013)\", engine: \"3.0i\", variant: \"258hp\", vehicleType: \"car\", originalPower: 258, originalTorque: 300, stage1Power: 310, stage1Torque: 360, stage2Power: 350, stage2Torque: 400 },\n  { brand: \"BMW\", model: \"1 Series\", generation: \"E81/E87 (2004-2013)\", engine: \"1.6d\", variant: \"116hp\", vehicleType: \"car\", originalPower: 116, originalTorque: 260, stage1Power: 145, stage1Torque: 310, stage2Power: 165, stage2Torque: 340 },\n  { brand: \"BMW\", model: \"1 Series\", generation: \"E81/E87 (2004-2013)\", engine: \"2.0d\", variant: \"143hp\", vehicleType: \"car\", originalPower: 143, originalTorque: 300, stage1Power: 180, stage1Torque: 360, stage2Power: 205, stage2Torque: 400 },\n  { brand: \"BMW\", model: \"1 Series\", generation: \"E81/E87 (2004-2013)\", engine: \"2.0d\", variant: \"177hp\", vehicleType: \"car\", originalPower: 177, originalTorque: 350, stage1Power: 215, stage1Torque: 420, stage2Power: 245, stage2Torque: 460 },\n  \n  // F20/F21 Generation (2011-2019)\n  { brand: \"BMW\", model: \"1 Series\", generation: \"F20/F21 (2011-2019)\", engine: \"1.6i\", variant: \"136hp\", vehicleType: \"car\", originalPower: 136, originalTorque: 220, stage1Power: 165, stage1Torque: 270, stage2Power: 190, stage2Torque: 300 },\n  { brand: \"BMW\", model: \"1 Series\", generation: \"F20/F21 (2011-2019)\", engine: \"2.0i\", variant: \"184hp\", vehicleType: \"car\", originalPower: 184, originalTorque: 270, stage1Power: 220, stage1Torque: 320, stage2Power: 250, stage2Torque: 360 },\n  { brand: \"BMW\", model: \"1 Series\", generation: \"F20/F21 (2011-2019)\", engine: \"2.0i\", variant: \"231hp\", vehicleType: \"car\", originalPower: 231, originalTorque: 350, stage1Power: 275, stage1Torque: 410, stage2Power: 315, stage2Torque: 450 },\n  { brand: \"BMW\", model: \"1 Series\", generation: \"F20/F21 (2011-2019)\", engine: \"3.0i\", variant: \"340hp\", vehicleType: \"car\", originalPower: 340, originalTorque: 500, stage1Power: 400, stage1Torque: 580, stage2Power: 450, stage2Torque: 640 },\n  { brand: \"BMW\", model: \"1 Series\", generation: \"F20/F21 (2011-2019)\", engine: \"1.5d\", variant: \"116hp\", vehicleType: \"car\", originalPower: 116, originalTorque: 270, stage1Power: 145, stage1Torque: 320, stage2Power: 165, stage2Torque: 350 },\n  { brand: \"BMW\", model: \"1 Series\", generation: \"F20/F21 (2011-2019)\", engine: \"2.0d\", variant: \"150hp\", vehicleType: \"car\", originalPower: 150, originalTorque: 320, stage1Power: 185, stage1Torque: 380, stage2Power: 215, stage2Torque: 420 },\n  { brand: \"BMW\", model: \"1 Series\", generation: \"F20/F21 (2011-2019)\", engine: \"2.0d\", variant: \"190hp\", vehicleType: \"car\", originalPower: 190, originalTorque: 400, stage1Power: 235, stage1Torque: 470, stage2Power: 270, stage2Torque: 510 },\n  \n  // F40 Generation (2019-present)\n  { brand: \"BMW\", model: \"1 Series\", generation: \"F40 (2019-present)\", engine: \"1.5i\", variant: \"140hp\", vehicleType: \"car\", originalPower: 140, originalTorque: 220, stage1Power: 170, stage1Torque: 270, stage2Power: 195, stage2Torque: 300 },\n  { brand: \"BMW\", model: \"1 Series\", generation: \"F40 (2019-present)\", engine: \"2.0i\", variant: \"178hp\", vehicleType: \"car\", originalPower: 178, originalTorque: 280, stage1Power: 215, stage1Torque: 330, stage2Power: 245, stage2Torque: 370 },\n  { brand: \"BMW\", model: \"1 Series\", generation: \"F40 (2019-present)\", engine: \"2.0i\", variant: \"306hp\", vehicleType: \"car\", originalPower: 306, originalTorque: 450, stage1Power: 360, stage1Torque: 520, stage2Power: 410, stage2Torque: 580 },\n  { brand: \"BMW\", model: \"1 Series\", generation: \"F40 (2019-present)\", engine: \"1.5d\", variant: \"116hp\", vehicleType: \"car\", originalPower: 116, originalTorque: 270, stage1Power: 145, stage1Torque: 320, stage2Power: 165, stage2Torque: 350 },\n  { brand: \"BMW\", model: \"1 Series\", generation: \"F40 (2019-present)\", engine: \"2.0d\", variant: \"150hp\", vehicleType: \"car\", originalPower: 150, originalTorque: 350, stage1Power: 185, stage1Torque: 410, stage2Power: 215, stage2Torque: 450 },\n  \n  // === MERCEDES-BENZ ENHANCED COMPLETE LINEUP ===\n  \n  // A-Class - All Generations Enhanced\n  // W168 Generation (1997-2004)\n  { brand: \"Mercedes-Benz\", model: \"A-Class\", generation: \"W168 (1997-2004)\", engine: \"1.4\", variant: \"82hp\", vehicleType: \"car\", originalPower: 82, originalTorque: 126, stage1Power: 100, stage1Torque: 150, stage2Power: 115, stage2Torque: 175 },\n  { brand: \"Mercedes-Benz\", model: \"A-Class\", generation: \"W168 (1997-2004)\", engine: \"1.6\", variant: \"102hp\", vehicleType: \"car\", originalPower: 102, originalTorque: 148, stage1Power: 125, stage1Torque: 175, stage2Power: 140, stage2Torque: 195 },\n  { brand: \"Mercedes-Benz\", model: \"A-Class\", generation: \"W168 (1997-2004)\", engine: \"1.9\", variant: \"125hp\", vehicleType: \"car\", originalPower: 125, originalTorque: 180, stage1Power: 150, stage1Torque: 215, stage2Power: 170, stage2Torque: 240 },\n  { brand: \"Mercedes-Benz\", model: \"A-Class\", generation: \"W168 (1997-2004)\", engine: \"1.7 CDI\", variant: \"90hp\", vehicleType: \"car\", originalPower: 90, originalTorque: 180, stage1Power: 115, stage1Torque: 225, stage2Power: 135, stage2Torque: 255 },\n  \n  // W169 Generation (2004-2012)\n  { brand: \"Mercedes-Benz\", model: \"A-Class\", generation: \"W169 (2004-2012)\", engine: \"1.5\", variant: \"95hp\", vehicleType: \"car\", originalPower: 95, originalTorque: 140, stage1Power: 115, stage1Torque: 165, stage2Power: 130, stage2Torque: 185 },\n  { brand: \"Mercedes-Benz\", model: \"A-Class\", generation: \"W169 (2004-2012)\", engine: \"2.0\", variant: \"136hp\", vehicleType: \"car\", originalPower: 136, originalTorque: 185, stage1Power: 165, stage1Torque: 220, stage2Power: 185, stage2Torque: 250 },\n  { brand: \"Mercedes-Benz\", model: \"A-Class\", generation: \"W169 (2004-2012)\", engine: \"1.5 CDI\", variant: \"95hp\", vehicleType: \"car\", originalPower: 95, originalTorque: 220, stage1Power: 120, stage1Torque: 270, stage2Power: 140, stage2Torque: 300 },\n  { brand: \"Mercedes-Benz\", model: \"A-Class\", generation: \"W169 (2004-2012)\", engine: \"2.0 CDI\", variant: \"140hp\", vehicleType: \"car\", originalPower: 140, originalTorque: 300, stage1Power: 175, stage1Torque: 360, stage2Power: 200, stage2Torque: 400 },\n  \n  // W176 Generation (2012-2018)\n  { brand: \"Mercedes-Benz\", model: \"A-Class\", generation: \"W176 (2012-2018)\", engine: \"1.6\", variant: \"122hp\", vehicleType: \"car\", originalPower: 122, originalTorque: 200, stage1Power: 150, stage1Torque: 240, stage2Power: 170, stage2Torque: 270 },\n  { brand: \"Mercedes-Benz\", model: \"A-Class\", generation: \"W176 (2012-2018)\", engine: \"2.0\", variant: \"156hp\", vehicleType: \"car\", originalPower: 156, originalTorque: 250, stage1Power: 190, stage1Torque: 300, stage2Power: 215, stage2Torque: 330 },\n  { brand: \"Mercedes-Benz\", model: \"A-Class\", generation: \"W176 (2012-2018)\", engine: \"2.0\", variant: \"211hp\", vehicleType: \"car\", originalPower: 211, originalTorque: 350, stage1Power: 255, stage1Torque: 410, stage2Power: 290, stage2Torque: 450 },\n  { brand: \"Mercedes-Benz\", model: \"A-Class\", generation: \"W176 (2012-2018)\", engine: \"2.0\", variant: \"381hp\", vehicleType: \"car\", originalPower: 381, originalTorque: 475, stage1Power: 440, stage1Torque: 550, stage2Power: 490, stage2Torque: 610 },\n  { brand: \"Mercedes-Benz\", model: \"A-Class\", generation: \"W176 (2012-2018)\", engine: \"1.5 CDI\", variant: \"109hp\", vehicleType: \"car\", originalPower: 109, originalTorque: 260, stage1Power: 135, stage1Torque: 310, stage2Power: 155, stage2Torque: 340 },\n  { brand: \"Mercedes-Benz\", model: \"A-Class\", generation: \"W176 (2012-2018)\", engine: \"2.1 CDI\", variant: \"136hp\", vehicleType: \"car\", originalPower: 136, originalTorque: 300, stage1Power: 170, stage1Torque: 360, stage2Power: 195, stage2Torque: 400 },\n  { brand: \"Mercedes-Benz\", model: \"A-Class\", generation: \"W176 (2012-2018)\", engine: \"2.1 CDI\", variant: \"170hp\", vehicleType: \"car\", originalPower: 170, originalTorque: 350, stage1Power: 210, stage1Torque: 420, stage2Power: 240, stage2Torque: 460 },\n  \n  // W177 Generation (2018-present)\n  { brand: \"Mercedes-Benz\", model: \"A-Class\", generation: \"W177 (2018-present)\", engine: \"1.3\", variant: \"163hp\", vehicleType: \"car\", originalPower: 163, originalTorque: 270, stage1Power: 195, stage1Torque: 320, stage2Power: 220, stage2Torque: 360 },\n  { brand: \"Mercedes-Benz\", model: \"A-Class\", generation: \"W177 (2018-present)\", engine: \"2.0\", variant: \"190hp\", vehicleType: \"car\", originalPower: 190, originalTorque: 300, stage1Power: 230, stage1Torque: 360, stage2Power: 265, stage2Torque: 400 },\n  { brand: \"Mercedes-Benz\", model: \"A-Class\", generation: \"W177 (2018-present)\", engine: \"2.0\", variant: \"306hp\", vehicleType: \"car\", originalPower: 306, originalTorque: 400, stage1Power: 360, stage1Torque: 470, stage2Power: 410, stage2Torque: 520 },\n  { brand: \"Mercedes-Benz\", model: \"A-Class\", generation: \"W177 (2018-present)\", engine: \"2.0\", variant: \"421hp\", vehicleType: \"car\", originalPower: 421, originalTorque: 500, stage1Power: 485, stage1Torque: 580, stage2Power: 540, stage2Torque: 640 },\n  { brand: \"Mercedes-Benz\", model: \"A-Class\", generation: \"W177 (2018-present)\", engine: \"1.5 CDI\", variant: \"116hp\", vehicleType: \"car\", originalPower: 116, originalTorque: 260, stage1Power: 145, stage1Torque: 310, stage2Power: 165, stage2Torque: 340 },\n  { brand: \"Mercedes-Benz\", model: \"A-Class\", generation: \"W177 (2018-present)\", engine: \"2.0 CDI\", variant: \"150hp\", vehicleType: \"car\", originalPower: 150, originalTorque: 320, stage1Power: 185, stage1Torque: 380, stage2Power: 215, stage2Torque: 420 },\n  { brand: \"Mercedes-Benz\", model: \"A-Class\", generation: \"W177 (2018-present)\", engine: \"2.0 CDI\", variant: \"190hp\", vehicleType: \"car\", originalPower: 190, originalTorque: 400, stage1Power: 235, stage1Torque: 470, stage2Power: 270, stage2Torque: 510 },\n\n  // === VOLKSWAGEN ENHANCED COMPLETE LINEUP ===\n  \n  // Golf - All Generations Enhanced\n  // Mk4 Generation (1997-2003)\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk4 (1997-2003)\", engine: \"1.4\", variant: \"75hp\", vehicleType: \"car\", originalPower: 75, originalTorque: 126, stage1Power: 90, stage1Torque: 150, stage2Power: 105, stage2Torque: 175 },\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk4 (1997-2003)\", engine: \"1.6\", variant: \"101hp\", vehicleType: \"car\", originalPower: 101, originalTorque: 148, stage1Power: 120, stage1Torque: 175, stage2Power: 135, stage2Torque: 195 },\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk4 (1997-2003)\", engine: \"1.8 T\", variant: \"150hp\", vehicleType: \"car\", originalPower: 150, originalTorque: 210, stage1Power: 185, stage1Torque: 260, stage2Power: 215, stage2Torque: 290 },\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk4 (1997-2003)\", engine: \"2.3 VR5\", variant: \"150hp\", vehicleType: \"car\", originalPower: 150, originalTorque: 205, stage1Power: 180, stage1Torque: 245, stage2Power: 205, stage2Torque: 275 },\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk4 (1997-2003)\", engine: \"2.8 VR6\", variant: \"204hp\", vehicleType: \"car\", originalPower: 204, originalTorque: 270, stage1Power: 245, stage1Torque: 320, stage2Power: 280, stage2Torque: 360 },\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk4 (1997-2003)\", engine: \"1.9 TDI\", variant: \"90hp\", vehicleType: \"car\", originalPower: 90, originalTorque: 210, stage1Power: 115, stage1Torque: 260, stage2Power: 135, stage2Torque: 290 },\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk4 (1997-2003)\", engine: \"1.9 TDI\", variant: \"110hp\", vehicleType: \"car\", originalPower: 110, originalTorque: 235, stage1Power: 140, stage1Torque: 285, stage2Power: 160, stage2Torque: 315 },\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk4 (1997-2003)\", engine: \"1.9 TDI\", variant: \"130hp\", vehicleType: \"car\", originalPower: 130, originalTorque: 310, stage1Power: 160, stage1Torque: 370, stage2Power: 185, stage2Torque: 410 },\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk4 (1997-2003)\", engine: \"1.9 TDI\", variant: \"150hp\", vehicleType: \"car\", originalPower: 150, originalTorque: 320, stage1Power: 185, stage1Torque: 380, stage2Power: 215, stage2Torque: 420 },\n  \n  // Mk5 Generation (2003-2008)\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk5 (2003-2008)\", engine: \"1.4 TSI\", variant: \"122hp\", vehicleType: \"car\", originalPower: 122, originalTorque: 200, stage1Power: 150, stage1Torque: 240, stage2Power: 170, stage2Torque: 270 },\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk5 (2003-2008)\", engine: \"1.6\", variant: \"102hp\", vehicleType: \"car\", originalPower: 102, originalTorque: 148, stage1Power: 125, stage1Torque: 175, stage2Power: 140, stage2Torque: 195 },\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk5 (2003-2008)\", engine: \"2.0 FSI\", variant: \"150hp\", vehicleType: \"car\", originalPower: 150, originalTorque: 200, stage1Power: 180, stage1Torque: 240, stage2Power: 205, stage2Torque: 270 },\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk5 (2003-2008)\", engine: \"2.0 TFSI\", variant: \"200hp\", vehicleType: \"car\", originalPower: 200, originalTorque: 280, stage1Power: 240, stage1Torque: 340, stage2Power: 275, stage2Torque: 380 },\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk5 (2003-2008)\", engine: \"3.2 VR6\", variant: \"250hp\", vehicleType: \"car\", originalPower: 250, originalTorque: 320, stage1Power: 295, stage1Torque: 380, stage2Power: 335, stage2Torque: 420 },\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk5 (2003-2008)\", engine: \"1.9 TDI\", variant: \"105hp\", vehicleType: \"car\", originalPower: 105, originalTorque: 250, stage1Power: 135, stage1Torque: 300, stage2Power: 155, stage2Torque: 330 },\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk5 (2003-2008)\", engine: \"2.0 TDI\", variant: \"140hp\", vehicleType: \"car\", originalPower: 140, originalTorque: 320, stage1Power: 175, stage1Torque: 380, stage2Power: 200, stage2Torque: 420 },\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk5 (2003-2008)\", engine: \"2.0 TDI\", variant: \"170hp\", vehicleType: \"car\", originalPower: 170, originalTorque: 350, stage1Power: 210, stage1Torque: 420, stage2Power: 240, stage2Torque: 460 },\n  \n  // Mk6 Generation (2008-2012)\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk6 (2008-2012)\", engine: \"1.2 TSI\", variant: \"105hp\", vehicleType: \"car\", originalPower: 105, originalTorque: 175, stage1Power: 130, stage1Torque: 210, stage2Power: 150, stage2Torque: 240 },\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk6 (2008-2012)\", engine: \"1.4 TSI\", variant: \"122hp\", vehicleType: \"car\", originalPower: 122, originalTorque: 200, stage1Power: 150, stage1Torque: 240, stage2Power: 170, stage2Torque: 270 },\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk6 (2008-2012)\", engine: \"1.4 TSI\", variant: \"160hp\", vehicleType: \"car\", originalPower: 160, originalTorque: 240, stage1Power: 195, stage1Torque: 290, stage2Power: 220, stage2Torque: 320 },\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk6 (2008-2012)\", engine: \"2.0 TFSI\", variant: \"210hp\", vehicleType: \"car\", originalPower: 210, originalTorque: 280, stage1Power: 255, stage1Torque: 340, stage2Power: 290, stage2Torque: 380 },\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk6 (2008-2012)\", engine: \"2.5\", variant: \"170hp\", vehicleType: \"car\", originalPower: 170, originalTorque: 240, stage1Power: 205, stage1Torque: 290, stage2Power: 235, stage2Torque: 320 },\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk6 (2008-2012)\", engine: \"1.6 TDI\", variant: \"105hp\", vehicleType: \"car\", originalPower: 105, originalTorque: 250, stage1Power: 135, stage1Torque: 300, stage2Power: 155, stage2Torque: 330 },\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk6 (2008-2012)\", engine: \"2.0 TDI\", variant: \"140hp\", vehicleType: \"car\", originalPower: 140, originalTorque: 320, stage1Power: 175, stage1Torque: 380, stage2Power: 200, stage2Torque: 420 },\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk6 (2008-2012)\", engine: \"2.0 TDI\", variant: \"170hp\", vehicleType: \"car\", originalPower: 170, originalTorque: 350, stage1Power: 210, stage1Torque: 420, stage2Power: 240, stage2Torque: 460 },\n  \n  // Mk7 Generation (2012-2019)\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk7 (2012-2019)\", engine: \"1.0 TSI\", variant: \"115hp\", vehicleType: \"car\", originalPower: 115, originalTorque: 200, stage1Power: 140, stage1Torque: 240, stage2Power: 160, stage2Torque: 270 },\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk7 (2012-2019)\", engine: \"1.2 TSI\", variant: \"105hp\", vehicleType: \"car\", originalPower: 105, originalTorque: 175, stage1Power: 130, stage1Torque: 210, stage2Power: 150, stage2Torque: 240 },\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk7 (2012-2019)\", engine: \"1.4 TSI\", variant: \"125hp\", vehicleType: \"car\", originalPower: 125, originalTorque: 200, stage1Power: 155, stage1Torque: 250, stage2Power: 175, stage2Torque: 280 },\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk7 (2012-2019)\", engine: \"1.4 TSI\", variant: \"150hp\", vehicleType: \"car\", originalPower: 150, originalTorque: 250, stage1Power: 185, stage1Torque: 310, stage2Power: 210, stage2Torque: 340 },\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk7 (2012-2019)\", engine: \"1.8 TSI\", variant: \"180hp\", vehicleType: \"car\", originalPower: 180, originalTorque: 250, stage1Power: 220, stage1Torque: 310, stage2Power: 250, stage2Torque: 340 },\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk7 (2012-2019)\", engine: \"2.0 TSI\", variant: \"230hp\", vehicleType: \"car\", originalPower: 230, originalTorque: 350, stage1Power: 280, stage1Torque: 420, stage2Power: 320, stage2Torque: 460 },\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk7 (2012-2019)\", engine: \"2.0 TSI\", variant: \"310hp\", vehicleType: \"car\", originalPower: 310, originalTorque: 400, stage1Power: 370, stage1Torque: 470, stage2Power: 420, stage2Torque: 520 },\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk7 (2012-2019)\", engine: \"1.6 TDI\", variant: \"110hp\", vehicleType: \"car\", originalPower: 110, originalTorque: 250, stage1Power: 135, stage1Torque: 300, stage2Power: 155, stage2Torque: 330 },\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk7 (2012-2019)\", engine: \"2.0 TDI\", variant: \"150hp\", vehicleType: \"car\", originalPower: 150, originalTorque: 320, stage1Power: 185, stage1Torque: 380, stage2Power: 215, stage2Torque: 420 },\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk7 (2012-2019)\", engine: \"2.0 TDI\", variant: \"184hp\", vehicleType: \"car\", originalPower: 184, originalTorque: 380, stage1Power: 225, stage1Torque: 450, stage2Power: 255, stage2Torque: 490 },\n  \n  // Mk8 Generation (2019-present)\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk8 (2019-present)\", engine: \"1.0 TSI\", variant: \"110hp\", vehicleType: \"car\", originalPower: 110, originalTorque: 200, stage1Power: 135, stage1Torque: 240, stage2Power: 155, stage2Torque: 270 },\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk8 (2019-present)\", engine: \"1.5 TSI\", variant: \"130hp\", vehicleType: \"car\", originalPower: 130, originalTorque: 200, stage1Power: 160, stage1Torque: 250, stage2Power: 185, stage2Torque: 280 },\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk8 (2019-present)\", engine: \"1.5 TSI\", variant: \"150hp\", vehicleType: \"car\", originalPower: 150, originalTorque: 250, stage1Power: 180, stage1Torque: 300, stage2Power: 205, stage2Torque: 330 },\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk8 (2019-present)\", engine: \"2.0 TSI\", variant: \"245hp\", vehicleType: \"car\", originalPower: 245, originalTorque: 370, stage1Power: 295, stage1Torque: 440, stage2Power: 335, stage2Torque: 480 },\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk8 (2019-present)\", engine: \"2.0 TSI\", variant: \"320hp\", vehicleType: \"car\", originalPower: 320, originalTorque: 420, stage1Power: 380, stage1Torque: 490, stage2Power: 430, stage2Torque: 540 },\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk8 (2019-present)\", engine: \"2.0 TDI\", variant: \"115hp\", vehicleType: \"car\", originalPower: 115, originalTorque: 300, stage1Power: 145, stage1Torque: 360, stage2Power: 165, stage2Torque: 390 },\n  { brand: \"Volkswagen\", model: \"Golf\", generation: \"Mk8 (2019-present)\", engine: \"2.0 TDI\", variant: \"150hp\", vehicleType: \"car\", originalPower: 150, originalTorque: 360, stage1Power: 185, stage1Torque: 420, stage2Power: 215, stage2Torque: 460 },\n  \n  // === FORD ENHANCED COMPLETE LINEUP ===\n  \n  // Focus - All Generations Enhanced\n  // Mk1 Generation (1998-2004)\n  { brand: \"Ford\", model: \"Focus\", generation: \"Mk1 (1998-2004)\", engine: \"1.4\", variant: \"75hp\", vehicleType: \"car\", originalPower: 75, originalTorque: 126, stage1Power: 90, stage1Torque: 150, stage2Power: 105, stage2Torque: 175 },\n  { brand: \"Ford\", model: \"Focus\", generation: \"Mk1 (1998-2004)\", engine: \"1.6\", variant: \"100hp\", vehicleType: \"car\", originalPower: 100, originalTorque: 145, stage1Power: 120, stage1Torque: 175, stage2Power: 135, stage2Torque: 195 },\n  { brand: \"Ford\", model: \"Focus\", generation: \"Mk1 (1998-2004)\", engine: \"1.8\", variant: \"115hp\", vehicleType: \"car\", originalPower: 115, originalTorque: 165, stage1Power: 140, stage1Torque: 200, stage2Power: 160, stage2Torque: 225 },\n  { brand: \"Ford\", model: \"Focus\", generation: \"Mk1 (1998-2004)\", engine: \"2.0\", variant: \"130hp\", vehicleType: \"car\", originalPower: 130, originalTorque: 185, stage1Power: 155, stage1Torque: 220, stage2Power: 175, stage2Torque: 250 },\n  { brand: \"Ford\", model: \"Focus\", generation: \"Mk1 (1998-2004)\", engine: \"1.8 TDDi\", variant: \"90hp\", vehicleType: \"car\", originalPower: 90, originalTorque: 202, stage1Power: 115, stage1Torque: 250, stage2Power: 135, stage2Torque: 280 },\n  { brand: \"Ford\", model: \"Focus\", generation: \"Mk1 (1998-2004)\", engine: \"1.8 TDCi\", variant: \"115hp\", vehicleType: \"car\", originalPower: 115, originalTorque: 280, stage1Power: 145, stage1Torque: 340, stage2Power: 165, stage2Torque: 370 },\n  \n  // Mk2 Generation (2004-2010)\n  { brand: \"Ford\", model: \"Focus\", generation: \"Mk2 (2004-2010)\", engine: \"1.4\", variant: \"80hp\", vehicleType: \"car\", originalPower: 80, originalTorque: 127, stage1Power: 95, stage1Torque: 150, stage2Power: 110, stage2Torque: 175 },\n  { brand: \"Ford\", model: \"Focus\", generation: \"Mk2 (2004-2010)\", engine: \"1.6\", variant: \"100hp\", vehicleType: \"car\", originalPower: 100, originalTorque: 145, stage1Power: 120, stage1Torque: 175, stage2Power: 135, stage2Torque: 195 },\n  { brand: \"Ford\", model: \"Focus\", generation: \"Mk2 (2004-2010)\", engine: \"1.8\", variant: \"125hp\", vehicleType: \"car\", originalPower: 125, originalTorque: 165, stage1Power: 150, stage1Torque: 200, stage2Power: 170, stage2Torque: 225 },\n  { brand: \"Ford\", model: \"Focus\", generation: \"Mk2 (2004-2010)\", engine: \"2.0\", variant: \"145hp\", vehicleType: \"car\", originalPower: 145, originalTorque: 185, stage1Power: 175, stage1Torque: 220, stage2Power: 195, stage2Torque: 250 },\n  { brand: \"Ford\", model: \"Focus\", generation: \"Mk2 (2004-2010)\", engine: \"2.5\", variant: \"225hp\", vehicleType: \"car\", originalPower: 225, originalTorque: 320, stage1Power: 270, stage1Torque: 380, stage2Power: 305, stage2Torque: 420 },\n  { brand: \"Ford\", model: \"Focus\", generation: \"Mk2 (2004-2010)\", engine: \"1.6 TDCi\", variant: \"90hp\", vehicleType: \"car\", originalPower: 90, originalTorque: 204, stage1Power: 115, stage1Torque: 250, stage2Power: 135, stage2Torque: 280 },\n  { brand: \"Ford\", model: \"Focus\", generation: \"Mk2 (2004-2010)\", engine: \"1.6 TDCi\", variant: \"109hp\", vehicleType: \"car\", originalPower: 109, originalTorque: 240, stage1Power: 135, stage1Torque: 290, stage2Power: 155, stage2Torque: 320 },\n  { brand: \"Ford\", model: \"Focus\", generation: \"Mk2 (2004-2010)\", engine: \"1.8 TDCi\", variant: \"115hp\", vehicleType: \"car\", originalPower: 115, originalTorque: 280, stage1Power: 145, stage1Torque: 340, stage2Power: 165, stage2Torque: 370 },\n  { brand: \"Ford\", model: \"Focus\", generation: \"Mk2 (2004-2010)\", engine: \"2.0 TDCi\", variant: \"136hp\", vehicleType: \"car\", originalPower: 136, originalTorque: 320, stage1Power: 170, stage1Torque: 380, stage2Power: 195, stage2Torque: 420 },\n  \n  // Mk3 Generation (2010-2018)\n  { brand: \"Ford\", model: \"Focus\", generation: \"Mk3 (2010-2018)\", engine: \"1.0 EcoBoost\", variant: \"100hp\", vehicleType: \"car\", originalPower: 100, originalTorque: 170, stage1Power: 125, stage1Torque: 210, stage2Power: 145, stage2Torque: 240 },\n  { brand: \"Ford\", model: \"Focus\", generation: \"Mk3 (2010-2018)\", engine: \"1.0 EcoBoost\", variant: \"125hp\", vehicleType: \"car\", originalPower: 125, originalTorque: 200, stage1Power: 155, stage1Torque: 250, stage2Power: 175, stage2Torque: 280 },\n  { brand: \"Ford\", model: \"Focus\", generation: \"Mk3 (2010-2018)\", engine: \"1.5 EcoBoost\", variant: \"150hp\", vehicleType: \"car\", originalPower: 150, originalTorque: 240, stage1Power: 185, stage1Torque: 300, stage2Power: 210, stage2Torque: 330 },\n  { brand: \"Ford\", model: \"Focus\", generation: \"Mk3 (2010-2018)\", engine: \"1.6\", variant: \"105hp\", vehicleType: \"car\", originalPower: 105, originalTorque: 140, stage1Power: 125, stage1Torque: 170, stage2Power: 145, stage2Torque: 195 },\n  { brand: \"Ford\", model: \"Focus\", generation: \"Mk3 (2010-2018)\", engine: \"1.6\", variant: \"125hp\", vehicleType: \"car\", originalPower: 125, originalTorque: 159, stage1Power: 150, stage1Torque: 190, stage2Power: 170, stage2Torque: 215 },\n  { brand: \"Ford\", model: \"Focus\", generation: \"Mk3 (2010-2018)\", engine: \"2.0\", variant: \"160hp\", vehicleType: \"car\", originalPower: 160, originalTorque: 200, stage1Power: 190, stage1Torque: 240, stage2Power: 215, stage2Torque: 270 },\n  { brand: \"Ford\", model: \"Focus\", generation: \"Mk3 (2010-2018)\", engine: \"2.3 EcoBoost\", variant: \"350hp\", vehicleType: \"car\", originalPower: 350, originalTorque: 440, stage1Power: 410, stage1Torque: 510, stage2Power: 460, stage2Torque: 570 },\n  { brand: \"Ford\", model: \"Focus\", generation: \"Mk3 (2010-2018)\", engine: \"1.5 TDCi\", variant: \"95hp\", vehicleType: \"car\", originalPower: 95, originalTorque: 215, stage1Power: 120, stage1Torque: 265, stage2Power: 140, stage2Torque: 295 },\n  { brand: \"Ford\", model: \"Focus\", generation: \"Mk3 (2010-2018)\", engine: \"1.5 TDCi\", variant: \"120hp\", vehicleType: \"car\", originalPower: 120, originalTorque: 270, stage1Power: 150, stage1Torque: 325, stage2Power: 170, stage2Torque: 360 },\n  { brand: \"Ford\", model: \"Focus\", generation: \"Mk3 (2010-2018)\", engine: \"1.6 TDCi\", variant: \"115hp\", vehicleType: \"car\", originalPower: 115, originalTorque: 270, stage1Power: 145, stage1Torque: 325, stage2Power: 165, stage2Torque: 360 },\n  { brand: \"Ford\", model: \"Focus\", generation: \"Mk3 (2010-2018)\", engine: \"2.0 TDCi\", variant: \"150hp\", vehicleType: \"car\", originalPower: 150, originalTorque: 350, stage1Power: 185, stage1Torque: 420, stage2Power: 215, stage2Torque: 460 },\n  \n  // Mk4 Generation (2018-present)\n  { brand: \"Ford\", model: \"Focus\", generation: \"Mk4 (2018-present)\", engine: \"1.0 EcoBoost\", variant: \"100hp\", vehicleType: \"car\", originalPower: 100, originalTorque: 170, stage1Power: 125, stage1Torque: 210, stage2Power: 145, stage2Torque: 240 },\n  { brand: \"Ford\", model: \"Focus\", generation: \"Mk4 (2018-present)\", engine: \"1.0 EcoBoost\", variant: \"125hp\", vehicleType: \"car\", originalPower: 125, originalTorque: 200, stage1Power: 155, stage1Torque: 250, stage2Power: 175, stage2Torque: 280 },\n  { brand: \"Ford\", model: \"Focus\", generation: \"Mk4 (2018-present)\", engine: \"1.5 EcoBoost\", variant: \"150hp\", vehicleType: \"car\", originalPower: 150, originalTorque: 240, stage1Power: 185, stage1Torque: 300, stage2Power: 210, stage2Torque: 330 },\n  { brand: \"Ford\", model: \"Focus\", generation: \"Mk4 (2018-present)\", engine: \"1.5 EcoBoost\", variant: \"182hp\", vehicleType: \"car\", originalPower: 182, originalTorque: 280, stage1Power: 220, stage1Torque: 340, stage2Power: 250, stage2Torque: 380 },\n  { brand: \"Ford\", model: \"Focus\", generation: \"Mk4 (2018-present)\", engine: \"2.3 EcoBoost\", variant: \"280hp\", vehicleType: \"car\", originalPower: 280, originalTorque: 420, stage1Power: 330, stage1Torque: 490, stage2Power: 375, stage2Torque: 540 },\n  { brand: \"Ford\", model: \"Focus\", generation: \"Mk4 (2018-present)\", engine: \"1.5 TDCi\", variant: \"95hp\", vehicleType: \"car\", originalPower: 95, originalTorque: 300, stage1Power: 120, stage1Torque: 360, stage2Power: 140, stage2Torque: 390 },\n  { brand: \"Ford\", model: \"Focus\", generation: \"Mk4 (2018-present)\", engine: \"1.5 TDCi\", variant: \"120hp\", vehicleType: \"car\", originalPower: 120, originalTorque: 300, stage1Power: 150, stage1Torque: 360, stage2Power: 170, stage2Torque: 400 },\n  { brand: \"Ford\", model: \"Focus\", generation: \"Mk4 (2018-present)\", engine: \"2.0 TDCi\", variant: \"150hp\", vehicleType: \"car\", originalPower: 150, originalTorque: 370, stage1Power: 185, stage1Torque: 440, stage2Power: 215, stage2Torque: 480 },\n  \n  // === AMERICAN BRANDS ENHANCED ===\n  \n  // Chevrolet Cruze - All Generations Enhanced\n  // J300 Generation (2008-2016)\n  { brand: \"Chevrolet\", model: \"Cruze\", generation: \"J300 (2008-2016)\", engine: \"1.4 Turbo\", variant: \"140hp\", vehicleType: \"car\", originalPower: 140, originalTorque: 200, stage1Power: 170, stage1Torque: 250, stage2Power: 195, stage2Torque: 280 },\n  { brand: \"Chevrolet\", model: \"Cruze\", generation: \"J300 (2008-2016)\", engine: \"1.6\", variant: \"109hp\", vehicleType: \"car\", originalPower: 109, originalTorque: 150, stage1Power: 130, stage1Torque: 180, stage2Power: 150, stage2Torque: 205 },\n  { brand: \"Chevrolet\", model: \"Cruze\", generation: \"J300 (2008-2016)\", engine: \"1.8\", variant: \"141hp\", vehicleType: \"car\", originalPower: 141, originalTorque: 176, stage1Power: 170, stage1Torque: 210, stage2Power: 190, stage2Torque: 240 },\n  { brand: \"Chevrolet\", model: \"Cruze\", generation: \"J300 (2008-2016)\", engine: \"2.0 VCDi\", variant: \"150hp\", vehicleType: \"car\", originalPower: 150, originalTorque: 320, stage1Power: 185, stage1Torque: 380, stage2Power: 215, stage2Torque: 420 },\n  { brand: \"Chevrolet\", model: \"Cruze\", generation: \"J300 (2008-2016)\", engine: \"2.0 VCDi\", variant: \"163hp\", vehicleType: \"car\", originalPower: 163, originalTorque: 360, stage1Power: 200, stage1Torque: 430, stage2Power: 230, stage2Torque: 470 },\n  \n  // J400 Generation (2016-present)\n  { brand: \"Chevrolet\", model: \"Cruze\", generation: \"J400 (2016-present)\", engine: \"1.4 Turbo\", variant: \"153hp\", vehicleType: \"car\", originalPower: 153, originalTorque: 240, stage1Power: 185, stage1Torque: 290, stage2Power: 210, stage2Torque: 320 },\n  { brand: \"Chevrolet\", model: \"Cruze\", generation: \"J400 (2016-present)\", engine: \"1.6\", variant: \"109hp\", vehicleType: \"car\", originalPower: 109, originalTorque: 150, stage1Power: 130, stage1Torque: 180, stage2Power: 150, stage2Torque: 205 },\n  { brand: \"Chevrolet\", model: \"Cruze\", generation: \"J400 (2016-present)\", engine: \"1.5\", variant: \"113hp\", vehicleType: \"car\", originalPower: 113, originalTorque: 150, stage1Power: 135, stage1Torque: 180, stage2Power: 155, stage2Torque: 205 },\n  { brand: \"Chevrolet\", model: \"Cruze\", generation: \"J400 (2016-present)\", engine: \"1.6 CDTi\", variant: \"136hp\", vehicleType: \"car\", originalPower: 136, originalTorque: 320, stage1Power: 170, stage1Torque: 380, stage2Power: 195, stage2Torque: 420 },\n  \n  // === COMPREHENSIVE TRUCK LINEUP ===\n  \n  // Ford F-Series Enhanced\n  // F-150 13th Generation (2015-2020)\n  { brand: \"Ford\", model: \"F-150\", generation: \"13th Gen (2015-2020)\", engine: \"2.7 EcoBoost\", variant: \"325hp\", vehicleType: \"truck\", originalPower: 325, originalTorque: 400, stage1Power: 385, stage1Torque: 480, stage2Power: 435, stage2Torque: 540 },\n  { brand: \"Ford\", model: \"F-150\", generation: \"13th Gen (2015-2020)\", engine: \"3.5 EcoBoost\", variant: \"375hp\", vehicleType: \"truck\", originalPower: 375, originalTorque: 470, stage1Power: 445, stage1Torque: 560, stage2Power: 505, stage2Torque: 630 },\n  { brand: \"Ford\", model: \"F-150\", generation: \"13th Gen (2015-2020)\", engine: \"3.5 EcoBoost\", variant: \"450hp\", vehicleType: \"truck\", originalPower: 450, originalTorque: 510, stage1Power: 525, stage1Torque: 600, stage2Power: 590, stage2Torque: 680 },\n  { brand: \"Ford\", model: \"F-150\", generation: \"13th Gen (2015-2020)\", engine: \"5.0 V8\", variant: \"385hp\", vehicleType: \"truck\", originalPower: 385, originalTorque: 387, stage1Power: 450, stage1Torque: 450, stage2Power: 510, stage2Torque: 510 },\n  { brand: \"Ford\", model: \"F-150\", generation: \"13th Gen (2015-2020)\", engine: \"3.0 PowerStroke\", variant: \"250hp\", vehicleType: \"truck\", originalPower: 250, originalTorque: 440, stage1Power: 300, stage1Torque: 520, stage2Power: 340, stage2Torque: 590 },\n  \n  // F-150 14th Generation (2021-present)\n  { brand: \"Ford\", model: \"F-150\", generation: \"14th Gen (2021-present)\", engine: \"2.7 EcoBoost\", variant: \"325hp\", vehicleType: \"truck\", originalPower: 325, originalTorque: 400, stage1Power: 385, stage1Torque: 480, stage2Power: 435, stage2Torque: 540 },\n  { brand: \"Ford\", model: \"F-150\", generation: \"14th Gen (2021-present)\", engine: \"3.5 EcoBoost\", variant: \"400hp\", vehicleType: \"truck\", originalPower: 400, originalTorque: 500, stage1Power: 470, stage1Torque: 590, stage2Power: 535, stage2Torque: 670 },\n  { brand: \"Ford\", model: \"F-150\", generation: \"14th Gen (2021-present)\", engine: \"3.5 EcoBoost\", variant: \"450hp\", vehicleType: \"truck\", originalPower: 450, originalTorque: 510, stage1Power: 525, stage1Torque: 600, stage2Power: 590, stage2Torque: 680 },\n  { brand: \"Ford\", model: \"F-150\", generation: \"14th Gen (2021-present)\", engine: \"5.0 V8\", variant: \"400hp\", vehicleType: \"truck\", originalPower: 400, originalTorque: 410, stage1Power: 465, stage1Torque: 475, stage2Power: 525, stage2Torque: 535 },\n  { brand: \"Ford\", model: \"F-150\", generation: \"14th Gen (2021-present)\", engine: \"3.0 PowerStroke\", variant: \"250hp\", vehicleType: \"truck\", originalPower: 250, originalTorque: 440, stage1Power: 300, stage1Torque: 520, stage2Power: 340, stage2Torque: 590 },\n  \n  // Chevrolet Silverado Enhanced\n  // 3rd Generation (2014-2018)\n  { brand: \"Chevrolet\", model: \"Silverado\", generation: \"3rd Gen (2014-2018)\", engine: \"4.3 V6\", variant: \"285hp\", vehicleType: \"truck\", originalPower: 285, originalTorque: 305, stage1Power: 335, stage1Torque: 360, stage2Power: 380, stage2Torque: 410 },\n  { brand: \"Chevrolet\", model: \"Silverado\", generation: \"3rd Gen (2014-2018)\", engine: \"5.3 V8\", variant: \"355hp\", vehicleType: \"truck\", originalPower: 355, originalTorque: 383, stage1Power: 415, stage1Torque: 445, stage2Power: 470, stage2Torque: 505 },\n  { brand: \"Chevrolet\", model: \"Silverado\", generation: \"3rd Gen (2014-2018)\", engine: \"6.2 V8\", variant: \"420hp\", vehicleType: \"truck\", originalPower: 420, originalTorque: 460, stage1Power: 490, stage1Torque: 535, stage2Power: 555, stage2Torque: 605 },\n  { brand: \"Chevrolet\", model: \"Silverado\", generation: \"3rd Gen (2014-2018)\", engine: \"6.6 Duramax\", variant: \"445hp\", vehicleType: \"truck\", originalPower: 445, originalTorque: 910, stage1Power: 520, stage1Torque: 1050, stage2Power: 590, stage2Torque: 1180 },\n  \n  // 4th Generation (2019-present)\n  { brand: \"Chevrolet\", model: \"Silverado\", generation: \"4th Gen (2019-present)\", engine: \"2.7 Turbo\", variant: \"310hp\", vehicleType: \"truck\", originalPower: 310, originalTorque: 348, stage1Power: 365, stage1Torque: 410, stage2Power: 415, stage2Torque: 465 },\n  { brand: \"Chevrolet\", model: \"Silverado\", generation: \"4th Gen (2019-present)\", engine: \"4.3 V6\", variant: \"285hp\", vehicleType: \"truck\", originalPower: 285, originalTorque: 305, stage1Power: 335, stage1Torque: 360, stage2Power: 380, stage2Torque: 410 },\n  { brand: \"Chevrolet\", model: \"Silverado\", generation: \"4th Gen (2019-present)\", engine: \"5.3 V8\", variant: \"355hp\", vehicleType: \"truck\", originalPower: 355, originalTorque: 383, stage1Power: 415, stage1Torque: 445, stage2Power: 470, stage2Torque: 505 },\n  { brand: \"Chevrolet\", model: \"Silverado\", generation: \"4th Gen (2019-present)\", engine: \"6.2 V8\", variant: \"420hp\", vehicleType: \"truck\", originalPower: 420, originalTorque: 460, stage1Power: 490, stage1Torque: 535, stage2Power: 555, stage2Torque: 605 },\n  { brand: \"Chevrolet\", model: \"Silverado\", generation: \"4th Gen (2019-present)\", engine: \"6.6 Duramax\", variant: \"445hp\", vehicleType: \"truck\", originalPower: 445, originalTorque: 910, stage1Power: 520, stage1Torque: 1050, stage2Power: 590, stage2Torque: 1180 },\n  \n  // === COMPREHENSIVE TRACTOR LINEUP ===\n  \n  // John Deere Enhanced\n  // 6R Series\n  { brand: \"John Deere\", model: \"6105R\", generation: \"6R Series (2011-present)\", engine: \"4.5L PowerTech\", variant: \"105hp\", vehicleType: \"tractor\", originalPower: 105, originalTorque: 470, stage1Power: 125, stage1Torque: 550, stage2Power: 145, stage2Torque: 620 },\n  { brand: \"John Deere\", model: \"6115R\", generation: \"6R Series (2011-present)\", engine: \"4.5L PowerTech\", variant: \"115hp\", vehicleType: \"tractor\", originalPower: 115, originalTorque: 520, stage1Power: 135, stage1Torque: 600, stage2Power: 155, stage2Torque: 680 },\n  { brand: \"John Deere\", model: \"6125R\", generation: \"6R Series (2011-present)\", engine: \"4.5L PowerTech\", variant: \"125hp\", vehicleType: \"tractor\", originalPower: 125, originalTorque: 570, stage1Power: 150, stage1Torque: 650, stage2Power: 170, stage2Torque: 730 },\n  { brand: \"John Deere\", model: \"6135R\", generation: \"6R Series (2011-present)\", engine: \"6.8L PowerTech\", variant: \"135hp\", vehicleType: \"tractor\", originalPower: 135, originalTorque: 620, stage1Power: 160, stage1Torque: 720, stage2Power: 185, stage2Torque: 810 },\n  { brand: \"John Deere\", model: \"6145R\", generation: \"6R Series (2011-present)\", engine: \"6.8L PowerTech\", variant: \"145hp\", vehicleType: \"tractor\", originalPower: 145, originalTorque: 670, stage1Power: 175, stage1Torque: 770, stage2Power: 200, stage2Torque: 870 },\n  { brand: \"John Deere\", model: \"6155R\", generation: \"6R Series (2011-present)\", engine: \"6.8L PowerTech\", variant: \"155hp\", vehicleType: \"tractor\", originalPower: 155, originalTorque: 720, stage1Power: 185, stage1Torque: 820, stage2Power: 215, stage2Torque: 920 },\n  { brand: \"John Deere\", model: \"6175R\", generation: \"6R Series (2011-present)\", engine: \"6.8L PowerTech\", variant: \"175hp\", vehicleType: \"tractor\", originalPower: 175, originalTorque: 780, stage1Power: 210, stage1Torque: 890, stage2Power: 240, stage2Torque: 1000 },\n  { brand: \"John Deere\", model: \"6195R\", generation: \"6R Series (2011-present)\", engine: \"6.8L PowerTech\", variant: \"195hp\", vehicleType: \"tractor\", originalPower: 195, originalTorque: 850, stage1Power: 235, stage1Torque: 970, stage2Power: 270, stage2Torque: 1090 },\n  \n  // 7R Series\n  { brand: \"John Deere\", model: \"7210R\", generation: \"7R Series (2011-present)\", engine: \"6.8L PowerTech\", variant: \"210hp\", vehicleType: \"tractor\", originalPower: 210, originalTorque: 900, stage1Power: 250, stage1Torque: 1020, stage2Power: 285, stage2Torque: 1150 },\n  { brand: \"John Deere\", model: \"7230R\", generation: \"7R Series (2011-present)\", engine: \"6.8L PowerTech\", variant: \"230hp\", vehicleType: \"tractor\", originalPower: 230, originalTorque: 970, stage1Power: 275, stage1Torque: 1100, stage2Power: 315, stage2Torque: 1240 },\n  { brand: \"John Deere\", model: \"7250R\", generation: \"7R Series (2011-present)\", engine: \"6.8L PowerTech\", variant: \"250hp\", vehicleType: \"tractor\", originalPower: 250, originalTorque: 1050, stage1Power: 300, stage1Torque: 1190, stage2Power: 345, stage2Torque: 1340 },\n  { brand: \"John Deere\", model: \"7270R\", generation: \"7R Series (2011-present)\", engine: \"6.8L PowerTech\", variant: \"270hp\", vehicleType: \"tractor\", originalPower: 270, originalTorque: 1120, stage1Power: 325, stage1Torque: 1270, stage2Power: 375, stage2Torque: 1430 },\n  { brand: \"John Deere\", model: \"7290R\", generation: \"7R Series (2011-present)\", engine: \"6.8L PowerTech\", variant: \"290hp\", vehicleType: \"tractor\", originalPower: 290, originalTorque: 1200, stage1Power: 350, stage1Torque: 1360, stage2Power: 400, stage2Torque: 1530 },\n  { brand: \"John Deere\", model: \"7310R\", generation: \"7R Series (2011-present)\", engine: \"9.0L PowerTech\", variant: \"310hp\", vehicleType: \"tractor\", originalPower: 310, originalTorque: 1300, stage1Power: 375, stage1Torque: 1470, stage2Power: 430, stage2Torque: 1660 },\n  \n  // Case IH Enhanced\n  // Maxxum Series\n  { brand: \"Case IH\", model: \"Maxxum 115\", generation: \"Maxxum Series (2013-present)\", engine: \"4.5L FPT\", variant: \"115hp\", vehicleType: \"tractor\", originalPower: 115, originalTorque: 520, stage1Power: 135, stage1Torque: 600, stage2Power: 155, stage2Torque: 680 },\n  { brand: \"Case IH\", model: \"Maxxum 125\", generation: \"Maxxum Series (2013-present)\", engine: \"4.5L FPT\", variant: \"125hp\", vehicleType: \"tractor\", originalPower: 125, originalTorque: 570, stage1Power: 150, stage1Torque: 650, stage2Power: 170, stage2Torque: 730 },\n  { brand: \"Case IH\", model: \"Maxxum 135\", generation: \"Maxxum Series (2013-present)\", engine: \"6.7L FPT\", variant: \"135hp\", vehicleType: \"tractor\", originalPower: 135, originalTorque: 620, stage1Power: 160, stage1Torque: 720, stage2Power: 185, stage2Torque: 810 },\n  { brand: \"Case IH\", model: \"Maxxum 145\", generation: \"Maxxum Series (2013-present)\", engine: \"6.7L FPT\", variant: \"145hp\", vehicleType: \"tractor\", originalPower: 145, originalTorque: 670, stage1Power: 175, stage1Torque: 770, stage2Power: 200, stage2Torque: 870 },\n  { brand: \"Case IH\", model: \"Maxxum 155\", generation: \"Maxxum Series (2013-present)\", engine: \"6.7L FPT\", variant: \"155hp\", vehicleType: \"tractor\", originalPower: 155, originalTorque: 720, stage1Power: 185, stage1Torque: 820, stage2Power: 215, stage2Torque: 920 },\n  \n  // Puma Series\n  { brand: \"Case IH\", model: \"Puma 165\", generation: \"Puma Series (2014-present)\", engine: \"6.7L FPT\", variant: \"165hp\", vehicleType: \"tractor\", originalPower: 165, originalTorque: 750, stage1Power: 200, stage1Torque: 860, stage2Power: 230, stage2Torque: 970 },\n  { brand: \"Case IH\", model: \"Puma 185\", generation: \"Puma Series (2014-present)\", engine: \"6.7L FPT\", variant: \"185hp\", vehicleType: \"tractor\", originalPower: 185, originalTorque: 820, stage1Power: 225, stage1Torque: 940, stage2Power: 260, stage2Torque: 1060 },\n  { brand: \"Case IH\", model: \"Puma 200\", generation: \"Puma Series (2014-present)\", engine: \"6.7L FPT\", variant: \"200hp\", vehicleType: \"tractor\", originalPower: 200, originalTorque: 870, stage1Power: 240, stage1Torque: 990, stage2Power: 275, stage2Torque: 1120 },\n  { brand: \"Case IH\", model: \"Puma 220\", generation: \"Puma Series (2014-present)\", engine: \"6.7L FPT\", variant: \"220hp\", vehicleType: \"tractor\", originalPower: 220, originalTorque: 950, stage1Power: 265, stage1Torque: 1080, stage2Power: 305, stage2Torque: 1220 },\n  { brand: \"Case IH\", model: \"Puma 240\", generation: \"Puma Series (2014-present)\", engine: \"6.7L FPT\", variant: \"240hp\", vehicleType: \"tractor\", originalPower: 240, originalTorque: 1020, stage1Power: 290, stage1Torque: 1160, stage2Power: 330, stage2Torque: 1310 },\n];","size_bytes":57416},"server/populate-enhanced-vehicles.ts":{"content":"import { db } from \"./db\";\nimport { vehicles } from \"@shared/schema\";\nimport { enhancedVehicleData } from \"./enhanced-vehicle-data\";\n\nexport async function populateEnhancedVehicles() {\n  try {\n    console.log(\"Starting enhanced vehicle database population...\");\n\n    // Clear existing vehicle data\n    console.log(\"Clearing existing vehicle data...\");\n    await db.delete(vehicles);\n\n    // Insert enhanced vehicle data in batches for better performance\n    const batchSize = 50;\n    let totalInserted = 0;\n\n    for (let i = 0; i < enhancedVehicleData.length; i += batchSize) {\n      const batch = enhancedVehicleData.slice(i, i + batchSize);\n      await db.insert(vehicles).values(batch);\n      totalInserted += batch.length;\n      console.log(`Inserted batch: ${totalInserted}/${enhancedVehicleData.length} vehicles`);\n    }\n\n    console.log(`Successfully populated database with ${totalInserted} enhanced vehicles!`);\n    console.log(\"Enhanced database includes:\");\n    console.log(\"- Complete generation coverage with years for all models\");\n    console.log(\"- Comprehensive engine type coverage\");\n    console.log(\"- Detailed power and torque specifications\");\n    console.log(\"- Enhanced coverage for cars, trucks, and tractors\");\n    \n    return true;\n  } catch (error) {\n    console.error(\"Error populating enhanced vehicles:\", error);\n    throw error;\n  }\n}\n\n// Run population if called directly\nif (require.main === module) {\n  populateEnhancedVehicles()\n    .then(() => {\n      console.log(\"Enhanced vehicle population completed successfully!\");\n      process.exit(0);\n    })\n    .catch((error) => {\n      console.error(\"Enhanced vehicle population failed:\", error);\n      process.exit(1);\n    });\n}","size_bytes":1710}}}